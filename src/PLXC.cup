import java_cup.runtime.*;

import java.util.List;
import java.util.Vector;

action code {:

:}

parser code {:
    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
:}

terminal ALL, CLL, AP, CP, AC, CC, PYC;
terminal INT, FLOAT, CHAR, STRING;
terminal String ID;
terminal Integer NUM_ENTERO;
terminal Float NUM_REAL;
terminal Character CARACTER;
terminal String CADENA;
terminal MAS, MENOS, POR, DIV, EQ, NEQ, LT, GT, LE, GE, AND, OR, NOT, ASIGNA;
terminal IF, ELSE, WHILE, FOR, DO, PRINT;

nonterminal program, lista_sent, sent;
nonterminal Objeto asig, valor, declr;

precedence right        ASIGNA;
precedence  left        IF, ELSE, DO, WHILE, FOR, PRINT;
precedence  left        MAS, MENOS;
precedence  left        POR, DIV;
precedence  left        EQ, LE, GE;
precedence  left        NEQ, LT, GT;
precedence  left        NOT, AND, OR;
precedence  left        ID, NUM_ENTERO, NUM_REAL;


start with program;

program ::= lista_sent;


lista_sent ::= sent PYC
            | lista_sent sent PYC ;

sent ::= asig
        | PRINT AP valor CP ;

asig ::= ID:id ASIGNA NUM_ENTERO:n {:

                          Objeto variable = new Instancia(id, TInt.getTInt(), TablaSimbolos.bloqueActual, true);
                          Objeto num = new Instancia(n.toString(), TInt.getTInt(), variable.getBloque(), false);
                          if (variable == null)
                              Objeto.errorYPara("[ERROR]\tLa variable no ha sido declarada", new Vector<>(List.of(variable)));

                          if (!(variable instanceof Instancia))
                              Objeto.errorYPara("[ERROR]\tLa variable no es una instancia", new Vector<>(List.of(variable)));



                          RESULT = variable.metodos("ASIGNA", new Vector<>(List.of(num)));
                      :};


/**
expresion ::= ID:id ASIGNA expresoion:val{: // La regla debe retornar el valor de la expresion: (a = 3) == 3
    // Quiero asignar a la variable "id" el valor val
    // Por el tipo de regla la variable ha de estar definida
    if (!tabla.contains(id))
        errorYPara("[ERROR]\tLa variable <"+id+"> no se encuentra definida dentro de la tabla", Vector.of(id, val));// NO EXISTE Vector.of(...)

    // Sobrescribir el contenido de la variable dentro de la tabla
    Objeto var = tabla.getObjeto(id);
    if(!(id instanceof Instancia))
        errorYPara("[ERROR]\tLa variable <"+id+"> se encuentra definida dentro de la tabla, pero no es una instancia ", Vector.of(var, id));// NO EXISTE Vector.of(...)

    RESULT o.metodos("asigna", Vector.of(e));
:}
*/