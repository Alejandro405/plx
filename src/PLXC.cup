import java_cup.runtime.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java.util.Set;
import java.util.HashSet;

action code {:
    public void checkVariable(Objeto obj) {
          if (obj == null)
              Objeto.errorYPara("[ERROR]\tLa variable no ha sido declarada", new Vector<>(List.of(obj)));

          if (!(obj instanceof Instancia))
              Objeto.errorYPara("[ERROR]\tLa variable no es una instancia", new Vector<>(List.of(obj)));
    }

    public void checkVariable(String id) {
        checkVariable(PLXC.tablaSimbolos.getObj(id));
    }

    public void checkType(Objeto obj, Tipo tipo) {
        if (!(obj instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(obj, tipo)));
        Instancia aux = (Instancia) obj;
        if (!aux.getTipoInstancia().isParseable(tipo) )// || aux.getTipoInstancia().getClass() != tipo.getClass()
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>(List.of(obj, tipo)));
    }

    public Instancia checkElem(Objeto valor) {
        if (!(valor instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede formar una coleccion de elementos sin instancias de un mismo tipo mismo tipo", new Vector<>(List.of(valor)));

       return (Instancia) valor;
    }

    private String end_and = "", end_or = "";
    private Stack<String> if_tags = new Stack<>();
    private Stack<SwichOperator> switch_operators = new Stack<>();
    private Stack<Funcion> Funciones = new Stack<>();
    private Objeto res_bool;
:}

parser code {:
    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                Symbol value = (Symbol)info;
                System.err.print(" (linea "+line+", colonna "+column+", símbolo " + sym.terminalNames[value.sym] + "): " + value.toString());
            } else System.err.print(": ");
        else System.err.print(": ");
    }
:}

terminal String ALL, CLL, AP, CP, AC, CC, PYC, COMA, PUNTO, DP, SET;
terminal Tipo INT, FLOAT, CHAR, STRING, U_MINUS, VOID;
terminal String ID;
terminal Integer NUM_ENTERO;
terminal Float NUM_REAL;
terminal Integer CARACTER;
terminal String CADENA;
terminal Boolean FALSE, TRUE;
terminal String MAS, MENOS, POR, DIV, EQ, NEQ, LT, GT, LE, GE, AND, OR, NOT, ASIGNA;
terminal String UNION, ADD, REM;
terminal String IF, WHILE, FOR, DO, PRINT, LENGTH;
terminal String ELSE, ELSEIF;
terminal String CASE, SWITCH, DEFAULT, BREAK, RETURN;

nonterminal program, lista_sent, sent, sent_comp, sent_simpl, sent_if, sent_while, op_else , sent_do_while, sent_for, for_expr, sent_foreach, sent_switch, list_case, op_default, case_oper, list_sent_simpl, declr_func, impl_func,impl_procedure;
nonterminal Set<Instancia> list_param, params;
nonterminal Instancia param;
nonterminal Funcion func_id;
nonterminal String and_end, or_end, else_if;
nonterminal Objeto cond, Get_BoolInstance;
nonterminal Integer Init_Bloque;
nonterminal List<String> list_id;
nonterminal List<Integer> list_int, list_char;
nonterminal List<Instancia> list_float;
nonterminal List<Instancia> list_valor, set_value;
nonterminal Tipo tipo, declr, declr_conj, tipo_primit;
nonterminal Objeto asig, expr, expr_array, array_length, expr_arit, valor, inic;

precedence  nonassoc    IF, ELSE;
precedence  left        DO, WHILE, FOR, PRINT;
precedence  left        MAS, MENOS;
precedence  left        POR, DIV;
precedence  left        U_MINUS;

precedence  left        AND;
precedence  left        OR;
precedence  right       NOT;

precedence  left        EQ, LE, GE;
precedence  left        NEQ, LT, GT;

precedence  left        ID, NUM_ENTERO, NUM_REAL;
precedence  left        FALSE, TRUE, CARACTER, CADENA;
precedence  left        ELSEIF;

precedence  nonassoc    AP, CP;
precedence  nonassoc    AC, CC;
precedence  nonassoc    ALL, CLL;


start with program;

program ::= lista_sent;

lista_sent ::= sent
            | lista_sent sent
            ;

sent ::= sent_comp
        | sent_simpl
        | declr_func
        | impl_func
        ;

param ::= tipo:tipo ID:idParam     {:
        // Crear una entrada para el diccionario que almacena los parámetros <Tipo, Instancia>
        Instancia res = null;

        if (tipo == TString.getInstance()) {
            res = new StringInstancia(idParam);
        } else if (tipo instanceof TArray) {
            //generar otro parámetro extra que añadirá el compilador, el tamaño del array
        }else {
            res = new Instancia(idParam, tipo, 0, true);
        }

        RESULT = res;
:}
        ;

list_param ::= param:p COMA list_param:s    {:
            s.add(p);

            RESULT = s;
:}
            | param:p                       {:
            Set<Instancia> start = new HashSet();

            start.add(p);

            RESULT = start;
:}
            ;

params ::= list_param:l     {:RESULT = l;:}
        |                   {:RESULT = new HashSet<>();:}
        ;

declr_func ::= tipo:tipoRet ID:id AP params:params CP PYC {:
            Funcion f = new Funcion(id, tipoRet, params);

            f.setImplemented(false);

            PLXC.tablaSimbolos.putFunction(f);
:}
            ;

impl_procedure ::= VOID ID:id AP params:params CP ALL {:
                Procedure proced = null;

                if (!PLXC.tablaSimbolos.containsFunction(TVoid.getTVoid(), id)) {
                    proced = new Procedure(id, params);
                    PLXC.tablaSimbolos.putFunction(proced);
                } else {
                    proced = (Procedure) PLXC.tablaSimbolos.getFunction(TVoid.getTVoid(), id);
                }

                PLXC.out.println();
                PLXC.out.println("goto " + proced.getEndFuncition() + ";");
                PLXC.out.println(proced.getInicFuncition() + ":");
                proced.initCallParams(new ArrayList<>(params));
:}
                list_sent_simpl
                CLL
                ;

impl_func ::= tipo:tipo ID:id AP params:params CP ALL {:
            Funcion f = null;
            if (!PLXC.tablaSimbolos.containsFunction(tipo, id)) {
                f = new Funcion(id, tipo, params);
                PLXC.tablaSimbolos.putFunction(f);
            } else {
                f = PLXC.tablaSimbolos.getFunction(tipo, id);
            }

            PLXC.out.println();
            PLXC.out.println("goto " + f.getEndFuncition() + ";");
            PLXC.out.println(f.getInicFuncition() + ":");
            f.initCallParams(new ArrayList<>(params));
:}
            list_sent_simpl
            RETURN expr:expr PYC {:
            if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != tipo) {
                Objeto.errorYPara("[ERROR]\tLa expresin de retorno no casa con el tipo de la función", new Vector<>(List.of(expr, tipo)));
            }

            Funcion f = PLXC.tablaSimbolos.getFunction(tipo, id);
            f.retornaResultado((Instancia) expr);
            f.setImplemented(true);
:}
            CLL;

sent_comp ::= ALL Init_Bloque:bloquePrevio lista_sent CLL {:
                  PLXC.tablaSimbolos.delBlock();
                  TablaSimbolos.bloqueActual = bloquePrevio;
:};

sent_simpl ::= valor PYC
        | declr PYC
        | declr_conj PYC
        | PRINT AP expr:valor CP PYC        {:  if (valor != null) RESULT = valor.metodos("PRINT", new Vector());   :}
        | sent_if
        | sent_while
        | sent_do_while
        | sent_for
        | sent_switch
        | sent_foreach
        ;

list_sent_simpl ::= list_sent_simpl sent_simpl
                 |
                 ;

sent_while ::= WHILE:whileTag
                    // WHILE
                    {:
                    PLXC.out.println(whileTag + ":");
                    :}
                    AP cond:c CP
                    // if c == 0 goto end_while ;
                    {:
                    PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + whileTag + ";");
                    :}
                    sent
                    // goto WHILE ;
                    // end_while:
                    {:
                    PLXC.out.println("goto " + whileTag + ";");
                       PLXC.out.println("end_" + whileTag + " :");:}
                    ;

sent_do_while ::= DO:doTag // -> Inicio y final del bucle
                    //DOWHILE:
                    {:
                    PLXC.out.println("DO_" + doTag + ":");
                    :}
                     sent
                    WHILE:whileTag AP cond:c CP PYC// -> Inicio de la condicion de parada
                    {:
                        PLXC.out.println("if (" + c.getNombre() + " == 1) goto DO_" + doTag + " ;");
                        PLXC.out.println("END_DO_" + doTag + ":");
                    :}
                    // END_DOWHILE
                    ;

for_expr ::= valor:expr
            |
            ;

sent_for ::= FOR:forTag AP for_expr:inic
            // init...
            // FOR:
            {:
                PLXC.out.println(forTag + ":");
            :}
            PYC cond:c
            // if (c == 0) goto FOR_END ;
            // goto FOR_BODY ;
            // FOR_ACT:
            {:
                PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + forTag + ";");
                PLXC.out.println("goto body_" + forTag + ";");
                PLXC.out.println("act_" + forTag + ":");
            :}
            PYC for_expr:act
            // goto FOR ;
            {:
                PLXC.out.println("goto " + forTag + ";");
            :}
            CP
            // FOR_BODY :
            {:
                PLXC.out.println("body_" + forTag + ":");
            :}
            sent
            {:
                PLXC.out.println("goto act_" + forTag + ";");
                PLXC.out.println("end_" + forTag + ":");
            :}
            // goto FOR_ACT ;
            // FOR_END:
            ;

sent_if ::= IF:ifTag AP cond:c CP       {:
    this.if_tags.push(ifTag);
    PLXC.out.println("if (" + c.getNombre() + " == 0) goto else_" + ifTag + " ;");
:}
            sent                        {:
            PLXC.out.println("goto end_" + ifTag + " ;");
            PLXC.out.println("else_" + ifTag + ":");
:}
            else_if                     {:
            PLXC.out.println("end_" + ifTag + ":");
            this.if_tags.pop();
:};

else_if ::= ELSEIF:elseIfTag AP cond:c CP           {:
    PLXC.out.println(" if (" + c.getNombre() + " == 0) goto else_" + elseIfTag + ";");
:}
                sent                                {:
                PLXC.out.println("goto end_" + this.if_tags.peek() + ";");
                PLXC.out.println("else_" + elseIfTag + ":");
                :}
                else_if
            | ELSE sent
            |
            ;

sent_switch ::= SWITCH:switchTag AP valor:expr CP ALL
                {:
                    // Checkear que la expresion es una instancia de tipo entero
                    if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));
                    SwichOperator swOper = new SwichOperator(switchTag, (Instancia) expr);
                    this.switch_operators.push(swOper);

                    PLXC.out.println(swOper.getEtiqSwitch() + ":");
                :}
                list_case
                op_default
                {:
                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println(swOper.getEndSwitch() + ":");
                    this.switch_operators.pop();
                :}
                CLL
                ;

list_case ::= list_case case_oper
            | case_oper
            ;

case_oper ::= CASE:caseEtq valor:expr {:
                  // Checkear que el valor sea una instancia de tipo entero
                  if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));

                  SwichOperator swOper = this.switch_operators.peek();
                  // if (switchExpr != expr) goto end_caseEtq ;
                  PLXC.out.println(SwichOperator.genCase(caseEtq) + ":");
                  PLXC.out.println("if (" + swOper.getExpr().getNombre() + " != " + expr.getNombre() + ") goto " + SwichOperator.getEndCase(caseEtq) + ";");
                  swOper.addCase(caseEtq);
:}
            DP sent BREAK PYC {:
                    //Salto incondicional al final del switch
                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println("goto " + swOper.getEndSwitch() + ";");
                    // Etiqueta de fin del end_caseEtq
                    PLXC.out.println(SwichOperator.getEndCase(caseEtq)+ ":");
:}
            ;

op_default ::= DEFAULT DP {:
            SwichOperator swOper = this.switch_operators.peek();
            PLXC.out.println("default_" + swOper.getEtiqSwitch() + ":");
:}
                sent BREAK PYC
            ;

sent_foreach ::= FOR:forTag AP tipo:tipo ID:id {:
                // Añadir la variable itradora a la tablade símbolos
                Instancia iter = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                PLXC.tablaSimbolos.putObj(iter);
:}
                DP expr:expr CP {:
                // Checkear si la expresion es iterable
                if (!(expr instanceof Instancia) || !((Instancia)expr).getTipoInstancia().isIterable())
                    Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each no es iterable.", new Vector<>(List.of(expr)));

                if (expr instanceof SetInstance) {
                    SetInstance set = (SetInstance) expr;
                    Instancia iter = new Instancia(set.getTipoInstancia());

                    set.iterate(iter);
                } else {
                    // En caso de serlo, declarar la etiqueta del búcle y asignar valor a la variable iteradora
                    Instancia index = new Instancia("$_FOREACH_IDX_".concat(forTag), TInt.getTInt(), TablaSimbolos.bloqueActual, true);
                    PLXC.tablaSimbolos.putObj(index);
                    Instancia iter = (Instancia) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
                    Instancia colec = (Instancia) expr;

                    PLXC.out.println(index.getNombre() + " = 0;");
                    PLXC.out.println("foreach_" + forTag + ":");

                    if (colec instanceof StringInstancia) {
                        if (iter.getTipoInstancia() != TChar.getTChar())
                            Objeto.errorYPara("[ERROR]\tLa variable iteradora del búcle for each necesita ser de tipo char.", new Vector<>(List.of(iter)));

                        StringInstancia.iterate(index, (StringInstancia) colec, iter, "end_foreach_".concat(forTag));
                    } else if (colec.getTipoInstancia() == TString.getInstance()){
                        Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each necesita un StringInstance no una instancia de tipo String.", new Vector<>(List.of(expr)));
                    } else if (colec.getTipoInstancia() instanceof TArray) {
                        TArray.iterate(index, (TArray) colec.getTipoInstancia(), colec, iter, "end_foreach_".concat(forTag));
                    }


                    // Instanciar la variable índice con la que se hará en control y acceso a los elementos
                    // (Sentencia de control, la colección ha de contener el número de iteraciones)
                }

                :}
                sent
                {:
                // Resetear el iterador
                Instancia idx = (Instancia) PLXC.tablaSimbolos.getObj("$_FOREACH_IDX_".concat(forTag), TablaSimbolos.bloqueActual);

                idx.metodos("INCREMENTA_1", new Vector<>());
                PLXC.out.println("goto foreach_" + forTag + ";");
                PLXC.out.println("end_foreach_" + forTag + ":");
:}
               ;

declr ::= tipo:tipo ID:id  inic:inic                          {:
        if (inic != null) {
            Instancia newVar;

            if (tipo != TString.getInstance())
                 newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            else
                 newVar = new StringInstancia(id);

            PLXC.tablaSimbolos.putObj(newVar);
            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }

        RESULT = tipo;
:}
        | tipo:tipo ID:id AC expr:tam CC inic:inic            {:

        if (inic != null) {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }


        RESULT = tipo;
        :}
        | declr:tipo COMA ID:id  inic:inic                    {:
                                  if (inic != null) {
                                      Instancia newVar;

                                      if (tipo != TString.getInstance())
                                           newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      else
                                           newVar = new StringInstancia(id);

                                      PLXC.tablaSimbolos.putObj(newVar);
                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }

                                  RESULT = tipo;
                          :}
        | declr:tipo COMA ID:id AC expr:tam CC inic:inic      {:

                                  if (inic != null) {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);

                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }


                                  RESULT = tipo;
                                  :}
        ;

inic ::= ASIGNA expr:exp        {:RESULT = exp;:}
        |
        ;

set_value ::= ALL list_valor:inic CLL {: RESULT = inic;:}
            | ALL CLL                 {: RESULT = new ArrayList<Instancia>();:}
            | ID:id {:
            Objeto expr = PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
            if (!(expr instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa expresion proporcionada como set value no es una instancia de SetInstace", new Vector<>(List.of(expr)));
            } else {
                SetInstance setValue = (SetInstance) expr;
                RESULT = setValue.getElems();
            }

:}
            ;

declr_conj ::= SET tipo:tipo ID:id ASIGNA set_value:inic {:
        Instancia newVariable = new SetInstance(id, tipo, inic, TablaSimbolos.bloqueActual, true);

        PLXC.tablaSimbolos.putObj(newVariable);
:}
            | SET tipo:tipo ID:id {:
            SetInstance newVar = new SetInstance(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
:}
            ;

list_id ::=  ID:id                          {:
            List<String> start = new ArrayList<>();
            start.add(id);
            RESULT = start; :}
         | list_id:list COMA ID:id          {:  list.add(id); RESULT = list;        :};

list_valor ::= list_valor:l COMA valor:val      {:
            Instancia elem = checkElem(val);

            if (l.get(0).getTipoInstancia() != elem.getTipoInstancia())
                Objeto.errorYPara("[ERROR]\tEl elemento de la colección no es del mismo tipo que el resto", new Vector<>());

            l.add(elem);
            RESULT = l;
:}
            | valor:val                {:
            Instancia elem = checkElem(val);
            List<Instancia> start = new ArrayList<>();

            start.add(elem);

            RESULT = start;
:}
            ;

expr ::= valor:expr                 {:  RESULT = expr;  :}
        | expr_array:expr           {:
        RESULT = expr;
        :}
        ;

func_id ::= ID:id      {:
        Objeto aux = PLXC.tablaSimbolos.getObj(id, 0);
        Funcion f = null;
        if (!(aux instanceof Funcion)) {
            Objeto.errorYPara("[ERROR]\tLa funcion con id <" + "id" + "> no se encuentra ni declarada ni implementada", new Vector<>());
        } else {
            f = (Funcion) aux;

        }

        RESULT = f;
:}
;

valor ::= ID:id PUNTO LENGTH                {:
            checkVariable(id);
            Objeto a = PLXC.tablaSimbolos.getObj(id);

          if (!(a instanceof Instancia) && (((Instancia) a).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(a)));


          RESULT = a.metodos(TArray.ARRAY_METHODS.LENGTH.name(), new Vector<>());
      :}
      | func_id:f AP list_valor:params CP             {:
        f.callFunction(new ArrayList(params));

        RESULT = f.getReturnInstancia();
:}
      | ID:id AC valor:idx CC ASIGNA valor:valor      {:
          // Checkear que el valor es una instancia y no es de tipo array
          checkVariable(id);
          // Checkear que le valor es del mismo que la variable
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable.getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("SET", new Vector<>(List.of(idx, valor)));
      :}
      | ID:id ASIGNA expr:valor             {:
                this.checkVariable(id); // Comprueba que la variable este declarada y que sea una instancia
                Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

                if (!(variable.getTipoInstancia() instanceof TArray)) {
                      this.checkType(valor, variable.getTipoInstancia()); // Comprueba que el tipo de la variable sea el mismo que el de la expresion o sean parseables entre sii
                }

                variable.metodos("ASIGNA", new Vector<>(List.of(valor)));

                RESULT = valor;
            :}
      | AP tipo:tipoDst CP valor:exp        {:

      if (exp instanceof Instancia) {
          Instancia aux = ((Instancia)exp).getTipoInstancia().cast(tipoDst, (Instancia) exp);
          if (aux != null) {
              RESULT = aux;
          } else {
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>());
          }
      } else {
          Objeto.errorYPara("[ERROR]\tNo se puede hacer un casting si el valor a asignar no es una instancia", new Vector<>());
      }

      :}
      | ID:id                     {:  checkVariable(id); RESULT = PLXC.tablaSimbolos.getObj(id);  :}
      | ID:id AC valor:idx CC     {:
          checkVariable(id);
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable instanceof Instancia) && (((Instancia) variable).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("GET", new Vector<>(List.of(idx)));

      :}
      | ID:idA UNION ID:idB       {:
            SetInstance a = null, b = null;
            Objeto aux = PLXC.tablaSimbolos.getObj(idA, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                a = (SetInstance) aux;
            }

            aux = PLXC.tablaSimbolos.getObj(idB, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                b = (SetInstance) aux;
            }

            RESULT = a.metodos(TSet.SET_METHODS.UNION.name(), new Vector<>(List.of(b)));
:}
      | ID:id ADD valor:value   {:
       if (!(value instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se pueden añadir elementos a un conjunto si estos no son instancias", new Vector<>(List.of(value)));

       SetInstance set = (SetInstance) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
       Instancia elem = (Instancia) value;

       RESULT = set.metodos(TSet.SET_METHODS.ADD.name(), new Vector<>(List.of(elem)));
:}
      | NUM_ENTERO:num            {:
      RESULT = new Instancia(num.toString(), TInt.getTInt(), TablaSimbolos.bloqueActual, false);
      :}
      | NUM_REAL:num              {:
      RESULT = new Instancia(num.toString(), TFloat.getTFloat(), TablaSimbolos.bloqueActual, false);
      :}
      | CARACTER:c                {:
      RESULT = new Instancia(c.toString(), TChar.getTChar(), TablaSimbolos.bloqueActual, false);
      :}
      | CADENA:s                  {:
          char[] chars = s.toCharArray();
          StringInstancia res = new StringInstancia(chars);

          res = TString.asignaConstante(res, chars);

          RESULT = res;
      :}
      | expr_arit:expr_arit       {:  RESULT = expr_arit;  :}
      ;

expr_arit ::= AP valor:exp CP             {:  RESULT = exp;   :}
          | valor:a MAS:op valor:b      {:  RESULT = a.metodos(op, new Vector(List.of(b)));     :}
          | valor:a MENOS:op valor:b    {:  RESULT = a.metodos(op, new Vector(List.of(b)));     :}
          | valor:a POR:op valor:b      {:  RESULT = a.metodos(op, new Vector(List.of(b)));     :}
          | valor:a DIV:op valor:b      {:  RESULT = a.metodos(op, new Vector(List.of(b)));     :}
          | MENOS:op valor:exp         {:  RESULT = exp.metodos("UMENOS", new Vector());       :}   %prec U_MINUS
          ;

expr_array ::= ALL list_valor:l CLL       {:
                Instancia res = new Instancia(new TArray(l.get(0).getTipoInstancia(), String.valueOf(l.size())));
                for (int i = 0; i < l.size(); i++) {
                     PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i).getNombre() + ";");
                }

                RESULT = res;
:};


cond ::=  AP cond:a CP          {:  RESULT = a;     :}
        | NOT cond:a            {:  RESULT = a.metodos("NOT", new Vector());   :}
        | cond:a  AND              {:
        this.end_and = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 0) goto " + end_and + ";");
:}
            cond:b          {:
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_and + ":");
            RESULT = res_bool;
:}
        | cond:a  OR               {:
        this.end_or = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 1) goto " + end_or + ";");
:}
            cond:b           {:
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_or + ":");
            RESULT = res_bool;
:}
        | valor:a GT valor:b      {:  RESULT = a.metodos("MAYOR", new Vector(List.of(b)));          :}
        | valor:a LT valor:b      {:  RESULT = a.metodos("MENOR", new Vector(List.of(b)));          :}
        | valor:a GE valor:b      {:  RESULT = a.metodos("MAYOR_IGUAL", new Vector(List.of(b)));    :}
        | valor:a LE valor:b      {:  RESULT = a.metodos("MENOR_IGUAL", new Vector(List.of(b)));    :}
        | valor:a EQ valor:b      {:  RESULT = a.metodos("IGUAL", new Vector(List.of(b)));          :}
        | valor:a NEQ valor:b     {:  RESULT = a.metodos("DISTINTO", new Vector(List.of(b)));       :}
        | FALSE                 {:  RESULT = new Instancia("0", TBool.getTBool(), TablaSimbolos.bloqueActual, false);   :}
        | TRUE                  {:  RESULT = new Instancia("1", TBool.getTBool(), TablaSimbolos.bloqueActual, false);    :}
        ;

tipo ::= tipo_primit:t                  {:
        RESULT = t;
        :}
        | tipo:t ALL array_length:exp CLL       {:

        if (exp != null) {
            RESULT = new TArray(t, exp.getNombre());
        } else {
            RESULT = new TArray(t);
        }

:}
        | tipo:t ALL CLL ALL CLL          {:

        TArray tfila = new TArray(t);
        TArray tmatriz = new TArray(tfila);

        RESULT = tmatriz;

:}
        |                               {:    RESULT = TInt.getTInt();            :}
        ;

tipo_primit ::= INT:t                          {:    RESULT = TInt.getTInt();            :}
            | FLOAT:t                       {:    RESULT = TFloat.getTFloat();        :}
            | CHAR:t                        {:    RESULT = TChar.getTChar();          :}
            | STRING:t                      {:    RESULT = TString.getInstance();     :}
            | VOID:t                        {:    RESULT = TVoid.getTVoid();          :}
            ;

array_length ::= expr:expr   {: RESULT = expr; :}
              |
              ;

Init_Bloque ::=  {:  RESULT = TablaSimbolos.newBloque();     :};

and_end ::= {:  RESULT = PLXC.tablaSimbolos.getNewEtiq();     :};

or_end ::= {:  RESULT = PLXC.tablaSimbolos.getNewEtiq();     :};

Get_BoolInstance ::= {: RESULT = new Instancia(TBool.getTBool());:};

