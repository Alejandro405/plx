
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\005\006\000\002\006\004\000\002\006\004\000" +
    "\002\006\007\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\033\002\000\002\034" +
    "\002\000\002\010\011\000\002\035\002\000\002\012\012" +
    "\000\002\014\003\000\002\014\002\000\002\036\002\000" +
    "\002\037\002\000\002\040\002\000\002\041\002\000\002" +
    "\013\017\000\002\042\002\000\002\043\002\000\002\007" +
    "\012\000\002\044\002\000\002\045\002\000\002\017\012" +
    "\000\002\017\004\000\002\017\002\000\002\030\004\000" +
    "\002\030\007\000\002\030\005\000\002\030\006\000\002" +
    "\030\011\000\002\030\007\000\002\023\003\000\002\023" +
    "\005\000\002\025\005\000\002\025\003\000\002\024\005" +
    "\000\002\024\003\000\002\026\005\000\002\026\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\010\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\006" +
    "\000\002\032\003\000\002\032\006\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\020" +
    "\005\000\002\020\004\000\002\046\002\000\002\020\006" +
    "\000\002\047\002\000\002\020\006\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\020" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\002\000\002\022\002\000" +
    "\002\015\002\000\002\016\002\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\044\004\013\006\022\015\010\016\027\017" +
    "\011\020\026\022\021\023\036\024\014\025\025\026\005" +
    "\032\004\047\016\050\012\051\035\052\023\053\031\001" +
    "\002\000\022\004\042\006\022\022\021\023\036\024\014" +
    "\025\025\026\005\032\004\001\002\000\044\007\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\001\002\000\016\012\243\014\045" +
    "\031\046\032\047\033\051\034\050\001\002\000\004\022" +
    "\233\001\002\000\006\007\uffb0\022\uffb0\001\002\000\006" +
    "\007\uffae\022\uffae\001\002\000\004\006\ufff3\001\002\000" +
    "\044\004\uffab\006\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\022\uffab\023\131\024\132\025\135\026\uffab\032\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\001\002\000\044" +
    "\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\001\002\000\054\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\032" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6" +
    "\056\ufff6\001\002\000\004\006\201\001\002\000\004\002" +
    "\200\001\002\000\054\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\032\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\055\ufffc\056\ufffc\001\002\000\050\007" +
    "\uffc7\010\171\011\uffc7\012\uffc7\013\uffc7\014\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\046\172\001\002" +
    "\000\034\004\042\006\022\007\uffac\015\010\016\027\017" +
    "\011\020\026\022\021\023\036\024\014\025\025\026\005" +
    "\032\004\001\002\000\044\004\ufff0\006\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\032\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\001\002\000\054\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\032\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\055\ufff5\056\ufff5\001\002\000\044\007" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\001\002\000\006\007\uffad" +
    "\022\uffad\001\002\000\006\007\uffaf\022\uffaf\001\002\000" +
    "\046\002\000\004\013\006\022\015\010\016\027\017\011" +
    "\020\026\022\021\023\036\024\014\025\025\026\005\032" +
    "\004\047\016\050\012\051\035\052\023\053\031\001\002" +
    "\000\004\006\154\001\002\000\054\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\032\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\055\ufff7\056\ufff7\001\002" +
    "\000\006\012\150\013\147\001\002\000\054\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\032\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055\ufffd\056\ufffd" +
    "\001\002\000\004\006\041\001\002\000\044\007\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\001\002\000\054\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\032\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\055\ufff4\056\ufff4\001" +
    "\002\000\050\002\uffff\004\uffff\005\uffff\006\uffff\015\uffff" +
    "\016\uffff\017\uffff\020\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\032\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\001\002\000\024\004\042\006\022\012\uffed\022" +
    "\021\023\036\024\014\025\025\026\005\032\004\001\002" +
    "\000\010\023\131\024\132\025\135\001\002\000\004\012" +
    "\uffec\001\002\000\020\007\uffee\012\uffee\014\045\031\046" +
    "\032\047\033\051\034\050\001\002\000\004\054\056\001" +
    "\002\000\022\004\042\006\022\022\021\023\036\024\014" +
    "\025\025\026\005\032\004\001\002\000\022\004\042\006" +
    "\022\022\021\023\036\024\014\025\025\026\005\032\004" +
    "\001\002\000\022\004\042\006\022\022\021\023\036\024" +
    "\014\025\025\026\005\032\004\001\002\000\022\004\042" +
    "\006\022\022\021\023\036\024\014\025\025\026\005\032" +
    "\004\001\002\000\044\007\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\001\002\000\044\007\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\001" +
    "\002\000\044\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\031\uffcc\032\uffcc\033\051\034\050\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\001\002" +
    "\000\044\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\031" +
    "\uffcd\032\uffcd\033\051\034\050\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002\000" +
    "\044\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\004" +
    "\012\060\001\002\000\030\004\042\006\066\022\021\023" +
    "\036\024\014\025\025\026\005\027\062\030\061\032\004" +
    "\045\064\001\002\000\012\007\uffb1\012\uffb1\043\uffb1\044" +
    "\uffb1\001\002\000\012\007\uffb2\012\uffb2\043\uffb2\044\uffb2" +
    "\001\002\000\010\012\uffeb\043\072\044\073\001\002\000" +
    "\030\004\042\006\066\022\021\023\036\024\014\025\025" +
    "\026\005\027\062\030\061\032\004\045\064\001\002\000" +
    "\030\014\045\031\046\032\047\033\051\034\050\035\106" +
    "\036\105\037\111\040\110\041\107\042\104\001\002\000" +
    "\042\004\042\006\066\007\uffac\015\010\016\027\017\011" +
    "\020\026\022\021\023\036\024\014\025\025\026\005\027" +
    "\062\030\061\032\004\045\064\001\002\000\032\007\103" +
    "\014\045\031\046\032\047\033\051\034\050\035\106\036" +
    "\105\037\111\040\110\041\107\042\104\001\002\000\004" +
    "\007\101\001\002\000\010\007\074\043\072\044\073\001" +
    "\002\000\030\004\uffbc\006\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\045\uffbc\001" +
    "\002\000\030\004\uffba\006\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\032\uffba\045\uffba\001" +
    "\002\000\012\007\uffbe\012\uffbe\043\uffbe\044\uffbe\001\002" +
    "\000\030\004\042\006\066\022\021\023\036\024\014\025" +
    "\025\026\005\027\062\030\061\032\004\045\064\001\002" +
    "\000\012\007\uffb9\012\uffb9\043\uffb9\044\uffb9\001\002\000" +
    "\030\004\042\006\066\022\021\023\036\024\014\025\025" +
    "\026\005\027\062\030\061\032\004\045\064\001\002\000" +
    "\012\007\uffbb\012\uffbb\043\uffbb\044\uffbb\001\002\000\022" +
    "\004\042\006\022\022\021\023\036\024\014\025\025\026" +
    "\005\032\004\001\002\000\044\007\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\001\002\000\044\007\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\001\002\000\022\004\042\006\022\022\021\023\036" +
    "\024\014\025\025\026\005\032\004\001\002\000\022\004" +
    "\042\006\022\022\021\023\036\024\014\025\025\026\005" +
    "\032\004\001\002\000\022\004\042\006\022\022\021\023" +
    "\036\024\014\025\025\026\005\032\004\001\002\000\022" +
    "\004\042\006\022\022\021\023\036\024\014\025\025\026" +
    "\005\032\004\001\002\000\022\004\042\006\022\022\021" +
    "\023\036\024\014\025\025\026\005\032\004\001\002\000" +
    "\022\004\042\006\022\022\021\023\036\024\014\025\025" +
    "\026\005\032\004\001\002\000\024\007\uffb7\012\uffb7\014" +
    "\045\031\046\032\047\033\051\034\050\043\uffb7\044\uffb7" +
    "\001\002\000\024\007\uffb8\012\uffb8\014\045\031\046\032" +
    "\047\033\051\034\050\043\uffb8\044\uffb8\001\002\000\024" +
    "\007\uffb5\012\uffb5\014\045\031\046\032\047\033\051\034" +
    "\050\043\uffb5\044\uffb5\001\002\000\024\007\uffb4\012\uffb4" +
    "\014\045\031\046\032\047\033\051\034\050\043\uffb4\044" +
    "\uffb4\001\002\000\024\007\uffb3\012\uffb3\014\045\031\046" +
    "\032\047\033\051\034\050\043\uffb3\044\uffb3\001\002\000" +
    "\024\007\uffb6\012\uffb6\014\045\031\046\032\047\033\051" +
    "\034\050\043\uffb6\044\uffb6\001\002\000\012\007\uffbd\012" +
    "\uffbd\043\uffbd\044\uffbd\001\002\000\004\012\122\001\002" +
    "\000\024\004\042\006\022\007\uffed\022\021\023\036\024" +
    "\014\025\025\026\005\032\004\001\002\000\004\007\uffea" +
    "\001\002\000\004\007\125\001\002\000\044\004\uffe9\006" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\032\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\001\002\000\044\004\013\006\022" +
    "\015\010\016\027\017\011\020\026\022\021\023\036\024" +
    "\014\025\025\026\005\032\004\047\016\050\012\051\035" +
    "\052\023\053\031\001\002\000\054\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\032\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\001\002" +
    "\000\006\005\145\013\144\001\002\000\006\005\uffd4\013" +
    "\uffd4\001\002\000\006\005\uffd2\013\uffd2\001\002\000\006" +
    "\005\142\013\141\001\002\000\006\005\137\013\136\001" +
    "\002\000\006\005\uffd6\013\uffd6\001\002\000\004\024\140" +
    "\001\002\000\044\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\001" +
    "\002\000\006\005\uffd3\013\uffd3\001\002\000\004\023\143" +
    "\001\002\000\044\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\001" +
    "\002\000\006\005\uffd5\013\uffd5\001\002\000\004\025\146" +
    "\001\002\000\044\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\001" +
    "\002\000\006\005\uffd7\013\uffd7\001\002\000\004\022\151" +
    "\001\002\000\054\002\ufff9\004\ufff9\005\ufff9\006\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\032\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\055\ufff9\056\ufff9\001\002\000\010\012\uffdd" +
    "\013\uffdd\046\152\001\002\000\022\004\042\006\022\022" +
    "\021\023\036\024\014\025\025\026\005\032\004\001\002" +
    "\000\020\012\uffda\013\uffda\014\045\031\046\032\047\033" +
    "\051\034\050\001\002\000\022\004\042\006\022\022\021" +
    "\023\036\024\014\025\025\026\005\032\004\001\002\000" +
    "\016\007\156\014\045\031\046\032\047\033\051\034\050" +
    "\001\002\000\004\012\157\001\002\000\054\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\032\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8" +
    "\001\002\000\050\002\ufffe\004\ufffe\005\ufffe\006\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\032\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\001\002\000\044\004\013\006\022\015\010" +
    "\016\027\017\011\020\026\022\021\023\036\024\014\025" +
    "\025\026\005\032\004\047\016\050\012\051\035\052\023" +
    "\053\031\001\002\000\004\050\163\001\002\000\004\006" +
    "\164\001\002\000\030\004\042\006\066\022\021\023\036" +
    "\024\014\025\025\026\005\027\062\030\061\032\004\045" +
    "\064\001\002\000\010\007\166\043\072\044\073\001\002" +
    "\000\004\012\167\001\002\000\054\002\uffef\004\uffef\005" +
    "\uffef\006\uffef\015\uffef\016\uffef\017\uffef\020\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\032\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\055\uffef\056\uffef\001\002" +
    "\000\016\007\103\014\045\031\046\032\047\033\051\034" +
    "\050\001\002\000\022\004\042\006\022\022\021\023\036" +
    "\024\014\025\025\026\005\032\004\001\002\000\022\004" +
    "\042\006\022\022\021\023\036\024\014\025\025\026\005" +
    "\032\004\001\002\000\044\007\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\031\046\032\047\033\051\034\050\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\001\002\000\016\011\175\014\045\031\046\032\047" +
    "\033\051\034\050\001\002\000\046\007\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\046\176\001\002\000\022\004\042\006\022" +
    "\022\021\023\036\024\014\025\025\026\005\032\004\001" +
    "\002\000\044\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\031\046\032\047\033\051\034\050\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002" +
    "\000\004\002\001\001\002\000\030\004\042\006\066\022" +
    "\021\023\036\024\014\025\025\026\005\027\062\030\061" +
    "\032\004\045\064\001\002\000\010\007\203\043\072\044" +
    "\073\001\002\000\044\004\uffe7\006\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\032\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\044\004\013\006\022\015\010\016\027\017" +
    "\011\020\026\022\021\023\036\024\014\025\025\026\005" +
    "\032\004\047\016\050\012\051\035\052\023\053\031\001" +
    "\002\000\054\002\uffe6\004\uffe6\005\uffe6\006\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\032\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\055\uffe6\056\uffe6\001\002\000\054\002\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\032\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\210\056\207" +
    "\001\002\000\004\006\213\001\002\000\044\004\013\006" +
    "\022\015\010\016\027\017\011\020\026\022\021\023\036" +
    "\024\014\025\025\026\005\032\004\047\016\050\012\051" +
    "\035\052\023\053\031\001\002\000\054\002\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\032\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5\001" +
    "\002\000\054\002\uffe1\004\uffe1\005\uffe1\006\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\032\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\055\uffe1\056\uffe1\001\002\000\030\004\042\006" +
    "\066\022\021\023\036\024\014\025\025\026\005\027\062" +
    "\030\061\032\004\045\064\001\002\000\010\007\215\043" +
    "\072\044\073\001\002\000\044\004\uffe4\006\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\032\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\001\002\000\044\004\013\006\022\015\010\016" +
    "\027\017\011\020\026\022\021\023\036\024\014\025\025" +
    "\026\005\032\004\047\016\050\012\051\035\052\023\053" +
    "\031\001\002\000\054\002\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\032\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\053\uffe3\055\uffe3\056\uffe3\001\002\000\054\002" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\032" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\055\210" +
    "\056\207\001\002\000\054\002\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\032\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\001\002\000\044" +
    "\004\013\006\022\015\010\016\027\017\011\020\026\022" +
    "\021\023\036\024\014\025\025\026\005\032\004\047\016" +
    "\050\012\051\035\052\023\053\031\001\002\000\046\004" +
    "\013\005\224\006\022\015\010\016\027\017\011\020\026" +
    "\022\021\023\036\024\014\025\025\026\005\032\004\047" +
    "\016\050\012\051\035\052\023\053\031\001\002\000\054" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\032\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\055" +
    "\ufffb\056\ufffb\001\002\000\004\006\226\001\002\000\030" +
    "\004\042\006\066\022\021\023\036\024\014\025\025\026" +
    "\005\027\062\030\061\032\004\045\064\001\002\000\010" +
    "\007\230\043\072\044\073\001\002\000\044\004\ufff2\006" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\032\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\001\002\000\044\004\013\006\022" +
    "\015\010\016\027\017\011\020\026\022\021\023\036\024" +
    "\014\025\025\026\005\032\004\047\016\050\012\051\035" +
    "\052\023\053\031\001\002\000\054\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\032\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\001\002" +
    "\000\012\010\234\012\uffdf\013\uffdf\046\235\001\002\000" +
    "\022\004\042\006\022\022\021\023\036\024\014\025\025" +
    "\026\005\032\004\001\002\000\022\004\042\006\022\022" +
    "\021\023\036\024\014\025\025\026\005\032\004\001\002" +
    "\000\020\012\uffdc\013\uffdc\014\045\031\046\032\047\033" +
    "\051\034\050\001\002\000\016\011\240\014\045\031\046" +
    "\032\047\033\051\034\050\001\002\000\010\012\uffde\013" +
    "\uffde\046\241\001\002\000\022\004\042\006\022\022\021" +
    "\023\036\024\014\025\025\026\005\032\004\001\002\000" +
    "\020\012\uffdb\013\uffdb\014\045\031\046\032\047\033\051" +
    "\034\050\001\002\000\054\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\032\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\055\ufffa\056\ufffa\001\002\000\044" +
    "\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\032\002\016\003\027\004\037\005\033\006" +
    "\017\007\031\010\014\012\023\013\036\027\006\030\032" +
    "\032\005\001\001\000\004\032\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\224\001\001\000\012\022" +
    "\221\024\132\025\127\026\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\067\032\167" +
    "\001\001\000\004\035\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\157\005\033\006\017\007\031\010\014\012\023\013" +
    "\036\027\006\030\032\032\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\042\032\043\001\001\000\010\024" +
    "\132\025\127\026\133\001\001\000\004\036\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\054\001" +
    "\001\000\004\032\053\001\001\000\004\032\052\001\001" +
    "\000\004\032\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\062\032\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\120\001\001" +
    "\000\006\020\117\032\064\001\001\000\002\001\001\000" +
    "\010\020\070\027\067\032\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\076\001" +
    "\001\000\004\047\074\001\001\000\002\001\001\000\006" +
    "\020\075\032\064\001\001\000\002\001\001\000\006\020" +
    "\077\032\064\001\001\000\002\001\001\000\004\032\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\116\001\001\000\004\032\115\001\001\000\004\032\114" +
    "\001\001\000\004\032\113\001\001\000\004\032\112\001" +
    "\001\000\004\032\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\122\032\043\001\001\000\004\040\123\001" +
    "\001\000\002\001\001\000\004\041\125\001\001\000\026" +
    "\004\126\005\033\006\017\007\031\010\014\012\023\013" +
    "\036\027\006\030\032\032\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\152\001\001" +
    "\000\002\001\001\000\004\032\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\161\005\033\006\017\007\031\010\014\012" +
    "\023\013\036\027\006\030\032\032\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\164\032\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\173\001\001\000\004\032" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\201\032\064\001\001\000\002" +
    "\001\001\000\004\042\203\001\001\000\026\004\204\005" +
    "\033\006\017\007\031\010\014\012\023\013\036\027\006" +
    "\030\032\032\005\001\001\000\004\043\205\001\001\000" +
    "\004\017\210\001\001\000\002\001\001\000\026\004\211" +
    "\005\033\006\017\007\031\010\014\012\023\013\036\027" +
    "\006\030\032\032\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\213\032\064\001\001\000\002\001" +
    "\001\000\004\044\215\001\001\000\026\004\216\005\033" +
    "\006\017\007\031\010\014\012\023\013\036\027\006\030" +
    "\032\032\005\001\001\000\004\045\217\001\001\000\004" +
    "\017\220\001\001\000\002\001\001\000\030\003\222\004" +
    "\037\005\033\006\017\007\031\010\014\012\023\013\036" +
    "\027\006\030\032\032\005\001\001\000\026\004\157\005" +
    "\033\006\017\007\031\010\014\012\023\013\036\027\006" +
    "\030\032\032\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\226\032\064\001\001\000\002\001\001" +
    "\000\004\034\230\001\001\000\026\004\231\005\033\006" +
    "\017\007\031\010\014\012\023\013\036\027\006\030\032" +
    "\032\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\236\001\001\000\004\032\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                Symbol value = (Symbol)info;
                System.err.print(" (linea "+line+", colonna "+column+"): " + value.toString());
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public void checkVariable(Objeto obj) {
        if (obj == null)
                      Objeto.errorYPara("[ERROR]\tLa variable no ha sido declarada", new Vector<>(List.of(obj)));

                  if (!(obj instanceof Instancia))
                      Objeto.errorYPara("[ERROR]\tLa variable no es una instancia", new Vector<>(List.of(obj)));
    }

    public void checkVariable(String id) {
        checkVariable(PLXC.tablaSimbolos.getObj(id));
    }

    public void checkType(Objeto obj, Tipo tipo) {
        if (!(obj instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(obj, tipo)));
        Instancia aux = (Instancia) obj;
        if (!aux.getTipoInstancia().isParseable(tipo) )// || aux.getTipoInstancia().getClass() != tipo.getClass()
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>(List.of(obj, tipo)));
    }

    private String end_and = "", end_or = "";
    private Stack<String> if_tags = new Stack<>();
    private Objeto res_bool;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= lista_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent_comp ::= ALL Init_Bloque lista_sent CLL 
            {
              Object RESULT =null;
		int bloquePrevioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloquePrevioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloquePrevio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                          PLXC.tablaSimbolos.delBlock();
                          TablaSimbolos.bloqueActual = bloquePrevio;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent_simpl ::= expr PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent_simpl ::= declr PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent_simpl ::= PRINT AP expr CP PYC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if (valor != null) RESULT = valor.metodos("PRINT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent_simpl ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_simpl ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_simpl ::= sent_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent_simpl ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println(whileTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + whileTag + ";");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent_while ::= WHILE NT$0 AP cond CP NT$1 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    PLXC.out.println("goto " + whileTag + ";");
                       PLXC.out.println("end_" + whileTag + " :");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =null;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println("DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent_do_while ::= DO NT$2 sent WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        PLXC.out.println("if (" + c.getNombre() + " == 1) goto DO_" + doTag + " ;");
                        PLXC.out.println("END_DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for_expr ::= expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println(forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + forTag + ";");
                PLXC.out.println("goto body_" + forTag + ";");
                PLXC.out.println("act_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("goto " + forTag + ";");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                PLXC.out.println("body_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent_for ::= FOR AP for_expr NT$3 PYC cond NT$4 PYC for_expr NT$5 CP NT$6 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                PLXC.out.println("goto act_" + forTag + ";");
                PLXC.out.println("end_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =null;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    this.if_tags.push(ifTag);
    PLXC.out.println("if (" + c.getNombre() + " == 0) goto else_" + ifTag + " ;");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

            PLXC.out.println("goto end_" + ifTag + " ;");
            PLXC.out.println("else_" + ifTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent_if ::= IF AP cond CP NT$7 sent NT$8 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
            PLXC.out.println("end_" + ifTag + ":");
            this.if_tags.pop();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              String RESULT =null;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    PLXC.out.println(" if (" + c.getNombre() + " == 0) goto else_" + elseIfTag + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                PLXC.out.println("goto end_" + this.if_tags.peek() + ";");
                PLXC.out.println("else_" + elseIfTag + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // else_if ::= ELSEIF AP cond CP NT$9 sent NT$10 else_if 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // else_if ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // else_if ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declr ::= tipo ID 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
        PLXC.tablaSimbolos.putObj(newVar);

        RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declr ::= tipo ID AC expr CC 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
        PLXC.tablaSimbolos.putObj(newVar);

        RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declr ::= declr COMA ID 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Instancia newVar;
        if (tipo != TString.getInstance())
             newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
        else
             newVar = new StringInstancia(id);
        PLXC.tablaSimbolos.putObj(newVar);

        RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declr ::= tipo ID ASIGNA expr 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia newVar;
            if (tipo != TString.getInstance())
                 newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            else
                 newVar = new StringInstancia(id);
            PLXC.tablaSimbolos.putObj(newVar);
            newVar.metodos("ASIGNA",new Vector<>(List.of(exp)));

            RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declr ::= tipo ID AC expr CC ASIGNA expr 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

            newVar.metodos("ASIGNA",new Vector<>(List.of(exp)));

            RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declr ::= declr COMA ID ASIGNA expr 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia newVar;
            if (tipo != TString.getInstance())
                 newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            else
                 newVar = new StringInstancia(id);
            PLXC.tablaSimbolos.putObj(newVar);
            newVar.metodos("ASIGNA",new Vector<>(List.of(exp)));

            RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_id ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<String> start = new ArrayList<>();
            start.add(id);
            RESULT = start; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_id ::= list_id COMA ID 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  list.add(id); RESULT = list;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_char ::= list_char COMA CARACTER 
            {
              List<Integer> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer> list = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  list.add(c); RESULT = list;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_char",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_char ::= CARACTER 
            {
              List<Integer> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  List<Integer> start = new ArrayList<>();
                                                  start.add(c);
                                                  RESULT = start; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_char",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_int ::= list_int COMA NUM_ENTERO 
            {
              List<Integer> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer> list = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  list.add(num); RESULT = list;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_int",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list_int ::= NUM_ENTERO 
            {
              List<Integer> RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  List<Integer> start = new ArrayList<>();
                                                  start.add(num);
                                                  RESULT = start; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_int",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_float ::= list_float COMA NUM_REAL 
            {
              List<Float> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Float> list = (List<Float>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             list.add(num); RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_float ::= NUM_REAL 
            {
              List<Float> RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             List<Float> start = new ArrayList<>();
             start.add(num);
             RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_float",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= AP expr CP 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = exp;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr PUNTO LENGTH 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            if (!(a instanceof Instancia && ((Instancia) a).getTipoInstancia() instanceof TArray))
                Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(a)));


            RESULT = a.metodos(TArray.ARRAY_METHODS.LENGTH.name(), new Vector<>());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= ID AC expr CC ASIGNA expr 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            // Checkear que el valor es una instancia y no es de tipo array
            checkVariable(id);
            // Checkear que le valor es del mismo que la variable
            Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

            if (!(variable.getTipoInstancia() instanceof TArray))
                Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

            RESULT = variable.metodos("SET", new Vector<>(List.of(idx, valor)));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= ID ASIGNA expr 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  this.checkVariable(id); // Comprueba que la variable este declarada y que sea una instancia
                  Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

                  if (!(variable.getTipoInstancia() instanceof TArray)) {
                        this.checkType(valor, variable.getTipoInstancia()); // Comprueba que el tipo de la variable sea el mismo que el de la expresion o sean parseables entre sii
                  }

                  RESULT = variable.metodos("ASIGNA", new Vector<>(List.of(valor)));
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr MAS expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr MENOS expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr POR expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr DIV expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= MENOS expr 
            {
              Objeto RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exp.metodos("UMENOS", new Vector());       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= AP tipo CP expr 
            {
              Objeto RESULT =null;
		int tipoDstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipoDstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipoDst = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        if (exp instanceof Instancia) {
            Instancia aux = ((Instancia)exp).getTipoInstancia().cast(tipoDst, (Instancia) exp);
            if (aux != null) {
                RESULT = aux;
            } else {
                Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>());
            }
        } else {
            Objeto.errorYPara("[ERROR]\tNo se puede hacer un casting si el valor a asignar no es una instancia", new Vector<>());
        }

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= ID 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  checkVariable(id); RESULT = PLXC.tablaSimbolos.getObj(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= ID AC expr CC 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            checkVariable(id);
            Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

            if (!(variable.getTipoInstancia() instanceof TArray))
                Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

            RESULT = variable.metodos("GET", new Vector<>(List.of(idx)));

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= ALL list_float CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Float> l = (List<Float>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Instancia res = new Instancia(new TArray(TFloat.getTFloat(), String.valueOf(l.size())));
            for (int i = 0; i < l.size(); i++) {
                PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i) + ";");
            }

            RESULT = res;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= ALL list_int CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> l = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Instancia res = new Instancia(new TArray(TInt.getTInt(), String.valueOf(l.size())));
            for (int i = 0; i < l.size(); i++) {
                PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i) + ";");
            }

            RESULT = res;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= ALL list_char CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> l = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Instancia res = new Instancia(new TArray(TChar.getTChar(), String.valueOf(l.size())));
            for (int i = 0; i < l.size(); i++) {
                PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i) + ";");
            }

            RESULT = res;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= NUM_ENTERO 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Instancia(num.toString(), TInt.getTInt(), TablaSimbolos.bloqueActual, false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= NUM_REAL 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Instancia(num.toString(), TFloat.getTFloat(), TablaSimbolos.bloqueActual, false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= CARACTER 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Instancia(c.toString(), TChar.getTChar(), TablaSimbolos.bloqueActual, false);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= CADENA 
            {
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            char[] chars = s.toCharArray();
            StringInstancia res = new StringInstancia(true);

            res = TString.asignaConstante(res, chars);

            RESULT = res;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond ::= AP cond CP 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond ::= NOT cond 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("NOT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$11 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_and = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 0) goto " + end_and + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond ::= cond AND NT$11 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_and + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$12 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_or = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 1) goto " + end_or + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cond ::= cond OR NT$12 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_or + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cond ::= expr GT expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cond ::= expr LT expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cond ::= expr GE expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cond ::= expr LE expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond ::= expr EQ expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("IGUAL", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond ::= expr NEQ expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("DISTINTO", new Vector(List.of(b)));       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cond ::= FALSE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("0", TBool.getTBool(), TablaSimbolos.bloqueActual, false);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond ::= TRUE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("1", TBool.getTBool(), TablaSimbolos.bloqueActual, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TFloat.getTFloat();        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TChar.getTChar();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TString.getInstance();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo ::= 
            {
              Tipo RESULT =null;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Init_Bloque ::= 
            {
              Integer RESULT =null;
		  RESULT = TablaSimbolos.newBloque();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Init_Bloque",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // and_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_end",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // or_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_end",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Get_BoolInstance ::= 
            {
              Objeto RESULT =null;
		 RESULT = new Instancia(TBool.getTBool());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Get_BoolInstance",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
