
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java.util.Set;
import java.util.HashSet;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\030\004\000" +
    "\002\026\005\000\002\026\003\000\002\027\003\000\002" +
    "\027\002\000\002\023\010\000\002\057\002\000\002\025" +
    "\013\000\002\060\002\000\002\061\002\000\002\024\017" +
    "\000\002\005\006\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\007\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\022\004\000\002\022\002" +
    "\000\002\062\002\000\002\063\002\000\002\010\011\000" +
    "\002\064\002\000\002\012\012\000\002\014\003\000\002" +
    "\014\002\000\002\065\002\000\002\066\002\000\002\067" +
    "\002\000\002\070\002\000\002\013\017\000\002\071\002" +
    "\000\002\072\002\000\002\007\012\000\002\073\002\000" +
    "\002\074\002\000\002\034\012\000\002\034\004\000\002" +
    "\034\002\000\002\075\002\000\002\076\002\000\002\016" +
    "\014\000\002\017\004\000\002\017\003\000\002\077\002" +
    "\000\002\021\011\000\002\100\002\000\002\020\010\000" +
    "\002\101\002\000\002\102\002\000\002\015\014\000\002" +
    "\047\005\000\002\047\010\000\002\047\006\000\002\047" +
    "\011\000\002\056\004\000\002\056\002\000\002\045\005" +
    "\000\002\045\004\000\002\045\003\000\002\050\007\000" +
    "\002\050\005\000\002\040\003\000\002\040\005\000\002" +
    "\044\005\000\002\044\003\000\002\052\003\000\002\052" +
    "\003\000\002\031\003\000\002\055\005\000\002\055\006" +
    "\000\002\055\010\000\002\055\005\000\002\055\006\000" +
    "\002\055\003\000\002\055\006\000\002\055\005\000\002" +
    "\055\005\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\004\000\002\053\005\000\002" +
    "\035\005\000\002\035\004\000\002\103\002\000\002\035" +
    "\006\000\002\104\002\000\002\035\006\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\003\000\002" +
    "\035\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\006" +
    "\000\002\046\002\000\002\037\002\000\002\032\002\000" +
    "\002\033\002\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\052\004\044\006\047\016\052\017\013\020" +
    "\040\021\010\022\043\024\031\025\023\026\041\027\035" +
    "\030\015\031\025\035\026\055\022\056\037\057\014\060" +
    "\050\061\051\066\032\001\002\000\004\002\362\001\002" +
    "\000\066\002\uffe6\004\uffe6\005\uffe6\006\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\035\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\063\uffe6\064\uffe6\066\uffe6\070\uffe6" +
    "\071\uffe6\001\002\000\066\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\035\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\063\ufffb\064\ufffb" +
    "\066\ufffb\070\ufffb\071\ufffb\001\002\000\066\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\035\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd" +
    "\063\ufffd\064\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002\000" +
    "\010\004\uff8a\007\uff8a\025\uff8a\001\002\000\066\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\035\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\063\ufffc\064\ufffc\066\ufffc\070\ufffc\071\ufffc\001\002" +
    "\000\006\012\353\013\352\001\002\000\010\004\uff8c\007" +
    "\uff8c\025\uff8c\001\002\000\004\006\325\001\002\000\046" +
    "\005\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\001\002\000" +
    "\056\002\uffff\004\uffff\005\uffff\006\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\030\uffff\031\uffff\035\uffff\055\uffff\056\uffff\057\uffff" +
    "\060\uffff\061\uffff\066\uffff\001\002\000\066\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\035\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\063\uffe5\064\uffe5\066\uffe5\070\uffe5\071\uffe5\001\002\000" +
    "\066\002\uffe7\004\uffe7\005\uffe7\006\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\035\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\063\uffe7\064\uffe7\066\uffe7\070\uffe7\071" +
    "\uffe7\001\002\000\004\012\324\001\002\000\004\006\303" +
    "\001\002\000\062\005\uffaa\006\uffb0\007\uffaa\010\270\011" +
    "\uffaa\012\uffaa\013\uffaa\014\266\015\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\051\272\052\271\053\267" +
    "\001\002\000\066\002\uffe8\004\uffe8\005\uffe8\006\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\035\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\063\uffe8\064\uffe8\066\uffe8" +
    "\070\uffe8\071\uffe8\001\002\000\046\005\uffa3\007\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\015\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\001\002\000\020\006\047\025\023" +
    "\026\041\027\035\030\015\031\025\035\026\001\002\000" +
    "\066\002\uffe9\004\uffe9\005\uffe9\006\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\035\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\063\uffe9\064\uffe9\066\uffe9\070\uffe9\071" +
    "\uffe9\001\002\000\014\012\264\034\070\035\071\036\073" +
    "\037\072\001\002\000\010\004\uff88\007\uff88\025\uff88\001" +
    "\002\000\004\006\234\001\002\000\066\002\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\035\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\063" +
    "\ufffa\064\ufffa\066\ufffa\070\ufffa\071\ufffa\001\002\000\046" +
    "\005\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\001\002\000" +
    "\046\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\001\002" +
    "\000\006\004\055\025\177\001\002\000\004\006\uffe1\001" +
    "\002\000\010\004\uff8b\007\uff8b\025\uff8b\001\002\000\046" +
    "\005\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\001\002\000" +
    "\004\006\166\001\002\000\010\004\uff89\007\uff89\025\uff89" +
    "\001\002\000\052\004\uff85\006\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\024\uff85\025\uff85\026\uff85\027\uff85" +
    "\030\uff85\031\uff85\035\uff85\055\uff85\056\uff85\057\uff85\060" +
    "\uff85\061\uff85\066\uff85\001\002\000\054\002\000\004\044" +
    "\006\047\016\052\017\013\020\040\021\010\022\043\024" +
    "\031\025\023\026\041\027\035\030\015\031\025\035\026" +
    "\055\022\056\037\057\014\060\050\061\051\066\032\001" +
    "\002\000\066\002\uffe4\004\uffe4\005\uffe4\006\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\035\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\063\uffe4\064\uffe4\066\uffe4\070" +
    "\uffe4\071\uffe4\001\002\000\036\004\uff86\006\047\007\uff86" +
    "\017\013\020\040\021\010\022\043\024\031\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\052" +
    "\004\uffde\006\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\035\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\066" +
    "\uffde\001\002\000\004\006\107\001\002\000\020\004\uff86" +
    "\017\013\020\040\021\010\022\043\024\031\025\uff86\001" +
    "\002\000\006\004\055\025\054\001\002\000\006\012\uffb7" +
    "\051\100\001\002\000\022\004\057\006\047\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\046" +
    "\005\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\034" +
    "\070\035\071\036\073\037\072\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\001\002\000" +
    "\020\006\047\025\023\026\041\027\035\030\015\031\025" +
    "\035\026\001\002\000\004\005\062\001\002\000\046\005" +
    "\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\001\002\000\010" +
    "\004\uff87\007\uff87\025\uff87\001\002\000\020\005\uffb3\007" +
    "\uffb3\013\uffb3\034\070\035\071\036\073\037\072\001\002" +
    "\000\006\005\066\013\065\001\002\000\020\006\047\025" +
    "\023\026\041\027\035\030\015\031\025\035\026\001\002" +
    "\000\046\005\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\015" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\001" +
    "\002\000\020\005\uffb4\007\uffb4\013\uffb4\034\070\035\071" +
    "\036\073\037\072\001\002\000\020\006\047\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\020" +
    "\006\047\025\023\026\041\027\035\030\015\031\025\035" +
    "\026\001\002\000\020\006\047\025\023\026\041\027\035" +
    "\030\015\031\025\035\026\001\002\000\020\006\047\025" +
    "\023\026\041\027\035\030\015\031\025\035\026\001\002" +
    "\000\046\005\uff9e\007\uff9e\011\uff9e\012\uff9e\013\uff9e\015" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\001" +
    "\002\000\046\005\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\015\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\001\002\000\046\005\uff9f\007\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\015\uff9f\034\uff9f\035\uff9f\036\073\037\072\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\001\002\000\046\005\uffa0\007\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\015\uffa0\034\uffa0\035\uffa0\036\073\037\072\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\001\002\000\006\004\102\025\101\001\002\000" +
    "\004\012\uffb9\001\002\000\022\005\105\006\047\025\023" +
    "\026\041\027\035\030\015\031\025\035\026\001\002\000" +
    "\004\012\uffb8\001\002\000\006\005\106\013\065\001\002" +
    "\000\004\012\uffba\001\002\000\004\012\uffbb\001\002\000" +
    "\022\004\057\006\047\025\023\026\041\027\035\030\015" +
    "\031\025\035\026\001\002\000\004\007\111\001\002\000" +
    "\004\012\112\001\002\000\066\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\035\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\063\uffea\064" +
    "\uffea\066\uffea\070\uffea\071\uffea\001\002\000\052\004\044" +
    "\006\047\016\052\017\013\020\040\021\010\022\043\024" +
    "\031\025\023\026\041\027\035\030\015\031\025\035\026" +
    "\055\022\056\037\057\014\060\050\061\051\066\032\001" +
    "\002\000\004\056\115\001\002\000\004\006\116\001\002" +
    "\000\026\006\124\025\023\026\041\027\035\030\015\031" +
    "\025\032\121\033\117\035\026\050\123\001\002\000\012" +
    "\007\uff8d\012\uff8d\046\uff8d\047\uff8d\001\002\000\026\034" +
    "\070\035\071\036\073\037\072\040\142\041\141\042\145" +
    "\043\144\044\143\045\140\001\002\000\012\007\uff8e\012" +
    "\uff8e\046\uff8e\047\uff8e\001\002\000\010\007\157\046\130" +
    "\047\131\001\002\000\026\006\124\025\023\026\041\027" +
    "\035\030\015\031\025\032\121\033\117\035\026\050\123" +
    "\001\002\000\044\004\uff86\006\124\007\uff86\017\013\020" +
    "\040\021\010\022\043\024\031\025\023\026\041\027\035" +
    "\030\015\031\025\032\121\033\117\035\026\050\123\001" +
    "\002\000\006\004\055\007\154\001\002\000\030\007\137" +
    "\034\070\035\071\036\073\037\072\040\142\041\141\042" +
    "\145\043\144\044\143\045\140\001\002\000\010\007\132" +
    "\046\130\047\131\001\002\000\026\006\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\035\uff98" +
    "\050\uff98\001\002\000\026\006\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\035\uff96\050\uff96" +
    "\001\002\000\012\007\uff9a\012\uff9a\046\uff9a\047\uff9a\001" +
    "\002\000\026\006\124\025\023\026\041\027\035\030\015" +
    "\031\025\032\121\033\117\035\026\050\123\001\002\000" +
    "\012\007\uff95\012\uff95\046\uff95\047\uff95\001\002\000\026" +
    "\006\124\025\023\026\041\027\035\030\015\031\025\032" +
    "\121\033\117\035\026\050\123\001\002\000\012\007\uff97" +
    "\012\uff97\046\uff97\047\uff97\001\002\000\046\005\uffa1\007" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\001\002\000\020\006\047" +
    "\025\023\026\041\027\035\030\015\031\025\035\026\001" +
    "\002\000\020\006\047\025\023\026\041\027\035\030\015" +
    "\031\025\035\026\001\002\000\020\006\047\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\020" +
    "\006\047\025\023\026\041\027\035\030\015\031\025\035" +
    "\026\001\002\000\020\006\047\025\023\026\041\027\035" +
    "\030\015\031\025\035\026\001\002\000\020\006\047\025" +
    "\023\026\041\027\035\030\015\031\025\035\026\001\002" +
    "\000\022\007\uff93\012\uff93\034\070\035\071\036\073\037" +
    "\072\046\uff93\047\uff93\001\002\000\022\007\uff94\012\uff94" +
    "\034\070\035\071\036\073\037\072\046\uff94\047\uff94\001" +
    "\002\000\022\007\uff91\012\uff91\034\070\035\071\036\073" +
    "\037\072\046\uff91\047\uff91\001\002\000\022\007\uff90\012" +
    "\uff90\034\070\035\071\036\073\037\072\046\uff90\047\uff90" +
    "\001\002\000\022\007\uff8f\012\uff8f\034\070\035\071\036" +
    "\073\037\072\046\uff8f\047\uff8f\001\002\000\022\007\uff92" +
    "\012\uff92\034\070\035\071\036\073\037\072\046\uff92\047" +
    "\uff92\001\002\000\020\006\047\025\023\026\041\027\035" +
    "\030\015\031\025\035\026\001\002\000\046\005\uffab\007" +
    "\uffab\011\uffab\012\uffab\013\uffab\015\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\001\002\000\012\007\uff99" +
    "\012\uff99\046\uff99\047\uff99\001\002\000\004\012\160\001" +
    "\002\000\066\002\uffdd\004\uffdd\005\uffdd\006\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\035\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\066\uffdd\070" +
    "\uffdd\071\uffdd\001\002\000\014\007\137\034\070\035\071" +
    "\036\073\037\072\001\002\000\056\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\035" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\066\ufffe" +
    "\001\002\000\052\004\044\006\047\016\052\017\013\020" +
    "\040\021\010\022\043\024\031\025\023\026\041\027\035" +
    "\030\015\031\025\035\026\055\022\056\037\057\014\060" +
    "\050\061\051\066\032\001\002\000\054\004\044\005\165" +
    "\006\047\016\052\017\013\020\040\021\010\022\043\024" +
    "\031\025\023\026\041\027\035\030\015\031\025\035\026" +
    "\055\022\056\037\057\014\060\050\061\051\066\032\001" +
    "\002\000\066\002\uffee\004\uffee\005\uffee\006\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\035\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\063\uffee\064\uffee\066\uffee\070" +
    "\uffee\071\uffee\001\002\000\020\006\047\025\023\026\041" +
    "\027\035\030\015\031\025\035\026\001\002\000\006\007" +
    "\170\013\065\001\002\000\046\005\uffae\007\uffae\011\uffae" +
    "\012\uffae\013\uffae\015\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\001\002\000\004\006\172\001\002\000" +
    "\026\006\124\025\023\026\041\027\035\030\015\031\025" +
    "\032\121\033\117\035\026\050\123\001\002\000\010\007" +
    "\174\046\130\047\131\001\002\000\052\004\uffe0\006\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\035\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\066\uffe0\001\002\000" +
    "\052\004\044\006\047\016\052\017\013\020\040\021\010" +
    "\022\043\024\031\025\023\026\041\027\035\030\015\031" +
    "\025\035\026\055\022\056\037\057\014\060\050\061\051" +
    "\066\032\001\002\000\066\002\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\035\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\063\uffdf\064\uffdf" +
    "\066\uffdf\070\uffdf\071\uffdf\001\002\000\014\006\201\010" +
    "\202\012\uffbc\013\uffbc\051\203\001\002\000\006\012\uffc1" +
    "\013\uffc1\001\002\000\022\004\uff86\007\ufff5\017\013\020" +
    "\040\021\010\022\043\024\031\025\uff86\001\002\000\022" +
    "\004\057\006\047\025\023\026\041\027\035\030\015\031" +
    "\025\035\026\001\002\000\022\004\057\006\047\025\023" +
    "\026\041\027\035\030\015\031\025\035\026\001\002\000" +
    "\006\012\uffbd\013\uffbd\001\002\000\004\011\206\001\002" +
    "\000\010\012\uffbc\013\uffbc\051\203\001\002\000\006\012" +
    "\uffc0\013\uffc0\001\002\000\006\007\ufff7\013\232\001\002" +
    "\000\004\007\215\001\002\000\004\007\ufff6\001\002\000" +
    "\006\004\055\025\214\001\002\000\006\007\ufff9\013\ufff9" +
    "\001\002\000\006\004\216\012\217\001\002\000\054\004" +
    "\ufff1\006\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\035" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\066\ufff1" +
    "\071\ufff1\001\002\000\066\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\035\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\063\ufff4\064\ufff4" +
    "\066\ufff4\070\ufff4\071\ufff4\001\002\000\054\004\uffe2\006" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\035\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\066\uffe2\071\uffe2" +
    "\001\002\000\054\004\uff86\006\047\016\052\017\013\020" +
    "\040\021\010\022\043\024\031\025\023\026\041\027\035" +
    "\030\015\031\025\035\026\055\022\056\037\057\014\060" +
    "\050\061\051\066\032\071\223\001\002\000\006\004\055" +
    "\025\231\001\002\000\022\004\057\006\047\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\054" +
    "\004\uffe3\006\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\035\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\066" +
    "\uffe3\071\uffe3\001\002\000\004\012\226\001\002\000\004" +
    "\005\ufff0\001\002\000\004\005\230\001\002\000\066\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\035\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\063\uffef\064\uffef\066\uffef\070\uffef\071\uffef\001" +
    "\002\000\012\010\202\012\uffbc\013\uffbc\051\203\001\002" +
    "\000\020\004\uff86\017\013\020\040\021\010\022\043\024" +
    "\031\025\uff86\001\002\000\004\007\ufff8\001\002\000\020" +
    "\006\047\025\023\026\041\027\035\030\015\031\025\035" +
    "\026\001\002\000\014\007\236\034\070\035\071\036\073" +
    "\037\072\001\002\000\004\004\237\001\002\000\004\065" +
    "\uffcd\001\002\000\004\065\242\001\002\000\006\065\242" +
    "\067\252\001\002\000\020\006\047\025\023\026\041\027" +
    "\035\030\015\031\025\035\026\001\002\000\006\065\uffc9" +
    "\067\uffc9\001\002\000\014\015\uffc8\034\070\035\071\036" +
    "\073\037\072\001\002\000\004\015\246\001\002\000\052" +
    "\004\044\006\047\016\052\017\013\020\040\021\010\022" +
    "\043\024\031\025\023\026\041\027\035\030\015\031\025" +
    "\035\026\055\022\056\037\057\014\060\050\061\051\066" +
    "\032\001\002\000\004\070\250\001\002\000\004\012\251" +
    "\001\002\000\006\065\uffc7\067\uffc7\001\002\000\004\015" +
    "\257\001\002\000\004\005\uffcc\001\002\000\006\065\uffca" +
    "\067\uffca\001\002\000\004\005\256\001\002\000\066\002" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\035\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\063\uffcb\064\uffcb\066\uffcb\070\uffcb\071\uffcb\001" +
    "\002\000\052\004\uffc6\006\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\035\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\066\uffc6\001\002\000\052\004\044\006\047\016" +
    "\052\017\013\020\040\021\010\022\043\024\031\025\023" +
    "\026\041\027\035\030\015\031\025\035\026\055\022\056" +
    "\037\057\014\060\050\061\051\066\032\001\002\000\004" +
    "\070\262\001\002\000\004\012\263\001\002\000\004\005" +
    "\uffc5\001\002\000\066\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\035\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064\uffed\066" +
    "\uffed\070\uffed\071\uffed\001\002\000\046\005\uff9c\007\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\015\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\001\002\000\004\062\302\001" +
    "\002\000\020\006\047\025\023\026\041\027\035\030\015" +
    "\031\025\035\026\001\002\000\020\006\047\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\004" +
    "\025\274\001\002\000\022\004\057\006\047\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\046" +
    "\005\uffac\007\uffac\011\uffac\012\uffac\013\uffac\015\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\001\002\000" +
    "\046\005\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\001\002" +
    "\000\014\011\276\034\070\035\071\036\073\037\072\001" +
    "\002\000\050\005\uffa9\007\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\015\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\051\277\001\002\000\020\006\047\025\023\026\041\027" +
    "\035\030\015\031\025\035\026\001\002\000\046\005\uffad" +
    "\007\uffad\011\uffad\012\uffad\013\uffad\015\uffad\034\070\035" +
    "\071\036\073\037\072\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\001\002\000\046\005" +
    "\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\034\070" +
    "\035\071\036\073\037\072\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\001\002\000\046" +
    "\005\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\001\002\000" +
    "\026\006\124\025\023\026\041\027\035\030\015\031\025" +
    "\032\121\033\117\035\026\050\123\001\002\000\010\007" +
    "\305\046\130\047\131\001\002\000\052\004\uffd5\006\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\035\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\066\uffd5\001\002\000" +
    "\052\004\044\006\047\016\052\017\013\020\040\021\010" +
    "\022\043\024\031\025\023\026\041\027\035\030\015\031" +
    "\025\035\026\055\022\056\037\057\014\060\050\061\051" +
    "\066\032\001\002\000\066\002\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\035\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\063\uffd4\064\uffd4" +
    "\066\uffd4\070\uffd4\071\uffd4\001\002\000\066\002\uffce\004" +
    "\uffce\005\uffce\006\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\035\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\063\311\064\312\066\uffce\070\uffce\071\uffce\001\002\000" +
    "\052\004\044\006\047\016\052\017\013\020\040\021\010" +
    "\022\043\024\031\025\023\026\041\027\035\030\015\031" +
    "\025\035\026\055\022\056\037\057\014\060\050\061\051" +
    "\066\032\001\002\000\004\006\314\001\002\000\066\002" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\035\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\063\uffd3\064\uffd3\066\uffd3\070\uffd3\071\uffd3\001" +
    "\002\000\026\006\124\025\023\026\041\027\035\030\015" +
    "\031\025\032\121\033\117\035\026\050\123\001\002\000" +
    "\010\007\316\046\130\047\131\001\002\000\052\004\uffd2" +
    "\006\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\035\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\066\uffd2\001" +
    "\002\000\052\004\044\006\047\016\052\017\013\020\040" +
    "\021\010\022\043\024\031\025\023\026\041\027\035\030" +
    "\015\031\025\035\026\055\022\056\037\057\014\060\050" +
    "\061\051\066\032\001\002\000\066\002\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\035" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\063\uffd1" +
    "\064\uffd1\066\uffd1\070\uffd1\071\uffd1\001\002\000\066\002" +
    "\uffce\004\uffce\005\uffce\006\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\035\uffce\055\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\063\311\064\312\066\uffce\070\uffce\071\uffce\001" +
    "\002\000\066\002\uffd0\004\uffd0\005\uffd0\006\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\035\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\066\uffd0\070" +
    "\uffd0\071\uffd0\001\002\000\066\002\uffcf\004\uffcf\005\uffcf" +
    "\006\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\035\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\063\uffcf\064" +
    "\uffcf\066\uffcf\070\uffcf\071\uffcf\001\002\000\066\002\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\035\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\063\uffeb\064\uffeb\066\uffeb\070\uffeb\071\uffeb\001\002" +
    "\000\036\004\uff86\006\047\012\uffdb\017\013\020\040\021" +
    "\010\022\043\024\031\025\023\026\041\027\035\030\015" +
    "\031\025\035\026\001\002\000\016\007\uffdc\012\uffdc\034" +
    "\070\035\071\036\073\037\072\001\002\000\004\012\uffda" +
    "\001\002\000\006\004\055\025\331\001\002\000\004\015" +
    "\uffc4\001\002\000\004\015\333\001\002\000\022\004\057" +
    "\006\047\025\023\026\041\027\035\030\015\031\025\035" +
    "\026\001\002\000\004\007\335\001\002\000\052\004\uffc3" +
    "\006\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\035\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\066\uffc3\001" +
    "\002\000\052\004\044\006\047\016\052\017\013\020\040" +
    "\021\010\022\043\024\031\025\023\026\041\027\035\030" +
    "\015\031\025\035\026\055\022\056\037\057\014\060\050" +
    "\061\051\066\032\001\002\000\066\002\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\035" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2" +
    "\064\uffc2\066\uffc2\070\uffc2\071\uffc2\001\002\000\004\012" +
    "\341\001\002\000\026\006\124\025\023\026\041\027\035" +
    "\030\015\031\025\032\121\033\117\035\026\050\123\001" +
    "\002\000\010\012\uffd9\046\130\047\131\001\002\000\004" +
    "\012\344\001\002\000\022\006\047\007\uffdb\025\023\026" +
    "\041\027\035\030\015\031\025\035\026\001\002\000\004" +
    "\007\uffd8\001\002\000\004\007\347\001\002\000\052\004" +
    "\uffd7\006\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\035" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\066\uffd7" +
    "\001\002\000\052\004\044\006\047\016\052\017\013\020" +
    "\040\021\010\022\043\024\031\025\023\026\041\027\035" +
    "\030\015\031\025\035\026\055\022\056\037\057\014\060" +
    "\050\061\051\066\032\001\002\000\066\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\035\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\063" +
    "\uffd6\064\uffd6\066\uffd6\070\uffd6\071\uffd6\001\002\000\004" +
    "\025\354\001\002\000\066\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\035\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\063\uffec\064\uffec" +
    "\066\uffec\070\uffec\071\uffec\001\002\000\012\010\356\012" +
    "\uffbc\013\uffbc\051\203\001\002\000\006\012\uffbf\013\uffbf" +
    "\001\002\000\022\004\057\006\047\025\023\026\041\027" +
    "\035\030\015\031\025\035\026\001\002\000\004\011\360" +
    "\001\002\000\010\012\uffbc\013\uffbc\051\203\001\002\000" +
    "\006\012\uffbe\013\uffbe\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\050\002\003\003\044\004\015\005\006\006" +
    "\010\007\026\010\023\012\017\013\004\015\045\016\016" +
    "\023\005\024\032\031\041\046\035\047\011\050\020\054" +
    "\033\055\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\041\054\033\055\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\162\001\001\000\044\004\161\005\006\006\010\007" +
    "\026\010\023\012\017\013\004\015\045\016\016\023\005" +
    "\024\032\031\041\046\035\047\011\050\020\054\033\055" +
    "\027\001\001\000\002\001\001\000\012\031\041\046\124" +
    "\054\033\055\160\001\001\000\004\064\112\001\001\000" +
    "\002\001\001\000\004\046\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\031\041\052\057\053\060\054" +
    "\033\055\055\001\001\000\002\001\001\000\012\031\041" +
    "\044\063\054\033\055\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\041\054\033\055\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\041\054\033" +
    "\055\076\001\001\000\010\031\041\054\033\055\075\001" +
    "\001\000\010\031\041\054\033\055\074\001\001\000\010" +
    "\031\041\054\033\055\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\102\001\001\000\002\001\001\000\012\031\041\044" +
    "\103\054\033\055\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\041\052\107\053\060\054\033\055\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\113\005\006\006\010\007\026\010\023\012\017\013\004" +
    "\015\045\016\016\023\005\024\032\031\041\046\035\047" +
    "\011\050\020\054\033\055\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\041\035\121\054\033\055" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\031\041\035\155\054" +
    "\033\055\117\001\001\000\014\031\041\035\126\046\124" +
    "\054\033\055\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\103\134\001\001\000\004" +
    "\104\132\001\001\000\002\001\001\000\012\031\041\035" +
    "\133\054\033\055\117\001\001\000\002\001\001\000\012" +
    "\031\041\035\135\054\033\055\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\041\054\033\055\152" +
    "\001\001\000\010\031\041\054\033\055\151\001\001\000" +
    "\010\031\041\054\033\055\150\001\001\000\010\031\041" +
    "\054\033\055\147\001\001\000\010\031\041\054\033\055" +
    "\146\001\001\000\010\031\041\054\033\055\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\041\054\033\055\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\163\004\015\005" +
    "\006\006\010\007\026\010\023\012\017\013\004\015\045" +
    "\016\016\023\005\024\032\031\041\046\035\047\011\050" +
    "\020\054\033\055\027\001\001\000\044\004\161\005\006" +
    "\006\010\007\026\010\023\012\017\013\004\015\045\016" +
    "\016\023\005\024\032\031\041\046\035\047\011\050\020" +
    "\054\033\055\027\001\001\000\002\001\001\000\012\031" +
    "\041\044\166\054\033\055\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\041\035" +
    "\172\054\033\055\117\001\001\000\002\001\001\000\004" +
    "\063\174\001\001\000\044\004\175\005\006\006\010\007" +
    "\026\010\023\012\017\013\004\015\045\016\016\023\005" +
    "\024\032\031\041\046\035\047\011\050\020\054\033\055" +
    "\027\001\001\000\002\001\001\000\004\056\177\001\001" +
    "\000\002\001\001\000\012\026\211\027\210\030\207\046" +
    "\212\001\001\000\014\031\041\052\204\053\060\054\033" +
    "\055\055\001\001\000\014\031\041\052\203\053\060\054" +
    "\033\055\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\217\001" +
    "\001\000\002\001\001\000\004\022\220\001\001\000\034" +
    "\006\223\007\026\010\023\012\017\013\004\015\045\016" +
    "\016\031\041\046\221\047\011\050\020\054\033\055\027" +
    "\001\001\000\002\001\001\000\014\031\041\052\224\053" +
    "\060\054\033\055\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\177\001\001\000\010\026\232" +
    "\030\207\046\212\001\001\000\002\001\001\000\010\031" +
    "\041\054\033\055\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\237\001\001\000\006\017\240\021" +
    "\242\001\001\000\006\020\252\021\253\001\001\000\010" +
    "\031\041\054\033\055\243\001\001\000\002\001\001\000" +
    "\004\077\244\001\001\000\002\001\001\000\044\004\246" +
    "\005\006\006\010\007\026\010\023\012\017\013\004\015" +
    "\045\016\016\023\005\024\032\031\041\046\035\047\011" +
    "\050\020\054\033\055\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\257\001\001\000\044\004\260" +
    "\005\006\006\010\007\026\010\023\012\017\013\004\015" +
    "\045\016\016\023\005\024\032\031\041\046\035\047\011" +
    "\050\020\054\033\055\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\041\054\033\055" +
    "\300\001\001\000\010\031\041\054\033\055\274\001\001" +
    "\000\002\001\001\000\014\031\041\052\272\053\060\054" +
    "\033\055\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\041\054" +
    "\033\055\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\041\035\303\054\033\055" +
    "\117\001\001\000\002\001\001\000\004\071\305\001\001" +
    "\000\044\004\306\005\006\006\010\007\026\010\023\012" +
    "\017\013\004\015\045\016\016\023\005\024\032\031\041" +
    "\046\035\047\011\050\020\054\033\055\027\001\001\000" +
    "\004\072\307\001\001\000\004\034\312\001\001\000\044" +
    "\004\322\005\006\006\010\007\026\010\023\012\017\013" +
    "\004\015\045\016\016\023\005\024\032\031\041\046\035" +
    "\047\011\050\020\054\033\055\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\041\035\314\054\033" +
    "\055\117\001\001\000\002\001\001\000\004\073\316\001" +
    "\001\000\044\004\317\005\006\006\010\007\026\010\023" +
    "\012\017\013\004\015\045\016\016\023\005\024\032\031" +
    "\041\046\035\047\011\050\020\054\033\055\027\001\001" +
    "\000\004\074\320\001\001\000\004\034\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\326\031\041\046\327\054\033\055\325\001\001\000" +
    "\002\001\001\000\004\065\337\001\001\000\002\001\001" +
    "\000\004\101\331\001\001\000\002\001\001\000\014\031" +
    "\041\052\333\053\060\054\033\055\055\001\001\000\002" +
    "\001\001\000\004\102\335\001\001\000\044\004\336\005" +
    "\006\006\010\007\026\010\023\012\017\013\004\015\045" +
    "\016\016\023\005\024\032\031\041\046\035\047\011\050" +
    "\020\054\033\055\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\041\035\341\054\033\055\117\001" +
    "\001\000\004\066\342\001\001\000\002\001\001\000\012" +
    "\014\344\031\041\054\033\055\325\001\001\000\004\067" +
    "\345\001\001\000\002\001\001\000\004\070\347\001\001" +
    "\000\044\004\350\005\006\006\010\007\026\010\023\012" +
    "\017\013\004\015\045\016\016\023\005\024\032\031\041" +
    "\046\035\047\011\050\020\054\033\055\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\354\001\001\000\002\001\001\000\014\031\041\052" +
    "\356\053\060\054\033\055\055\001\001\000\002\001\001" +
    "\000\004\056\360\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                Symbol value = (Symbol)info;
                System.err.print(" (linea "+line+", colonna "+column+", símbolo " + sym.terminalNames[value.sym] + "): " + value.toString());
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public void checkVariable(Objeto obj) {
          if (obj == null)
              Objeto.errorYPara("[ERROR]\tLa variable no ha sido declarada", new Vector<>(List.of(obj)));

          if (!(obj instanceof Instancia))
              Objeto.errorYPara("[ERROR]\tLa variable no es una instancia", new Vector<>(List.of(obj)));
    }

    public void checkVariable(String id) {
        checkVariable(PLXC.tablaSimbolos.getObj(id));
    }

    public void checkType(Objeto obj, Tipo tipo) {
        if (!(obj instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(obj, tipo)));
        Instancia aux = (Instancia) obj;
        if (!aux.getTipoInstancia().isParseable(tipo) )// || aux.getTipoInstancia().getClass() != tipo.getClass()
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>(List.of(obj, tipo)));
    }

    public Instancia checkElem(Objeto valor) {
        if (!(valor instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede formar una coleccion de elementos sin instancias de un mismo tipo mismo tipo", new Vector<>(List.of(valor)));

       return (Instancia) valor;
    }

    private String end_and = "", end_or = "";
    private Stack<String> if_tags = new Stack<>();
    private Stack<SwichOperator> switch_operators = new Stack<>();
    private Stack<Funcion> Funciones = new Stack<>();
    private Objeto res_bool;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= lista_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= declr_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= impl_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param ::= tipo ID 
            {
              Instancia RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idParam = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Crear una entrada para el diccionario que almacena los parámetros <Tipo, Instancia>
        Instancia res = null;

        if (tipo == TString.getInstance()) {
            res = new StringInstancia(idParam);
        } else if (tipo instanceof TArray) {
            //generar otro parámetro extra que añadirá el compilador, el tamaño del array
        }else {
            res = new Instancia(idParam, tipo, 0, true);
        }

        RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_param ::= param COMA list_param 
            {
              Set<Instancia> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instancia p = (Instancia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<Instancia> s = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            s.add(p);

            RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_param ::= param 
            {
              Set<Instancia> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instancia p = (Instancia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Set<Instancia> start = new HashSet();

            start.add(p);

            RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= list_param 
            {
              Set<Instancia> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<Instancia> l = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= 
            {
              Set<Instancia> RESULT =null;
		RESULT = new HashSet<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declr_func ::= tipo ID AP params CP PYC 
            {
              Object RESULT =null;
		int tipoRetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tipoRetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipoRet = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Funcion f = new Funcion(id, tipoRet, params);

            f.setImplemented(false);

            PLXC.tablaSimbolos.putFunction(f);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_func",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                Procedure proced = null;

                if (!PLXC.tablaSimbolos.containsFunction(TVoid.getTVoid(), id)) {
                    proced = new Procedure(id, params);
                    PLXC.tablaSimbolos.putFunction(proced);
                } else {
                    proced = (Procedure) PLXC.tablaSimbolos.getFunction(TVoid.getTVoid(), id);
                }

                PLXC.out.println();
                PLXC.out.println("goto " + proced.getEndFuncition() + ";");
                PLXC.out.println(proced.getInicFuncition() + ":");
                proced.initCallParams(new ArrayList<>(params));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // impl_procedure ::= VOID ID AP params CP ALL NT$0 list_sent_simpl CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impl_procedure",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

            Funcion f = null;
            if (!PLXC.tablaSimbolos.containsFunction(tipo, id)) {
                f = new Funcion(id, tipo, params);
                PLXC.tablaSimbolos.putFunction(f);
            } else {
                f = PLXC.tablaSimbolos.getFunction(tipo, id);
            }

            PLXC.out.println();
            PLXC.out.println("goto " + f.getEndFuncition() + ";");
            PLXC.out.println(f.getInicFuncition() + ":");
            f.initCallParams(new ArrayList<>(params));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

            if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != tipo) {
                Objeto.errorYPara("[ERROR]\tLa expresin de retorno no casa con el tipo de la función", new Vector<>(List.of(expr, tipo)));
            }

            Funcion f = PLXC.tablaSimbolos.getFunction(tipo, id);
            f.retornaResultado((Instancia) expr);
            f.setImplemented(true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // impl_func ::= tipo ID AP params CP ALL NT$1 list_sent_simpl RETURN expr PYC NT$2 CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impl_func",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_comp ::= ALL Init_Bloque lista_sent CLL 
            {
              Object RESULT =null;
		int bloquePrevioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloquePrevioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloquePrevio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  PLXC.tablaSimbolos.delBlock();
                  TablaSimbolos.bloqueActual = bloquePrevio;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent_simpl ::= valor PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent_simpl ::= declr PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent_simpl ::= declr_conj PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent_simpl ::= PRINT AP expr CP PYC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if (valor != null) RESULT = valor.metodos("PRINT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent_simpl ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent_simpl ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent_simpl ::= sent_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent_simpl ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent_simpl ::= sent_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent_simpl ::= sent_foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_sent_simpl ::= list_sent_simpl sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_sent_simpl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println(whileTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + whileTag + ";");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent_while ::= WHILE NT$3 AP cond CP NT$4 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    PLXC.out.println("goto " + whileTag + ";");
                       PLXC.out.println("end_" + whileTag + " :");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Object RESULT =null;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println("DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent_do_while ::= DO NT$5 sent WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        PLXC.out.println("if (" + c.getNombre() + " == 1) goto DO_" + doTag + " ;");
                        PLXC.out.println("END_DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_expr ::= valor 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$6 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println(forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + forTag + ";");
                PLXC.out.println("goto body_" + forTag + ";");
                PLXC.out.println("act_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("goto " + forTag + ";");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                PLXC.out.println("body_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sent_for ::= FOR AP for_expr NT$6 PYC cond NT$7 PYC for_expr NT$8 CP NT$9 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                PLXC.out.println("goto act_" + forTag + ";");
                PLXC.out.println("end_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$10 ::= 
            {
              Object RESULT =null;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    this.if_tags.push(ifTag);
    PLXC.out.println("if (" + c.getNombre() + " == 0) goto else_" + ifTag + " ;");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

            PLXC.out.println("goto end_" + ifTag + " ;");
            PLXC.out.println("else_" + ifTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sent_if ::= IF AP cond CP NT$10 sent NT$11 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
            PLXC.out.println("end_" + ifTag + ":");
            this.if_tags.pop();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              String RESULT =null;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    PLXC.out.println(" if (" + c.getNombre() + " == 0) goto else_" + elseIfTag + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                PLXC.out.println("goto end_" + this.if_tags.peek() + ";");
                PLXC.out.println("else_" + elseIfTag + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // else_if ::= ELSEIF AP cond CP NT$12 sent NT$13 else_if 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else_if ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_if ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$14 ::= 
            {
              Object RESULT =null;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    // Checkear que la expresion es una instancia de tipo entero
                    if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));
                    SwichOperator swOper = new SwichOperator(switchTag, (Instancia) expr);
                    this.switch_operators.push(swOper);

                    PLXC.out.println(swOper.getEtiqSwitch() + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println(swOper.getEndSwitch() + ":");
                    this.switch_operators.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sent_switch ::= SWITCH AP valor CP ALL NT$14 list_case op_default NT$15 CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_case ::= list_case case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_case ::= case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$16 ::= 
            {
              Object RESULT =null;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                  // Checkear que el valor sea una instancia de tipo entero
                  if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));

                  SwichOperator swOper = this.switch_operators.peek();
                  // if (switchExpr != expr) goto end_caseEtq ;
                  PLXC.out.println(SwichOperator.genCase(caseEtq) + ":");
                  PLXC.out.println("if (" + swOper.getExpr().getNombre() + " != " + expr.getNombre() + ") goto " + SwichOperator.getEndCase(caseEtq) + ";");
                  swOper.addCase(caseEtq);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // case_oper ::= CASE valor NT$16 DP sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                    //Salto incondicional al final del switch
                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println("goto " + swOper.getEndSwitch() + ";");
                    // Etiqueta de fin del end_caseEtq
                    PLXC.out.println(SwichOperator.getEndCase(caseEtq)+ ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_oper",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$17 ::= 
            {
              Object RESULT =null;

            SwichOperator swOper = this.switch_operators.peek();
            PLXC.out.println("default_" + swOper.getEtiqSwitch() + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op_default ::= DEFAULT DP NT$17 sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$18 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                // Añadir la variable itradora a la tablade símbolos
                Instancia iter = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                PLXC.tablaSimbolos.putObj(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                // Checkear si la expresion es iterable
                if (!(expr instanceof Instancia) || !((Instancia)expr).getTipoInstancia().isIterable())
                    Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each no es iterable.", new Vector<>(List.of(expr)));

                if (expr instanceof SetInstance) {
                    SetInstance set = (SetInstance) expr;
                    Instancia iter = new Instancia(set.getTipoInstancia());

                    set.iterate(iter);
                } else {
                    // En caso de serlo, declarar la etiqueta del búcle y asignar valor a la variable iteradora
                    Instancia index = new Instancia("$_FOREACH_IDX_".concat(forTag), TInt.getTInt(), TablaSimbolos.bloqueActual, true);
                    PLXC.tablaSimbolos.putObj(index);
                    Instancia iter = (Instancia) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
                    Instancia colec = (Instancia) expr;

                    PLXC.out.println(index.getNombre() + " = 0;");
                    PLXC.out.println("foreach_" + forTag + ":");

                    if (colec instanceof StringInstancia) {
                        if (iter.getTipoInstancia() != TChar.getTChar())
                            Objeto.errorYPara("[ERROR]\tLa variable iteradora del búcle for each necesita ser de tipo char.", new Vector<>(List.of(iter)));

                        StringInstancia.iterate(index, (StringInstancia) colec, iter, "end_foreach_".concat(forTag));
                    } else if (colec.getTipoInstancia() == TString.getInstance()){
                        Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each necesita un StringInstance no una instancia de tipo String.", new Vector<>(List.of(expr)));
                    } else if (colec.getTipoInstancia() instanceof TArray) {
                        TArray.iterate(index, (TArray) colec.getTipoInstancia(), colec, iter, "end_foreach_".concat(forTag));
                    }


                    // Instanciar la variable índice con la que se hará en control y acceso a los elementos
                    // (Sentencia de control, la colección ha de contener el número de iteraciones)
                }

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sent_foreach ::= FOR AP tipo ID NT$18 DP expr CP NT$19 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                // Resetear el iterador
                Instancia idx = (Instancia) PLXC.tablaSimbolos.getObj("$_FOREACH_IDX_".concat(forTag), TablaSimbolos.bloqueActual);

                idx.metodos("INCREMENTA_1", new Vector<>());
                PLXC.out.println("goto foreach_" + forTag + ";");
                PLXC.out.println("end_foreach_" + forTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_foreach",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declr ::= tipo ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (inic != null) {
            Instancia newVar;

            if (tipo != TString.getInstance())
                 newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            else
                 newVar = new StringInstancia(id);

            PLXC.tablaSimbolos.putObj(newVar);
            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }

        RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declr ::= tipo ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        if (inic != null) {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }


        RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declr ::= declr COMA ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (inic != null) {
                                      Instancia newVar;

                                      if (tipo != TString.getInstance())
                                           newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      else
                                           newVar = new StringInstancia(id);

                                      PLXC.tablaSimbolos.putObj(newVar);
                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }

                                  RESULT = tipo;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declr ::= declr COMA ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                  if (inic != null) {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);

                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }


                                  RESULT = tipo;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inic ::= ASIGNA expr 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inic ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // set_value ::= ALL list_valor CLL 
            {
              List<Instancia> RESULT =null;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> inic = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inic;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // set_value ::= ALL CLL 
            {
              List<Instancia> RESULT =null;
		 RESULT = new ArrayList<Instancia>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // set_value ::= ID 
            {
              List<Instancia> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto expr = PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
            if (!(expr instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa expresion proporcionada como set value no es una instancia de SetInstace", new Vector<>(List.of(expr)));
            } else {
                SetInstance setValue = (SetInstance) expr;
                RESULT = setValue.getElems();
            }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declr_conj ::= SET tipo ID ASIGNA set_value 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instancia> inic = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Instancia newVariable = new SetInstance(id, tipo, inic, TablaSimbolos.bloqueActual, true);

        PLXC.tablaSimbolos.putObj(newVariable);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_conj",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declr_conj ::= SET tipo ID 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            SetInstance newVar = new SetInstance(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_conj",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list_id ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<String> start = new ArrayList<>();
            start.add(id);
            RESULT = start; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // list_id ::= list_id COMA ID 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  list.add(id); RESULT = list;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // list_valor ::= list_valor COMA valor 
            {
              List<Instancia> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);

            if (l.get(0).getTipoInstancia() != elem.getTipoInstancia())
                Objeto.errorYPara("[ERROR]\tEl elemento de la colección no es del mismo tipo que el resto", new Vector<>());

            l.add(elem);
            RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // list_valor ::= valor 
            {
              List<Instancia> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);
            List<Instancia> start = new ArrayList<>();

            start.add(elem);

            RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= valor 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr_array 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = expr;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // func_id ::= ID 
            {
              Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Objeto aux = PLXC.tablaSimbolos.getObj(id, 0);
        Funcion f = null;
        if (!(aux instanceof Funcion)) {
            Objeto.errorYPara("[ERROR]\tLa funcion con id <" + "id" + "> no se encuentra ni declarada ni implementada", new Vector<>());
        } else {
            f = (Funcion) aux;

        }

        RESULT = f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor ::= ID PUNTO LENGTH 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            checkVariable(id);
            Objeto a = PLXC.tablaSimbolos.getObj(id);

          if (!(a instanceof Instancia) && (((Instancia) a).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(a)));


          RESULT = a.metodos(TArray.ARRAY_METHODS.LENGTH.name(), new Vector<>());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= func_id AP list_valor CP 
            {
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> params = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        f.callFunction(new ArrayList(params));

        RESULT = f.getReturnInstancia();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor ::= ID AC valor CC ASIGNA valor 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          // Checkear que el valor es una instancia y no es de tipo array
          checkVariable(id);
          // Checkear que le valor es del mismo que la variable
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable.getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("SET", new Vector<>(List.of(idx, valor)));
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor ::= ID ASIGNA expr 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                this.checkVariable(id); // Comprueba que la variable este declarada y que sea una instancia
                Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

                if (!(variable.getTipoInstancia() instanceof TArray)) {
                      this.checkType(valor, variable.getTipoInstancia()); // Comprueba que el tipo de la variable sea el mismo que el de la expresion o sean parseables entre sii
                }

                RESULT = variable.metodos("ASIGNA", new Vector<>(List.of(valor)));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor ::= AP tipo CP valor 
            {
              Objeto RESULT =null;
		int tipoDstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipoDstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipoDst = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

      if (exp instanceof Instancia) {
          Instancia aux = ((Instancia)exp).getTipoInstancia().cast(tipoDst, (Instancia) exp);
          if (aux != null) {
              RESULT = aux;
          } else {
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>());
          }
      } else {
          Objeto.errorYPara("[ERROR]\tNo se puede hacer un casting si el valor a asignar no es una instancia", new Vector<>());
      }

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor ::= ID 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  checkVariable(id); RESULT = PLXC.tablaSimbolos.getObj(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor ::= ID AC valor CC 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          checkVariable(id);
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable instanceof Instancia) && (((Instancia) variable).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("GET", new Vector<>(List.of(idx)));

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor ::= ID UNION ID 
            {
              Objeto RESULT =null;
		int idAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idB = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            SetInstance a = null, b = null;
            Objeto aux = PLXC.tablaSimbolos.getObj(idA, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                a = (SetInstance) aux;
            }

            aux = PLXC.tablaSimbolos.getObj(idB, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                b = (SetInstance) aux;
            }

            RESULT = a.metodos(TSet.SET_METHODS.UNION.name(), new Vector<>(List.of(b)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor ::= ID ADD valor 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto value = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       if (!(value instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se pueden añadir elementos a un conjunto si estos no son instancias", new Vector<>(List.of(value)));

       SetInstance set = (SetInstance) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
       Instancia elem = (Instancia) value;

       RESULT = set.metodos(TSet.SET_METHODS.ADD.name(), new Vector<>(List.of(elem)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= NUM_ENTERO 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TInt.getTInt(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= NUM_REAL 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TFloat.getTFloat(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= CARACTER 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(c.toString(), TChar.getTChar(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= CADENA 
            {
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          char[] chars = s.toCharArray();
          StringInstancia res = new StringInstancia(chars);

          res = TString.asignaConstante(res, chars);

          RESULT = res;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= expr_arit 
            {
              Objeto RESULT =null;
		int expr_aritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_aritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr_arit = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr_arit;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_arit ::= AP valor CP 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = exp;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_arit ::= valor MAS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_arit ::= valor MENOS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_arit ::= valor POR valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_arit ::= valor DIV valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_arit ::= MENOS valor 
            {
              Objeto RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exp.metodos("UMENOS", new Vector());       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_array ::= ALL list_valor CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Instancia res = new Instancia(new TArray(l.get(0).getTipoInstancia(), String.valueOf(l.size())));
                for (int i = 0; i < l.size(); i++) {
                     PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i).getNombre() + ";");
                }

                RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_array",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond ::= AP cond CP 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cond ::= NOT cond 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("NOT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$20 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_and = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 0) goto " + end_and + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cond ::= cond AND NT$20 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_and + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$21 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_or = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 1) goto " + end_or + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cond ::= cond OR NT$21 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_or + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cond ::= valor GT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cond ::= valor LT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cond ::= valor GE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cond ::= valor LE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cond ::= valor EQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("IGUAL", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cond ::= valor NEQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("DISTINTO", new Vector(List.of(b)));       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cond ::= FALSE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("0", TBool.getTBool(), TablaSimbolos.bloqueActual, false);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cond ::= TRUE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("1", TBool.getTBool(), TablaSimbolos.bloqueActual, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TFloat.getTFloat();        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TChar.getTChar();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TString.getInstance();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipo ::= VOID 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TVoid.getTVoid();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipo ::= tipo ALL expr CLL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new TArray(t, exp.getNombre());        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo ::= 
            {
              Tipo RESULT =null;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Init_Bloque ::= 
            {
              Integer RESULT =null;
		  RESULT = TablaSimbolos.newBloque();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Init_Bloque",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // and_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_end",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // or_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_end",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Get_BoolInstance ::= 
            {
              Objeto RESULT =null;
		 RESULT = new Instancia(TBool.getTBool());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Get_BoolInstance",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
