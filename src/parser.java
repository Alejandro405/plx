
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java.util.Set;
import java.util.HashSet;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\026\004\000" +
    "\002\024\005\000\002\024\003\000\002\025\003\000\002" +
    "\025\002\000\002\022\010\000\002\053\002\000\002\054" +
    "\002\000\002\023\017\000\002\005\006\000\002\006\004" +
    "\000\002\006\004\000\002\006\007\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\021\004\000\002\021\002\000\002\055" +
    "\002\000\002\056\002\000\002\010\011\000\002\057\002" +
    "\000\002\012\012\000\002\014\003\000\002\014\002\000" +
    "\002\060\002\000\002\061\002\000\002\062\002\000\002" +
    "\063\002\000\002\013\017\000\002\064\002\000\002\065" +
    "\002\000\002\007\012\000\002\066\002\000\002\067\002" +
    "\000\002\032\012\000\002\032\004\000\002\032\002\000" +
    "\002\070\002\000\002\071\002\000\002\015\014\000\002" +
    "\016\004\000\002\016\003\000\002\072\002\000\002\020" +
    "\011\000\002\073\002\000\002\017\010\000\002\044\005" +
    "\000\002\044\010\000\002\044\006\000\002\044\011\000" +
    "\002\052\004\000\002\052\002\000\002\036\003\000\002" +
    "\036\005\000\002\042\005\000\002\042\003\000\002\046" +
    "\003\000\002\046\003\000\002\027\003\000\002\051\005" +
    "\000\002\051\006\000\002\051\010\000\002\051\005\000" +
    "\002\051\006\000\002\051\003\000\002\051\006\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\004\000\002\047\005\000\002\033\005\000\002" +
    "\033\004\000\002\074\002\000\002\033\006\000\002\075" +
    "\002\000\002\033\006\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\003\000\002\033\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\006\000\002\043\002\000\002\035\002" +
    "\000\002\030\002\000\002\031\002\000\002\034\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\046\004\012\006\024\016\007\017\031\020" +
    "\011\021\030\023\023\024\045\025\013\026\026\027\005" +
    "\033\004\050\017\051\010\052\042\053\025\054\036\061" +
    "\016\001\002\000\020\006\024\023\023\024\045\025\013" +
    "\026\026\027\005\033\004\001\002\000\046\005\uffb1\007" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\001\002\000\006\004\121" +
    "\023\275\001\002\000\010\004\uff9a\007\uff9a\023\uff9a\001" +
    "\002\000\004\006\uffe5\001\002\000\010\004\uff98\007\uff98" +
    "\023\uff98\001\002\000\046\004\uff94\006\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\033\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\061\uff94\001\002\000\046\005\uffb3\007\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\015\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\001\002\000\062\002\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\033\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\056\uffeb\057\uffeb\061\uffeb" +
    "\063\uffeb\064\uffeb\001\002\000\062\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\033\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\056\ufffb\057\ufffb\061\ufffb" +
    "\063\ufffb\064\ufffb\001\002\000\004\006\234\001\002\000" +
    "\004\006\213\001\002\000\014\012\212\032\102\033\074" +
    "\034\077\035\105\001\002\000\004\002\211\001\002\000" +
    "\062\002\ufffc\004\ufffc\005\ufffc\006\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\033\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\056\ufffc\057\ufffc\061\ufffc\063\ufffc\064\ufffc\001\002\000" +
    "\056\005\uffb6\006\uffbc\007\uffb6\010\201\011\uffb6\012\uffb6" +
    "\013\uffb6\014\200\015\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\047\202\001\002\000\034\004\uff95\006" +
    "\024\007\uff95\016\007\017\031\020\011\021\030\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\001\002\000" +
    "\046\004\uffe2\006\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\033\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\061\uffe2\001\002" +
    "\000\046\005\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\015" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\001" +
    "\002\000\062\002\uffea\004\uffea\005\uffea\006\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\033\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\056\uffea\057\uffea\061\uffea\063\uffea\064\uffea\001" +
    "\002\000\010\004\uff97\007\uff97\023\uff97\001\002\000\010" +
    "\004\uff99\007\uff99\023\uff99\001\002\000\050\002\000\004" +
    "\012\006\024\016\007\017\031\020\011\021\030\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\050\017\051" +
    "\010\052\042\053\025\054\036\061\016\001\002\000\004" +
    "\006\164\001\002\000\046\005\uffb0\007\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\015\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\001\002\000\062\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\016\uffec\017\uffec\020\uffec\021\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\033\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\056\uffec\057\uffec\061\uffec\063" +
    "\uffec\064\uffec\001\002\000\004\006\160\001\002\000\062" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\033\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\056" +
    "\ufffa\057\ufffa\061\ufffa\063\ufffa\064\ufffa\001\002\000\006" +
    "\012\147\013\146\001\002\000\062\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\033\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\056\ufffd\057\ufffd\061\ufffd" +
    "\063\ufffd\064\ufffd\001\002\000\004\006\047\001\002\000" +
    "\062\002\uffe8\004\uffe8\005\uffe8\006\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\033\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\056\uffe8\057\uffe8\061\uffe8\063\uffe8\064\uffe8\001\002\000" +
    "\062\002\uffe9\004\uffe9\005\uffe9\006\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\033\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\056\uffe9\057\uffe9\061\uffe9\063\uffe9\064\uffe9\001\002\000" +
    "\046\005\uffb4\007\uffb4\011\uffb4\012\uffb4\013\uffb4\015\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\001\002" +
    "\000\052\002\uffff\004\uffff\005\uffff\006\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
    "\027\uffff\033\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\061\uffff\001\002\000\022\006\024\012\uffdf\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\001\002\000" +
    "\016\007\uffe0\012\uffe0\032\102\033\074\034\077\035\105" +
    "\001\002\000\004\012\uffde\001\002\000\004\012\053\001" +
    "\002\000\026\006\061\023\023\024\045\025\013\026\026" +
    "\027\005\030\056\031\055\033\004\046\060\001\002\000" +
    "\026\032\102\033\074\034\077\035\105\036\101\037\100" +
    "\040\106\041\104\042\103\043\076\001\002\000\012\007" +
    "\uff9b\012\uff9b\044\uff9b\045\uff9b\001\002\000\012\007\uff9c" +
    "\012\uff9c\044\uff9c\045\uff9c\001\002\000\010\012\uffdd\044" +
    "\065\045\066\001\002\000\026\006\061\023\023\024\045" +
    "\025\013\026\026\027\005\030\056\031\055\033\004\046" +
    "\060\001\002\000\042\004\uff95\006\061\007\uff95\016\007" +
    "\017\031\020\011\021\030\023\023\024\045\025\013\026" +
    "\026\027\005\030\056\031\055\033\004\046\060\001\002" +
    "\000\006\004\121\007\122\001\002\000\030\007\075\032" +
    "\102\033\074\034\077\035\105\036\101\037\100\040\106" +
    "\041\104\042\103\043\076\001\002\000\010\007\067\044" +
    "\065\045\066\001\002\000\026\006\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6\046" +
    "\uffa6\001\002\000\026\006\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\046\uffa4\001" +
    "\002\000\012\007\uffa8\012\uffa8\044\uffa8\045\uffa8\001\002" +
    "\000\026\006\061\023\023\024\045\025\013\026\026\027" +
    "\005\030\056\031\055\033\004\046\060\001\002\000\012" +
    "\007\uffa3\012\uffa3\044\uffa3\045\uffa3\001\002\000\026\006" +
    "\061\023\023\024\045\025\013\026\026\027\005\030\056" +
    "\031\055\033\004\046\060\001\002\000\012\007\uffa5\012" +
    "\uffa5\044\uffa5\045\uffa5\001\002\000\020\006\024\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\001\002\000" +
    "\046\005\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\001\002" +
    "\000\020\006\024\023\023\024\045\025\013\026\026\027" +
    "\005\033\004\001\002\000\020\006\024\023\023\024\045" +
    "\025\013\026\026\027\005\033\004\001\002\000\020\006" +
    "\024\023\023\024\045\025\013\026\026\027\005\033\004" +
    "\001\002\000\020\006\024\023\023\024\045\025\013\026" +
    "\026\027\005\033\004\001\002\000\020\006\024\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\001\002\000" +
    "\020\006\024\023\023\024\045\025\013\026\026\027\005" +
    "\033\004\001\002\000\020\006\024\023\023\024\045\025" +
    "\013\026\026\027\005\033\004\001\002\000\020\006\024" +
    "\023\023\024\045\025\013\026\026\027\005\033\004\001" +
    "\002\000\020\006\024\023\023\024\045\025\013\026\026" +
    "\027\005\033\004\001\002\000\022\007\uffa1\012\uffa1\032" +
    "\102\033\074\034\077\035\105\044\uffa1\045\uffa1\001\002" +
    "\000\046\005\uffab\007\uffab\011\uffab\012\uffab\013\uffab\015" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\001" +
    "\002\000\022\007\uffa2\012\uffa2\032\102\033\074\034\077" +
    "\035\105\044\uffa2\045\uffa2\001\002\000\022\007\uff9f\012" +
    "\uff9f\032\102\033\074\034\077\035\105\044\uff9f\045\uff9f" +
    "\001\002\000\046\005\uffae\007\uffae\011\uffae\012\uffae\013" +
    "\uffae\015\uffae\032\uffae\033\uffae\034\077\035\105\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\001\002\000\022\007\uff9e\012\uff9e\032\102\033\074" +
    "\034\077\035\105\044\uff9e\045\uff9e\001\002\000\022\007" +
    "\uff9d\012\uff9d\032\102\033\074\034\077\035\105\044\uff9d" +
    "\045\uff9d\001\002\000\046\005\uffac\007\uffac\011\uffac\012" +
    "\uffac\013\uffac\015\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\001\002\000\022\007\uffa0\012\uffa0\032\102" +
    "\033\074\034\077\035\105\044\uffa0\045\uffa0\001\002\000" +
    "\046\005\uffad\007\uffad\011\uffad\012\uffad\013\uffad\015\uffad" +
    "\032\uffad\033\uffad\034\077\035\105\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\001\002" +
    "\000\022\004\125\006\024\023\023\024\045\025\013\026" +
    "\026\027\005\033\004\001\002\000\020\006\024\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\001\002\000" +
    "\046\005\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\001\002" +
    "\000\046\005\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\015" +
    "\uffbe\032\102\033\074\034\077\035\105\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\001" +
    "\002\000\020\006\024\023\023\024\045\025\013\026\026" +
    "\027\005\033\004\001\002\000\004\005\130\001\002\000" +
    "\046\005\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\001\002" +
    "\000\010\004\uff96\007\uff96\023\uff96\001\002\000\020\005" +
    "\uffbf\007\uffbf\013\uffbf\032\102\033\074\034\077\035\105" +
    "\001\002\000\006\005\134\013\133\001\002\000\020\006" +
    "\024\023\023\024\045\025\013\026\026\027\005\033\004" +
    "\001\002\000\046\005\uffa9\007\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\015\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\001\002\000\020\005\uffc0\007\uffc0\013\uffc0\032\102" +
    "\033\074\034\077\035\105\001\002\000\012\007\uffa7\012" +
    "\uffa7\044\uffa7\045\uffa7\001\002\000\004\012\140\001\002" +
    "\000\022\006\024\007\uffdf\023\023\024\045\025\013\026" +
    "\026\027\005\033\004\001\002\000\004\007\uffdc\001\002" +
    "\000\004\007\143\001\002\000\046\004\uffdb\006\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\033\uffdb\050\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\061\uffdb\001\002\000\046\004\012\006\024" +
    "\016\007\017\031\020\011\021\030\023\023\024\045\025" +
    "\013\026\026\027\005\033\004\050\017\051\010\052\042" +
    "\053\025\054\036\061\016\001\002\000\062\002\uffda\004" +
    "\uffda\005\uffda\006\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\033\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\056\uffda\057\uffda" +
    "\061\uffda\063\uffda\064\uffda\001\002\000\004\023\150\001" +
    "\002\000\062\002\uffee\004\uffee\005\uffee\006\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\033\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\056\uffee\057\uffee\061\uffee\063\uffee\064\uffee\001" +
    "\002\000\012\010\152\012\uffc3\013\uffc3\047\153\001\002" +
    "\000\006\012\uffc6\013\uffc6\001\002\000\022\004\125\006" +
    "\024\023\023\024\045\025\013\026\026\027\005\033\004" +
    "\001\002\000\022\004\125\006\024\023\023\024\045\025" +
    "\013\026\026\027\005\033\004\001\002\000\006\012\uffc4" +
    "\013\uffc4\001\002\000\004\011\156\001\002\000\010\012" +
    "\uffc3\013\uffc3\047\153\001\002\000\006\012\uffc5\013\uffc5" +
    "\001\002\000\022\004\125\006\024\023\023\024\045\025" +
    "\013\026\026\027\005\033\004\001\002\000\004\007\162" +
    "\001\002\000\004\012\163\001\002\000\062\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\033\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\056\uffed\057\uffed" +
    "\061\uffed\063\uffed\064\uffed\001\002\000\020\006\024\023" +
    "\023\024\045\025\013\026\026\027\005\033\004\001\002" +
    "\000\006\007\166\013\133\001\002\000\046\005\uffba\007" +
    "\uffba\011\uffba\012\uffba\013\uffba\015\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\001\002\000\052\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\033\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\061\ufffe\001" +
    "\002\000\046\004\012\006\024\016\007\017\031\020\011" +
    "\021\030\023\023\024\045\025\013\026\026\027\005\033" +
    "\004\050\017\051\010\052\042\053\025\054\036\061\016" +
    "\001\002\000\004\051\172\001\002\000\004\006\173\001" +
    "\002\000\026\006\061\023\023\024\045\025\013\026\026" +
    "\027\005\030\056\031\055\033\004\046\060\001\002\000" +
    "\010\007\175\044\065\045\066\001\002\000\004\012\176" +
    "\001\002\000\062\002\uffe1\004\uffe1\005\uffe1\006\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\033\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\056\uffe1\057\uffe1\061\uffe1\063\uffe1\064\uffe1" +
    "\001\002\000\014\007\075\032\102\033\074\034\077\035" +
    "\105\001\002\000\004\055\210\001\002\000\020\006\024" +
    "\023\023\024\045\025\013\026\026\027\005\033\004\001" +
    "\002\000\022\004\125\006\024\023\023\024\045\025\013" +
    "\026\026\027\005\033\004\001\002\000\046\005\uffb8\007" +
    "\uffb8\011\uffb8\012\uffb8\013\uffb8\015\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\001\002\000\014\011\205" +
    "\032\102\033\074\034\077\035\105\001\002\000\050\005" +
    "\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047\206\001\002" +
    "\000\020\006\024\023\023\024\045\025\013\026\026\027" +
    "\005\033\004\001\002\000\046\005\uffb9\007\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\015\uffb9\032\102\033\074\034\077\035" +
    "\105\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\001\002\000\046\005\uffbb\007\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\015\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\001\002\000\004\002\001\001\002" +
    "\000\062\002\uffef\004\uffef\005\uffef\006\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\033\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\056\uffef\057\uffef\061\uffef\063\uffef\064\uffef\001\002" +
    "\000\026\006\061\023\023\024\045\025\013\026\026\027" +
    "\005\030\056\031\055\033\004\046\060\001\002\000\010" +
    "\007\215\044\065\045\066\001\002\000\046\004\uffd9\006" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\033\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\061\uffd9\001\002\000\046\004\012" +
    "\006\024\016\007\017\031\020\011\021\030\023\023\024" +
    "\045\025\013\026\026\027\005\033\004\050\017\051\010" +
    "\052\042\053\025\054\036\061\016\001\002\000\062\002" +
    "\uffd8\004\uffd8\005\uffd8\006\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\033" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\056\uffd8" +
    "\057\uffd8\061\uffd8\063\uffd8\064\uffd8\001\002\000\062\002" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\033" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\056\222" +
    "\057\221\061\uffd2\063\uffd2\064\uffd2\001\002\000\004\006" +
    "\225\001\002\000\046\004\012\006\024\016\007\017\031" +
    "\020\011\021\030\023\023\024\045\025\013\026\026\027" +
    "\005\033\004\050\017\051\010\052\042\053\025\054\036" +
    "\061\016\001\002\000\062\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\033\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\056\uffd7\057\uffd7\061\uffd7\063\uffd7" +
    "\064\uffd7\001\002\000\062\002\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\033\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\056\uffd3\057\uffd3\061\uffd3\063\uffd3" +
    "\064\uffd3\001\002\000\026\006\061\023\023\024\045\025" +
    "\013\026\026\027\005\030\056\031\055\033\004\046\060" +
    "\001\002\000\010\007\227\044\065\045\066\001\002\000" +
    "\046\004\uffd6\006\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\033\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\061\uffd6\001\002" +
    "\000\046\004\012\006\024\016\007\017\031\020\011\021" +
    "\030\023\023\024\045\025\013\026\026\027\005\033\004" +
    "\050\017\051\010\052\042\053\025\054\036\061\016\001" +
    "\002\000\062\002\uffd5\004\uffd5\005\uffd5\006\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\033\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\056\uffd5\057\uffd5\061\uffd5\063\uffd5\064\uffd5\001" +
    "\002\000\062\002\uffd2\004\uffd2\005\uffd2\006\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\033\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\056\222\057\221\061\uffd2\063\uffd2\064\uffd2\001" +
    "\002\000\062\002\uffd4\004\uffd4\005\uffd4\006\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\033\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\056\uffd4\057\uffd4\061\uffd4\063\uffd4\064\uffd4\001" +
    "\002\000\020\006\024\023\023\024\045\025\013\026\026" +
    "\027\005\033\004\001\002\000\014\007\236\032\102\033" +
    "\074\034\077\035\105\001\002\000\004\004\237\001\002" +
    "\000\004\060\uffd1\001\002\000\004\060\242\001\002\000" +
    "\006\060\242\062\252\001\002\000\020\006\024\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\001\002\000" +
    "\006\060\uffcd\062\uffcd\001\002\000\014\015\uffcc\032\102" +
    "\033\074\034\077\035\105\001\002\000\004\015\246\001" +
    "\002\000\046\004\012\006\024\016\007\017\031\020\011" +
    "\021\030\023\023\024\045\025\013\026\026\027\005\033" +
    "\004\050\017\051\010\052\042\053\025\054\036\061\016" +
    "\001\002\000\004\063\250\001\002\000\004\012\251\001" +
    "\002\000\006\060\uffcb\062\uffcb\001\002\000\004\015\257" +
    "\001\002\000\004\005\uffd0\001\002\000\006\060\uffce\062" +
    "\uffce\001\002\000\004\005\256\001\002\000\062\002\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\033\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf\057" +
    "\uffcf\061\uffcf\063\uffcf\064\uffcf\001\002\000\046\004\uffca" +
    "\006\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\033\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\061\uffca\001\002\000\046\004" +
    "\012\006\024\016\007\017\031\020\011\021\030\023\023" +
    "\024\045\025\013\026\026\027\005\033\004\050\017\051" +
    "\010\052\042\053\025\054\036\061\016\001\002\000\004" +
    "\063\262\001\002\000\004\012\263\001\002\000\004\005" +
    "\uffc9\001\002\000\046\004\012\006\024\016\007\017\031" +
    "\020\011\021\030\023\023\024\045\025\013\026\026\027" +
    "\005\033\004\050\017\051\010\052\042\053\025\054\036" +
    "\061\016\001\002\000\050\004\012\005\266\006\024\016" +
    "\007\017\031\020\011\021\030\023\023\024\045\025\013" +
    "\026\026\027\005\033\004\050\017\051\010\052\042\053" +
    "\025\054\036\061\016\001\002\000\062\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\033\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\054\ufff0\056\ufff0\057\ufff0\061" +
    "\ufff0\063\ufff0\064\ufff0\001\002\000\004\006\270\001\002" +
    "\000\026\006\061\023\023\024\045\025\013\026\026\027" +
    "\005\030\056\031\055\033\004\046\060\001\002\000\010" +
    "\007\272\044\065\045\066\001\002\000\046\004\uffe4\006" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\033\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\061\uffe4\001\002\000\046\004\012" +
    "\006\024\016\007\017\031\020\011\021\030\023\023\024" +
    "\045\025\013\026\026\027\005\033\004\050\017\051\010" +
    "\052\042\053\025\054\036\061\016\001\002\000\062\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\033" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3" +
    "\057\uffe3\061\uffe3\063\uffe3\064\uffe3\001\002\000\014\006" +
    "\277\010\300\012\uffc3\013\uffc3\047\153\001\002\000\006" +
    "\012\uffc8\013\uffc8\001\002\000\020\004\uff95\007\ufff5\016" +
    "\007\017\031\020\011\021\030\023\uff95\001\002\000\022" +
    "\004\125\006\024\023\023\024\045\025\013\026\026\027" +
    "\005\033\004\001\002\000\004\011\302\001\002\000\010" +
    "\012\uffc3\013\uffc3\047\153\001\002\000\006\012\uffc7\013" +
    "\uffc7\001\002\000\006\004\121\023\327\001\002\000\006" +
    "\007\ufff6\013\325\001\002\000\006\007\ufff7\013\ufff7\001" +
    "\002\000\004\007\310\001\002\000\006\004\311\012\312" +
    "\001\002\000\050\004\ufff3\006\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\033\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\061" +
    "\ufff3\064\ufff3\001\002\000\062\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\033\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\056\ufff4\057\ufff4\061\ufff4\063" +
    "\ufff4\064\ufff4\001\002\000\050\004\uffe6\006\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\033\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\061\uffe6\064\uffe6\001\002\000\050\004\uff95\006" +
    "\024\016\007\017\031\020\011\021\030\023\023\024\045" +
    "\025\013\026\026\027\005\033\004\050\017\051\010\052" +
    "\042\053\025\054\036\061\016\064\316\001\002\000\006" +
    "\004\121\023\324\001\002\000\022\004\125\006\024\023" +
    "\023\024\045\025\013\026\026\027\005\033\004\001\002" +
    "\000\050\004\uffe7\006\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\033\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\061\uffe7\064" +
    "\uffe7\001\002\000\004\012\321\001\002\000\004\005\ufff2" +
    "\001\002\000\004\005\323\001\002\000\062\002\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\033\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\056\ufff1\057\ufff1" +
    "\061\ufff1\063\ufff1\064\ufff1\001\002\000\012\010\300\012" +
    "\uffc3\013\uffc3\047\153\001\002\000\016\004\uff95\016\007" +
    "\017\031\020\011\021\030\023\uff95\001\002\000\006\007" +
    "\ufff8\013\ufff8\001\002\000\006\007\ufff9\013\ufff9\001\002" +
    "\000\046\005\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa\015" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\044\002\020\003\031\004\045\005\040\006" +
    "\021\007\034\010\013\012\026\013\043\015\042\022\014" +
    "\023\036\027\032\043\005\044\037\050\033\051\017\001" +
    "\001\000\010\027\032\050\033\051\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\266\001\001\000\002\001\001\000\004\035\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\032\043\061\050\033\051\176\001\001\000\004\057\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\166\005\040\006\021" +
    "\007\034\010\013\012\026\013\043\015\042\022\014\023" +
    "\036\027\032\043\005\044\037\050\033\051\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\050" +
    "\027\032\050\033\051\047\001\001\000\002\001\001\000" +
    "\004\060\051\001\001\000\002\001\001\000\012\027\032" +
    "\033\056\050\033\051\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\136\001\001" +
    "\000\012\027\032\033\135\050\033\051\053\001\001\000" +
    "\014\027\032\033\063\043\061\050\033\051\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\071\001\001\000\004\075\067\001\001\000\002" +
    "\001\001\000\012\027\032\033\070\050\033\051\053\001" +
    "\001\000\002\001\001\000\012\027\032\033\072\050\033" +
    "\051\053\001\001\000\002\001\001\000\010\027\032\050" +
    "\033\051\117\001\001\000\002\001\001\000\010\027\032" +
    "\050\033\051\116\001\001\000\010\027\032\050\033\051" +
    "\115\001\001\000\010\027\032\050\033\051\114\001\001" +
    "\000\010\027\032\050\033\051\113\001\001\000\010\027" +
    "\032\050\033\051\112\001\001\000\010\027\032\050\033" +
    "\051\111\001\001\000\010\027\032\050\033\051\110\001" +
    "\001\000\010\027\032\050\033\051\107\001\001\000\010" +
    "\027\032\050\033\051\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\027\032" +
    "\046\125\047\126\050\033\051\123\001\001\000\010\027" +
    "\032\050\033\051\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\027\032\042\131\050\033\051\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\032\050" +
    "\033\051\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\140\027" +
    "\032\050\033\051\047\001\001\000\004\062\141\001\001" +
    "\000\002\001\001\000\004\063\143\001\001\000\040\004" +
    "\144\005\040\006\021\007\034\010\013\012\026\013\043" +
    "\015\042\022\014\023\036\027\032\043\005\044\037\050" +
    "\033\051\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\150\001\001\000\002\001" +
    "\001\000\014\027\032\046\154\047\126\050\033\051\123" +
    "\001\001\000\014\027\032\046\153\047\126\050\033\051" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\156\001\001\000\002\001\001\000\014\027\032\046" +
    "\160\047\126\050\033\051\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\032\042" +
    "\164\050\033\051\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\170\005\040\006" +
    "\021\007\034\010\013\012\026\013\043\015\042\022\014" +
    "\023\036\027\032\043\005\044\037\050\033\051\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\032" +
    "\033\173\050\033\051\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\032\050\033\051\203\001\001\000" +
    "\014\027\032\046\202\047\126\050\033\051\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\032\050\033\051\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\032\033\213\050\033\051\053\001\001\000\002" +
    "\001\001\000\004\064\215\001\001\000\040\004\216\005" +
    "\040\006\021\007\034\010\013\012\026\013\043\015\042" +
    "\022\014\023\036\027\032\043\005\044\037\050\033\051" +
    "\017\001\001\000\004\065\217\001\001\000\004\032\222" +
    "\001\001\000\002\001\001\000\040\004\223\005\040\006" +
    "\021\007\034\010\013\012\026\013\043\015\042\022\014" +
    "\023\036\027\032\043\005\044\037\050\033\051\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\027\032" +
    "\033\225\050\033\051\053\001\001\000\002\001\001\000" +
    "\004\066\227\001\001\000\040\004\230\005\040\006\021" +
    "\007\034\010\013\012\026\013\043\015\042\022\014\023" +
    "\036\027\032\043\005\044\037\050\033\051\017\001\001" +
    "\000\004\067\231\001\001\000\004\032\232\001\001\000" +
    "\002\001\001\000\010\027\032\050\033\051\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\237\001" +
    "\001\000\006\016\240\020\242\001\001\000\006\017\252" +
    "\020\253\001\001\000\010\027\032\050\033\051\243\001" +
    "\001\000\002\001\001\000\004\072\244\001\001\000\002" +
    "\001\001\000\040\004\246\005\040\006\021\007\034\010" +
    "\013\012\026\013\043\015\042\022\014\023\036\027\032" +
    "\043\005\044\037\050\033\051\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\257\001\001\000\040" +
    "\004\260\005\040\006\021\007\034\010\013\012\026\013" +
    "\043\015\042\022\014\023\036\027\032\043\005\044\037" +
    "\050\033\051\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\264\004\045\005\040" +
    "\006\021\007\034\010\013\012\026\013\043\015\042\022" +
    "\014\023\036\027\032\043\005\044\037\050\033\051\017" +
    "\001\001\000\040\004\166\005\040\006\021\007\034\010" +
    "\013\012\026\013\043\015\042\022\014\023\036\027\032" +
    "\043\005\044\037\050\033\051\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\032\033\270\050\033" +
    "\051\053\001\001\000\002\001\001\000\004\056\272\001" +
    "\001\000\040\004\273\005\040\006\021\007\034\010\013" +
    "\012\026\013\043\015\042\022\014\023\036\027\032\043" +
    "\005\044\037\050\033\051\017\001\001\000\002\001\001" +
    "\000\004\052\275\001\001\000\002\001\001\000\012\024" +
    "\304\025\306\026\305\043\303\001\001\000\014\027\032" +
    "\046\300\047\126\050\033\051\123\001\001\000\002\001" +
    "\001\000\004\052\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\312\001\001\000\002" +
    "\001\001\000\004\021\313\001\001\000\030\006\316\007" +
    "\034\010\013\012\026\013\043\015\042\027\032\043\314" +
    "\044\037\050\033\051\017\001\001\000\002\001\001\000" +
    "\014\027\032\046\317\047\126\050\033\051\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\275" +
    "\001\001\000\006\026\325\043\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                Symbol value = (Symbol)info;
                System.err.print(" (linea "+line+", colonna "+column+", símbolo " + sym.terminalNames[value.sym] + "): " + value.toString());
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public void checkVariable(Objeto obj) {
          if (obj == null)
              Objeto.errorYPara("[ERROR]\tLa variable no ha sido declarada", new Vector<>(List.of(obj)));

          if (!(obj instanceof Instancia))
              Objeto.errorYPara("[ERROR]\tLa variable no es una instancia", new Vector<>(List.of(obj)));
    }

    public void checkVariable(String id) {
        checkVariable(PLXC.tablaSimbolos.getObj(id));
    }

    public void checkType(Objeto obj, Tipo tipo) {
        if (!(obj instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(obj, tipo)));
        Instancia aux = (Instancia) obj;
        if (!aux.getTipoInstancia().isParseable(tipo) )// || aux.getTipoInstancia().getClass() != tipo.getClass()
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>(List.of(obj, tipo)));
    }

    public Instancia checkElem(Objeto valor) {
        if (!(valor instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede formar una coleccion de elementos sin instancias de un mismo tipo mismo tipo", new Vector<>(List.of(valor)));

       return (Instancia) valor;
    }

    private String end_and = "", end_or = "";
    private Stack<String> if_tags = new Stack<>();
    private Stack<SwichOperator> switch_operators = new Stack<>();
    private Objeto res_bool;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= lista_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= declr_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= impl_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param ::= tipo ID 
            {
              Instancia RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idParam = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Crear una entrada para el diccionario que almacena los parámetros <Tipo, Instancia>
        Instancia res = new Instancia(idParam, tipo, 0, true);

        RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_param ::= list_param COMA param 
            {
              Set<Instancia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> s = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instancia p = (Instancia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            s.add(p);

            RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_param ::= param 
            {
              Set<Instancia> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instancia p = (Instancia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Set<Instancia> start = new HashSet();

            start.add(p);

            RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= list_param 
            {
              Set<Instancia> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<Instancia> l = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= 
            {
              Set<Instancia> RESULT =null;
		RESULT = new HashSet<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declr_func ::= tipo ID AP params CP PYC 
            {
              Object RESULT =null;
		int tipoRetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tipoRetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipoRet = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Funcion f = new Funcion(id, tipoRet, params);

            f.setImplemented(false);

            PLXC.tablaSimbolos.putFunction(f);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_func",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

            Funcion f = null;
            if (!PLXC.tablaSimbolos.containsFunction(tipo, id)) {
                f = new Funcion(id, tipo, params);
                PLXC.tablaSimbolos.putFunction(f);
            } else {
                f = PLXC.tablaSimbolos.getFunction(tipo, id);
            }

            PLXC.out.println();
            PLXC.out.println("goto " + f.getEndFuncition() + ";");
            PLXC.out.println(f.getInicFuncition() + ":");
            f.initCallParams(new ArrayList<>(params));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

            if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != tipo) {
                Objeto.errorYPara("[ERROR]\tLa expresin de retorno no casa con el tipo de la función", new Vector<>(List.of(expr, tipo)));
            }

            Funcion f = PLXC.tablaSimbolos.getFunction(tipo, id);
            f.retornaResultado((Instancia) expr);
            f.setImplemented(true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // impl_func ::= tipo ID AP params CP ALL NT$0 list_sent_simpl RETURN expr PYC NT$1 CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impl_func",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent_comp ::= ALL Init_Bloque lista_sent CLL 
            {
              Object RESULT =null;
		int bloquePrevioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloquePrevioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloquePrevio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  PLXC.tablaSimbolos.delBlock();
                  TablaSimbolos.bloqueActual = bloquePrevio;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent_simpl ::= valor PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_simpl ::= declr PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent_simpl ::= PRINT AP expr CP PYC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if (valor != null) RESULT = valor.metodos("PRINT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent_simpl ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent_simpl ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent_simpl ::= sent_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent_simpl ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent_simpl ::= sent_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_sent_simpl ::= list_sent_simpl sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list_sent_simpl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println(whileTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + whileTag + ";");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sent_while ::= WHILE NT$2 AP cond CP NT$3 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    PLXC.out.println("goto " + whileTag + ";");
                       PLXC.out.println("end_" + whileTag + " :");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              Object RESULT =null;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println("DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sent_do_while ::= DO NT$4 sent WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        PLXC.out.println("if (" + c.getNombre() + " == 1) goto DO_" + doTag + " ;");
                        PLXC.out.println("END_DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // for_expr ::= valor 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println(forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + forTag + ";");
                PLXC.out.println("goto body_" + forTag + ";");
                PLXC.out.println("act_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("goto " + forTag + ";");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                PLXC.out.println("body_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sent_for ::= FOR AP for_expr NT$5 PYC cond NT$6 PYC for_expr NT$7 CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                PLXC.out.println("goto act_" + forTag + ";");
                PLXC.out.println("end_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$9 ::= 
            {
              Object RESULT =null;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    this.if_tags.push(ifTag);
    PLXC.out.println("if (" + c.getNombre() + " == 0) goto else_" + ifTag + " ;");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

            PLXC.out.println("goto end_" + ifTag + " ;");
            PLXC.out.println("else_" + ifTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sent_if ::= IF AP cond CP NT$9 sent NT$10 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
            PLXC.out.println("end_" + ifTag + ":");
            this.if_tags.pop();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$11 ::= 
            {
              String RESULT =null;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    PLXC.out.println(" if (" + c.getNombre() + " == 0) goto else_" + elseIfTag + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                PLXC.out.println("goto end_" + this.if_tags.peek() + ";");
                PLXC.out.println("else_" + elseIfTag + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // else_if ::= ELSEIF AP cond CP NT$11 sent NT$12 else_if 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else_if ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else_if ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              Object RESULT =null;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    // Checkear que la expresion es una instancia de tipo entero
                    if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));
                    SwichOperator swOper = new SwichOperator(switchTag, (Instancia) expr);
                    this.switch_operators.push(swOper);

                    PLXC.out.println(swOper.getEtiqSwitch() + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println(swOper.getEndSwitch() + ":");
                    this.switch_operators.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sent_switch ::= SWITCH AP valor CP ALL NT$13 list_case op_default NT$14 CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_switch",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_case ::= list_case case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_case ::= case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Object RESULT =null;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                  // Checkear que el valor sea una instancia de tipo entero
                  if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));

                  SwichOperator swOper = this.switch_operators.peek();
                  // if (switchExpr != expr) goto end_caseEtq ;
                  PLXC.out.println(SwichOperator.genCase(caseEtq) + ":");
                  PLXC.out.println("if (" + swOper.getExpr().getNombre() + " != " + expr.getNombre() + ") goto " + SwichOperator.getEndCase(caseEtq) + ";");
                  swOper.addCase(caseEtq);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // case_oper ::= CASE valor NT$15 DP sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                    //Salto incondicional al final del switch
                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println("goto " + swOper.getEndSwitch() + ";");
                    // Etiqueta de fin del end_caseEtq
                    PLXC.out.println(SwichOperator.getEndCase(caseEtq)+ ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_oper",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$16 ::= 
            {
              Object RESULT =null;

            SwichOperator swOper = this.switch_operators.peek();
            PLXC.out.println("default_" + swOper.getEtiqSwitch() + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op_default ::= DEFAULT DP NT$16 sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declr ::= tipo ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (inic != null) {
            Instancia newVar;

            if (tipo != TString.getInstance())
                 newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            else
                 newVar = new StringInstancia(id);

            PLXC.tablaSimbolos.putObj(newVar);
            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }

        RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declr ::= tipo ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        if (inic != null) {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }


        RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declr ::= declr COMA ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (inic != null) {
                                      Instancia newVar;

                                      if (tipo != TString.getInstance())
                                           newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      else
                                           newVar = new StringInstancia(id);

                                      PLXC.tablaSimbolos.putObj(newVar);
                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }

                                  RESULT = tipo;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declr ::= declr COMA ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                  if (inic != null) {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);

                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }


                                  RESULT = tipo;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inic ::= ASIGNA expr 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inic ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list_id ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<String> start = new ArrayList<>();
            start.add(id);
            RESULT = start; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_id ::= list_id COMA ID 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  list.add(id); RESULT = list;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_valor ::= list_valor COMA valor 
            {
              List<Instancia> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);

            if (l.get(0).getTipoInstancia() != elem.getTipoInstancia())
                Objeto.errorYPara("[ERROR]\tEl elemento de la colección no es del mismo tipo que el resto", new Vector<>());

            l.add(elem);
            RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list_valor ::= valor 
            {
              List<Instancia> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);
            List<Instancia> start = new ArrayList<>();

            start.add(elem);

            RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= valor 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr_array 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = expr;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_id ::= ID 
            {
              Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Objeto aux = PLXC.tablaSimbolos.getObj(id, 0);
        Funcion f = null;
        if (!(aux instanceof Funcion)) {
            Objeto.errorYPara("[ERROR]\tLa funcion con id <" + "id" + "> no se encuentra ni declarada ni implementada", new Vector<>());
        } else {
            f = (Funcion) aux;

        }

        RESULT = f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= ID PUNTO LENGTH 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            checkVariable(id);
            Objeto a = PLXC.tablaSimbolos.getObj(id);

          if (!(a instanceof Instancia) && (((Instancia) a).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(a)));


          RESULT = a.metodos(TArray.ARRAY_METHODS.LENGTH.name(), new Vector<>());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= func_id AP list_valor CP 
            {
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> params = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        f.callFunction(new ArrayList(params));

        RESULT = f.getReturnInstancia();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= ID AC valor CC ASIGNA valor 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          // Checkear que el valor es una instancia y no es de tipo array
          checkVariable(id);
          // Checkear que le valor es del mismo que la variable
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable.getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("SET", new Vector<>(List.of(idx, valor)));
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor ::= ID ASIGNA expr 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                this.checkVariable(id); // Comprueba que la variable este declarada y que sea una instancia
                Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

                if (!(variable.getTipoInstancia() instanceof TArray)) {
                      this.checkType(valor, variable.getTipoInstancia()); // Comprueba que el tipo de la variable sea el mismo que el de la expresion o sean parseables entre sii
                }

                RESULT = variable.metodos("ASIGNA", new Vector<>(List.of(valor)));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor ::= AP tipo CP valor 
            {
              Objeto RESULT =null;
		int tipoDstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipoDstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipoDst = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

      if (exp instanceof Instancia) {
          Instancia aux = ((Instancia)exp).getTipoInstancia().cast(tipoDst, (Instancia) exp);
          if (aux != null) {
              RESULT = aux;
          } else {
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>());
          }
      } else {
          Objeto.errorYPara("[ERROR]\tNo se puede hacer un casting si el valor a asignar no es una instancia", new Vector<>());
      }

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor ::= ID 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  checkVariable(id); RESULT = PLXC.tablaSimbolos.getObj(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= ID AC valor CC 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          checkVariable(id);
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable.getTipoInstancia() instanceof TArray) && !(variable instanceof StringInstancia))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("GET", new Vector<>(List.of(idx)));

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= NUM_ENTERO 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TInt.getTInt(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor ::= NUM_REAL 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TFloat.getTFloat(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= CARACTER 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(c.toString(), TChar.getTChar(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= CADENA 
            {
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          char[] chars = s.toCharArray();
          StringInstancia res = new StringInstancia(chars);

          res = TString.asignaConstante(res, chars);

          RESULT = res;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor ::= expr_arit 
            {
              Objeto RESULT =null;
		int expr_aritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_aritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr_arit = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr_arit;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr_arit ::= AP valor CP 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = exp;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_arit ::= valor MAS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_arit ::= valor MENOS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr_arit ::= valor POR valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_arit ::= valor DIV valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_arit ::= MENOS valor 
            {
              Objeto RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exp.metodos("UMENOS", new Vector());       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_array ::= ALL list_valor CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Instancia res = new Instancia(new TArray(l.get(0).getTipoInstancia(), String.valueOf(l.size())));
                for (int i = 0; i < l.size(); i++) {
                     PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i).getNombre() + ";");
                }

                RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_array",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cond ::= AP cond CP 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cond ::= NOT cond 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("NOT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$17 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_and = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 0) goto " + end_and + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cond ::= cond AND NT$17 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_and + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$18 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_or = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 1) goto " + end_or + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cond ::= cond OR NT$18 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_or + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cond ::= valor GT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cond ::= valor LT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond ::= valor GE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cond ::= valor LE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cond ::= valor EQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("IGUAL", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cond ::= valor NEQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("DISTINTO", new Vector(List.of(b)));       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cond ::= FALSE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("0", TBool.getTBool(), TablaSimbolos.bloqueActual, false);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond ::= TRUE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("1", TBool.getTBool(), TablaSimbolos.bloqueActual, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TFloat.getTFloat();        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TChar.getTChar();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TString.getInstance();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipo ::= tipo ALL expr CLL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new TArray(t, exp.getNombre());        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= 
            {
              Tipo RESULT =null;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Init_Bloque ::= 
            {
              Integer RESULT =null;
		  RESULT = TablaSimbolos.newBloque();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Init_Bloque",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // and_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_end",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // or_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_end",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Get_BoolInstance ::= 
            {
              Objeto RESULT =null;
		 RESULT = new Instancia(TBool.getTBool());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Get_BoolInstance",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
