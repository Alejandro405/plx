
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java.util.Set;
import java.util.HashSet;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\030\004\000" +
    "\002\026\005\000\002\026\003\000\002\027\003\000\002" +
    "\027\002\000\002\023\010\000\002\061\002\000\002\025" +
    "\013\000\002\062\002\000\002\063\002\000\002\024\017" +
    "\000\002\005\006\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\007\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\022\004\000\002\022\002" +
    "\000\002\064\002\000\002\065\002\000\002\010\011\000" +
    "\002\066\002\000\002\012\012\000\002\014\003\000\002" +
    "\014\002\000\002\067\002\000\002\070\002\000\002\071" +
    "\002\000\002\072\002\000\002\013\017\000\002\073\002" +
    "\000\002\074\002\000\002\007\012\000\002\075\002\000" +
    "\002\076\002\000\002\034\012\000\002\034\004\000\002" +
    "\034\002\000\002\077\002\000\002\100\002\000\002\016" +
    "\014\000\002\017\004\000\002\017\003\000\002\101\002" +
    "\000\002\021\011\000\002\102\002\000\002\020\010\000" +
    "\002\103\002\000\002\104\002\000\002\015\014\000\002" +
    "\047\005\000\002\047\010\000\002\047\006\000\002\047" +
    "\011\000\002\060\004\000\002\060\002\000\002\045\005" +
    "\000\002\045\004\000\002\045\003\000\002\050\007\000" +
    "\002\050\005\000\002\040\003\000\002\040\005\000\002" +
    "\044\005\000\002\044\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\031\003\000\002\057\005" +
    "\000\002\057\006\000\002\057\010\000\002\057\005\000" +
    "\002\057\006\000\002\057\003\000\002\057\006\000\002" +
    "\057\005\000\002\057\005\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\004\000\002" +
    "\054\005\000\002\035\005\000\002\035\004\000\002\105" +
    "\002\000\002\035\006\000\002\106\002\000\002\035\006" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\003\000\002\035\003\000\002\046" +
    "\003\000\002\046\006\000\002\046\007\000\002\046\002" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\055\003\000\002\055\002\000\002\037\002\000\002\032" +
    "\002\000\002\033\002\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\054\004\046\006\051\016\054\017\013\020" +
    "\042\021\010\022\045\024\032\025\016\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\057\023\060\041\061" +
    "\014\062\052\063\053\070\033\001\002\000\004\002\373" +
    "\001\002\000\070\002\uffe6\004\uffe6\005\uffe6\006\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\036\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6\066\uffe6" +
    "\070\uffe6\072\uffe6\073\uffe6\001\002\000\070\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\036\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\065\ufffb\066\ufffb\070\ufffb\072\ufffb\073\ufffb\001" +
    "\002\000\070\002\ufffd\004\ufffd\005\ufffd\006\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\036\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\065\ufffd\066\ufffd\070" +
    "\ufffd\072\ufffd\073\ufffd\001\002\000\010\004\uff84\007\uff84" +
    "\026\uff84\001\002\000\070\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\036" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\065\ufffc" +
    "\066\ufffc\070\ufffc\072\ufffc\073\ufffc\001\002\000\006\012" +
    "\364\013\363\001\002\000\010\004\uff86\007\uff86\026\uff86" +
    "\001\002\000\004\006\336\001\002\000\050\005\uffa3\007" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\053\uffa3\001\002\000\010" +
    "\004\uff81\007\uff81\026\uff81\001\002\000\060\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\016\uffff\017\uffff\020\uffff\021\uffff" +
    "\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\036\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\063\uffff\070\uffff\001\002\000\070\002\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\036\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\065\uffe5\066\uffe5\070\uffe5\072\uffe5\073\uffe5\001\002\000" +
    "\070\002\uffe7\004\uffe7\005\uffe7\006\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\036\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\065\uffe7\066\uffe7\070\uffe7\072" +
    "\uffe7\073\uffe7\001\002\000\004\012\335\001\002\000\004" +
    "\006\314\001\002\000\064\005\uffa9\006\uffaf\007\uffa9\010" +
    "\301\011\uffa9\012\uffa9\013\uffa9\014\277\015\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\052\303\053\uffa9" +
    "\054\302\055\300\001\002\000\070\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\036\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\065\uffe8\066\uffe8\070\uffe8\072\uffe8\073\uffe8\001\002\000" +
    "\050\005\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\053\uffa2" +
    "\001\002\000\020\006\051\026\024\027\043\030\037\031" +
    "\015\032\026\036\027\001\002\000\070\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\036\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\065\uffe9\066\uffe9\070\uffe9\072\uffe9\073\uffe9\001\002" +
    "\000\014\012\275\035\107\036\102\037\104\040\111\001" +
    "\002\000\010\004\uff82\007\uff82\026\uff82\001\002\000\004" +
    "\006\245\001\002\000\070\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\036" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\065\ufffa" +
    "\066\ufffa\070\ufffa\072\ufffa\073\ufffa\001\002\000\050\005" +
    "\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\053\uffa1\001\002" +
    "\000\010\004\uff8a\007\uff8a\026\uff8a\001\002\000\050\005" +
    "\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\053\uffa4\001\002" +
    "\000\006\004\057\026\210\001\002\000\004\006\uffe1\001" +
    "\002\000\010\004\uff85\007\uff85\026\uff85\001\002\000\050" +
    "\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\053\uffa5\001" +
    "\002\000\004\006\177\001\002\000\010\004\uff83\007\uff83" +
    "\026\uff83\001\002\000\054\004\uff7e\006\uff7e\016\uff7e\017" +
    "\uff7e\020\uff7e\021\uff7e\022\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\032\uff7e\036\uff7e\057\uff7e\060" +
    "\uff7e\061\uff7e\062\uff7e\063\uff7e\070\uff7e\001\002\000\056" +
    "\002\000\004\046\006\051\016\054\017\013\020\042\021" +
    "\010\022\045\024\032\025\016\026\024\027\043\030\037" +
    "\031\015\032\026\036\027\057\023\060\041\061\014\062" +
    "\052\063\053\070\033\001\002\000\070\002\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\036\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\065\uffe4\066\uffe4\070\uffe4\072\uffe4\073\uffe4\001\002" +
    "\000\040\004\uff87\006\051\007\uff87\017\013\020\042\021" +
    "\010\022\045\024\032\025\016\026\024\027\043\030\037" +
    "\031\015\032\026\036\027\001\002\000\054\004\uffde\006" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\036" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\070\uffde" +
    "\001\002\000\004\006\157\001\002\000\022\004\uff87\017" +
    "\013\020\042\021\010\022\045\024\032\025\016\026\uff87" +
    "\001\002\000\006\004\057\026\056\001\002\000\006\012" +
    "\uffb7\052\150\001\002\000\032\004\061\005\063\006\066" +
    "\026\024\027\043\030\037\031\015\032\026\033\071\034" +
    "\064\036\027\051\062\001\002\000\004\005\uff80\001\002" +
    "\000\020\006\051\026\024\027\043\030\037\031\015\032" +
    "\026\036\027\001\002\000\026\006\066\026\024\027\043" +
    "\030\037\031\015\032\026\033\071\034\064\036\027\051" +
    "\062\001\002\000\004\004\140\001\002\000\050\005\uff8b" +
    "\007\uff8b\011\uff8b\012\uff8b\013\uff8b\015\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\050\uff8b\053\uff8b\001\002\000" +
    "\050\005\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2" +
    "\035\107\036\102\037\104\040\111\041\106\042\105\043" +
    "\113\044\112\045\110\046\103\047\uffb2\050\uffb2\053\uffb2" +
    "\001\002\000\046\004\uff87\006\066\007\uff87\017\013\020" +
    "\042\021\010\022\045\024\032\025\016\026\024\027\043" +
    "\030\037\031\015\032\026\033\071\034\064\036\027\051" +
    "\062\001\002\000\050\005\uffb0\007\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\015\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\074" +
    "\050\076\053\075\001\002\000\050\005\uffb1\007\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\015\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\053\uffb1\001\002\000\050\005\uff8c" +
    "\007\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\053\uff8c\001\002\000" +
    "\004\005\073\001\002\000\010\004\uff89\007\uff89\026\uff89" +
    "\001\002\000\026\006\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\036\uff97\051\uff97\001\002" +
    "\000\026\006\066\026\024\027\043\030\037\031\015\032" +
    "\026\033\071\034\064\036\027\051\062\001\002\000\026" +
    "\006\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\036\uff95\051\uff95\001\002\000\026\006\066" +
    "\026\024\027\043\030\037\031\015\032\026\033\071\034" +
    "\064\036\027\051\062\001\002\000\026\035\107\036\102" +
    "\037\104\040\111\041\106\042\105\043\113\044\112\045" +
    "\110\046\103\001\002\000\050\005\uff94\007\uff94\011\uff94" +
    "\012\uff94\013\uff94\015\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\074\050\uff94\053\075\001\002\000\020\006\051\026" +
    "\024\027\043\030\037\031\015\032\026\036\027\001\002" +
    "\000\020\006\051\026\024\027\043\030\037\031\015\032" +
    "\026\036\027\001\002\000\020\006\051\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\001\002\000\020\006" +
    "\051\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\001\002\000\020\006\051\026\024\027\043\030\037\031" +
    "\015\032\026\036\027\001\002\000\020\006\051\026\024" +
    "\027\043\030\037\031\015\032\026\036\027\001\002\000" +
    "\020\006\051\026\024\027\043\030\037\031\015\032\026" +
    "\036\027\001\002\000\020\006\051\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\001\002\000\020\006\051" +
    "\026\024\027\043\030\037\031\015\032\026\036\027\001" +
    "\002\000\020\006\051\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\001\002\000\050\005\uff91\007\uff91\011" +
    "\uff91\012\uff91\013\uff91\015\uff91\035\uff91\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\050\uff91\053\uff91\001\002\000\050\005\uff92" +
    "\007\uff92\011\uff92\012\uff92\013\uff92\015\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\047\uff92\050\uff92\053\uff92\001\002\000" +
    "\050\005\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\053\uff9c" +
    "\001\002\000\050\005\uff8f\007\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\015\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\053\uff8f\001\002\000\050\005\uff9f\007\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\015\uff9f\035\uff9f\036\uff9f\037\104\040" +
    "\111\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\053\uff9f\001\002\000\050\005\uff8e\007" +
    "\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\050\uff8e\053\uff8e\001\002\000\050" +
    "\005\uff8d\007\uff8d\011\uff8d\012\uff8d\013\uff8d\015\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\053\uff8d\001" +
    "\002\000\050\005\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\015\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\053\uff9d\001\002\000\050\005\uff90\007\uff90\011\uff90\012" +
    "\uff90\013\uff90\015\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047" +
    "\uff90\050\uff90\053\uff90\001\002\000\050\005\uff9e\007\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\015\uff9e\035\uff9e\036\uff9e\037" +
    "\104\040\111\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\053\uff9e\001\002\000\050\005" +
    "\uff93\007\uff93\011\uff93\012\uff93\013\uff93\015\uff93\035\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\053\uff93\001\002" +
    "\000\026\006\066\026\024\027\043\030\037\031\015\032" +
    "\026\033\071\034\064\036\027\051\062\001\002\000\050" +
    "\005\uff96\007\uff96\011\uff96\012\uff96\013\uff96\015\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\053\075\001" +
    "\002\000\006\004\057\007\136\001\002\000\030\007\135" +
    "\035\107\036\102\037\104\040\111\041\106\042\105\043" +
    "\113\044\112\045\110\046\103\001\002\000\012\007\134" +
    "\047\074\050\076\053\075\001\002\000\050\005\uff99\007" +
    "\uff99\011\uff99\012\uff99\013\uff99\015\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\053\uff99\001\002\000\050" +
    "\005\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\015\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\053\uffa0\001" +
    "\002\000\020\006\051\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\001\002\000\050\005\uffaa\007\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\015\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\053\uffaa\001\002\000\004\005\141" +
    "\001\002\000\010\004\uff88\007\uff88\026\uff88\001\002\000" +
    "\050\005\uff98\007\uff98\011\uff98\012\uff98\013\uff98\015\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\053\075" +
    "\001\002\000\020\005\uffb3\007\uffb3\013\uffb3\035\107\036" +
    "\102\037\104\040\111\001\002\000\006\005\146\013\145" +
    "\001\002\000\020\006\051\026\024\027\043\030\037\031" +
    "\015\032\026\036\027\001\002\000\050\005\uff9a\007\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\015\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\053\uff9a\001\002\000\020\005" +
    "\uffb4\007\uffb4\013\uffb4\035\107\036\102\037\104\040\111" +
    "\001\002\000\006\004\152\026\151\001\002\000\004\012" +
    "\uffb9\001\002\000\022\005\155\006\051\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\001\002\000\004\012" +
    "\uffb8\001\002\000\006\005\156\013\145\001\002\000\004" +
    "\012\uffba\001\002\000\004\012\uffbb\001\002\000\030\004" +
    "\061\006\066\026\024\027\043\030\037\031\015\032\026" +
    "\033\071\034\064\036\027\051\062\001\002\000\004\007" +
    "\161\001\002\000\004\012\162\001\002\000\070\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\036\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\065\uffea\066\uffea\070\uffea\072\uffea\073\uffea" +
    "\001\002\000\054\004\046\006\051\016\054\017\013\020" +
    "\042\021\010\022\045\024\032\025\016\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\057\023\060\041\061" +
    "\014\062\052\063\053\070\033\001\002\000\004\060\165" +
    "\001\002\000\004\006\166\001\002\000\026\006\066\026" +
    "\024\027\043\030\037\031\015\032\026\033\071\034\064" +
    "\036\027\051\062\001\002\000\012\007\170\047\074\050" +
    "\076\053\075\001\002\000\004\012\171\001\002\000\070" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\036\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\065\uffdd\066\uffdd\070\uffdd\072\uffdd" +
    "\073\uffdd\001\002\000\014\007\135\035\107\036\102\037" +
    "\104\040\111\001\002\000\060\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\036\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\070" +
    "\ufffe\001\002\000\054\004\046\006\051\016\054\017\013" +
    "\020\042\021\010\022\045\024\032\025\016\026\024\027" +
    "\043\030\037\031\015\032\026\036\027\057\023\060\041" +
    "\061\014\062\052\063\053\070\033\001\002\000\056\004" +
    "\046\005\176\006\051\016\054\017\013\020\042\021\010" +
    "\022\045\024\032\025\016\026\024\027\043\030\037\031" +
    "\015\032\026\036\027\057\023\060\041\061\014\062\052" +
    "\063\053\070\033\001\002\000\070\002\uffee\004\uffee\005" +
    "\uffee\006\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\036\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\065\uffee\066\uffee\070\uffee\072\uffee\073\uffee\001\002\000" +
    "\020\006\051\026\024\027\043\030\037\031\015\032\026" +
    "\036\027\001\002\000\006\007\201\013\145\001\002\000" +
    "\050\005\uffad\007\uffad\011\uffad\012\uffad\013\uffad\015\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\053\uffad" +
    "\001\002\000\004\006\203\001\002\000\026\006\066\026" +
    "\024\027\043\030\037\031\015\032\026\033\071\034\064" +
    "\036\027\051\062\001\002\000\012\007\205\047\074\050" +
    "\076\053\075\001\002\000\054\004\uffe0\006\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\036\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\070\uffe0\001\002\000" +
    "\054\004\046\006\051\016\054\017\013\020\042\021\010" +
    "\022\045\024\032\025\016\026\024\027\043\030\037\031" +
    "\015\032\026\036\027\057\023\060\041\061\014\062\052" +
    "\063\053\070\033\001\002\000\070\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\036\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\065\uffdf\066\uffdf\070\uffdf\072\uffdf\073\uffdf\001\002\000" +
    "\014\006\212\010\213\012\uffbc\013\uffbc\052\214\001\002" +
    "\000\006\012\uffc1\013\uffc1\001\002\000\024\004\uff87\007" +
    "\ufff5\017\013\020\042\021\010\022\045\024\032\025\016" +
    "\026\uff87\001\002\000\030\004\061\006\066\026\024\027" +
    "\043\030\037\031\015\032\026\033\071\034\064\036\027" +
    "\051\062\001\002\000\030\004\061\006\066\026\024\027" +
    "\043\030\037\031\015\032\026\033\071\034\064\036\027" +
    "\051\062\001\002\000\006\012\uffbd\013\uffbd\001\002\000" +
    "\004\011\217\001\002\000\010\012\uffbc\013\uffbc\052\214" +
    "\001\002\000\006\012\uffc0\013\uffc0\001\002\000\006\007" +
    "\ufff7\013\243\001\002\000\004\007\226\001\002\000\004" +
    "\007\ufff6\001\002\000\006\004\057\026\225\001\002\000" +
    "\006\007\ufff9\013\ufff9\001\002\000\006\004\227\012\230" +
    "\001\002\000\056\004\ufff1\006\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\036\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\070\ufff1\073\ufff1\001\002\000\070" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\036\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\065\ufff4\066\ufff4\070\ufff4\072\ufff4" +
    "\073\ufff4\001\002\000\056\004\uffe2\006\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\036\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\070\uffe2\073\uffe2\001\002" +
    "\000\056\004\uff87\006\051\016\054\017\013\020\042\021" +
    "\010\022\045\024\032\025\016\026\024\027\043\030\037" +
    "\031\015\032\026\036\027\057\023\060\041\061\014\062" +
    "\052\063\053\070\033\073\234\001\002\000\006\004\057" +
    "\026\242\001\002\000\030\004\061\006\066\026\024\027" +
    "\043\030\037\031\015\032\026\033\071\034\064\036\027" +
    "\051\062\001\002\000\056\004\uffe3\006\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\036\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\070\uffe3\073\uffe3\001\002" +
    "\000\004\012\237\001\002\000\004\005\ufff0\001\002\000" +
    "\004\005\241\001\002\000\070\002\uffef\004\uffef\005\uffef" +
    "\006\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\036\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\065" +
    "\uffef\066\uffef\070\uffef\072\uffef\073\uffef\001\002\000\012" +
    "\010\213\012\uffbc\013\uffbc\052\214\001\002\000\022\004" +
    "\uff87\017\013\020\042\021\010\022\045\024\032\025\016" +
    "\026\uff87\001\002\000\004\007\ufff8\001\002\000\020\006" +
    "\051\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\001\002\000\014\007\247\035\107\036\102\037\104\040" +
    "\111\001\002\000\004\004\250\001\002\000\004\067\uffcd" +
    "\001\002\000\004\067\253\001\002\000\006\067\253\071" +
    "\263\001\002\000\020\006\051\026\024\027\043\030\037" +
    "\031\015\032\026\036\027\001\002\000\006\067\uffc9\071" +
    "\uffc9\001\002\000\014\015\uffc8\035\107\036\102\037\104" +
    "\040\111\001\002\000\004\015\257\001\002\000\054\004" +
    "\046\006\051\016\054\017\013\020\042\021\010\022\045" +
    "\024\032\025\016\026\024\027\043\030\037\031\015\032" +
    "\026\036\027\057\023\060\041\061\014\062\052\063\053" +
    "\070\033\001\002\000\004\072\261\001\002\000\004\012" +
    "\262\001\002\000\006\067\uffc7\071\uffc7\001\002\000\004" +
    "\015\270\001\002\000\004\005\uffcc\001\002\000\006\067" +
    "\uffca\071\uffca\001\002\000\004\005\267\001\002\000\070" +
    "\002\uffcb\004\uffcb\005\uffcb\006\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\036\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\065\uffcb\066\uffcb\070\uffcb\072\uffcb" +
    "\073\uffcb\001\002\000\054\004\uffc6\006\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\036\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\070\uffc6\001\002\000\054" +
    "\004\046\006\051\016\054\017\013\020\042\021\010\022" +
    "\045\024\032\025\016\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\057\023\060\041\061\014\062\052\063" +
    "\053\070\033\001\002\000\004\072\273\001\002\000\004" +
    "\012\274\001\002\000\004\005\uffc5\001\002\000\070\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\036\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\065\uffed\066\uffed\070\uffed\072\uffed\073" +
    "\uffed\001\002\000\050\005\uff9b\007\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\015\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\053\uff9b\001\002\000\004\064\313\001\002\000" +
    "\020\006\051\026\024\027\043\030\037\031\015\032\026" +
    "\036\027\001\002\000\020\006\051\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\001\002\000\004\026\305" +
    "\001\002\000\030\004\061\006\066\026\024\027\043\030" +
    "\037\031\015\032\026\033\071\034\064\036\027\051\062" +
    "\001\002\000\050\005\uffab\007\uffab\011\uffab\012\uffab\013" +
    "\uffab\015\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050" +
    "\uffab\053\uffab\001\002\000\050\005\uffa7\007\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\015\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\053\uffa7\001\002\000\014\011\307\035" +
    "\107\036\102\037\104\040\111\001\002\000\052\005\uffa8" +
    "\007\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8\035\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\052\310\053\uffa8\001" +
    "\002\000\020\006\051\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\001\002\000\050\005\uffac\007\uffac\011" +
    "\uffac\012\uffac\013\uffac\015\uffac\035\107\036\102\037\104" +
    "\040\111\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\053\uffac\001\002\000\050\005\uffa6" +
    "\007\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\035\107\036" +
    "\102\037\104\040\111\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\053\uffa6\001\002\000" +
    "\050\005\uffae\007\uffae\011\uffae\012\uffae\013\uffae\015\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\053\uffae" +
    "\001\002\000\026\006\066\026\024\027\043\030\037\031" +
    "\015\032\026\033\071\034\064\036\027\051\062\001\002" +
    "\000\012\007\316\047\074\050\076\053\075\001\002\000" +
    "\054\004\uffd5\006\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\036\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\070\uffd5\001\002\000\054\004\046\006\051\016" +
    "\054\017\013\020\042\021\010\022\045\024\032\025\016" +
    "\026\024\027\043\030\037\031\015\032\026\036\027\057" +
    "\023\060\041\061\014\062\052\063\053\070\033\001\002" +
    "\000\070\002\uffd4\004\uffd4\005\uffd4\006\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\036\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\066\uffd4\070\uffd4" +
    "\072\uffd4\073\uffd4\001\002\000\070\002\uffce\004\uffce\005" +
    "\uffce\006\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\036\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\065\322\066\323\070\uffce\072\uffce\073\uffce\001\002\000" +
    "\054\004\046\006\051\016\054\017\013\020\042\021\010" +
    "\022\045\024\032\025\016\026\024\027\043\030\037\031" +
    "\015\032\026\036\027\057\023\060\041\061\014\062\052" +
    "\063\053\070\033\001\002\000\004\006\325\001\002\000" +
    "\070\002\uffd3\004\uffd3\005\uffd3\006\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\036\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\070\uffd3\072" +
    "\uffd3\073\uffd3\001\002\000\026\006\066\026\024\027\043" +
    "\030\037\031\015\032\026\033\071\034\064\036\027\051" +
    "\062\001\002\000\012\007\327\047\074\050\076\053\075" +
    "\001\002\000\054\004\uffd2\006\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\036\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\070\uffd2\001\002\000\054\004\046" +
    "\006\051\016\054\017\013\020\042\021\010\022\045\024" +
    "\032\025\016\026\024\027\043\030\037\031\015\032\026" +
    "\036\027\057\023\060\041\061\014\062\052\063\053\070" +
    "\033\001\002\000\070\002\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\036\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\065\uffd1\066" +
    "\uffd1\070\uffd1\072\uffd1\073\uffd1\001\002\000\070\002\uffce" +
    "\004\uffce\005\uffce\006\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\036\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\065\322\066\323\070\uffce\072\uffce\073\uffce" +
    "\001\002\000\070\002\uffd0\004\uffd0\005\uffd0\006\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\036\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\066\uffd0" +
    "\070\uffd0\072\uffd0\073\uffd0\001\002\000\070\002\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\036\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\065\uffcf\066\uffcf\070\uffcf\072\uffcf\073\uffcf\001" +
    "\002\000\070\002\uffeb\004\uffeb\005\uffeb\006\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\036\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\065\uffeb\066\uffeb\070" +
    "\uffeb\072\uffeb\073\uffeb\001\002\000\040\004\uff87\006\051" +
    "\012\uffdb\017\013\020\042\021\010\022\045\024\032\025" +
    "\016\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\001\002\000\006\004\057\026\354\001\002\000\016\007" +
    "\uffdc\012\uffdc\035\107\036\102\037\104\040\111\001\002" +
    "\000\004\012\uffda\001\002\000\004\012\343\001\002\000" +
    "\026\006\066\026\024\027\043\030\037\031\015\032\026" +
    "\033\071\034\064\036\027\051\062\001\002\000\012\012" +
    "\uffd9\047\074\050\076\053\075\001\002\000\004\012\346" +
    "\001\002\000\022\006\051\007\uffdb\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\001\002\000\004\007\uffd8" +
    "\001\002\000\004\007\351\001\002\000\054\004\uffd7\006" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\036" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\070\uffd7" +
    "\001\002\000\054\004\046\006\051\016\054\017\013\020" +
    "\042\021\010\022\045\024\032\025\016\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\057\023\060\041\061" +
    "\014\062\052\063\053\070\033\001\002\000\070\002\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\036\uffd6\057\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\065\uffd6\066\uffd6\070\uffd6\072\uffd6\073\uffd6" +
    "\001\002\000\004\015\uffc4\001\002\000\004\015\356\001" +
    "\002\000\030\004\061\006\066\026\024\027\043\030\037" +
    "\031\015\032\026\033\071\034\064\036\027\051\062\001" +
    "\002\000\004\007\360\001\002\000\054\004\uffc3\006\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\036\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\070\uffc3\001" +
    "\002\000\054\004\046\006\051\016\054\017\013\020\042" +
    "\021\010\022\045\024\032\025\016\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\057\023\060\041\061\014" +
    "\062\052\063\053\070\033\001\002\000\070\002\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\036\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\065\uffc2\066\uffc2\070\uffc2\072\uffc2\073\uffc2\001" +
    "\002\000\004\026\365\001\002\000\070\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\036\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\065\uffec\066\uffec\070\uffec\072\uffec\073\uffec\001\002" +
    "\000\012\010\367\012\uffbc\013\uffbc\052\214\001\002\000" +
    "\006\012\uffbf\013\uffbf\001\002\000\030\004\061\006\066" +
    "\026\024\027\043\030\037\031\015\032\026\033\071\034" +
    "\064\036\027\051\062\001\002\000\004\011\371\001\002" +
    "\000\010\012\uffbc\013\uffbc\052\214\001\002\000\006\012" +
    "\uffbe\013\uffbe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\052\002\003\003\046\004\016\005\006\006" +
    "\010\007\027\010\024\012\020\013\004\015\047\016\017" +
    "\023\005\024\033\031\043\046\037\047\011\050\021\051" +
    "\035\056\034\057\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\043\056\034\057\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\173\001" +
    "\001\000\046\004\172\005\006\006\010\007\027\010\024" +
    "\012\020\013\004\015\047\016\017\023\005\024\033\031" +
    "\043\046\037\047\011\050\021\051\035\056\034\057\030" +
    "\001\001\000\002\001\001\000\014\031\043\046\130\051" +
    "\035\056\034\057\171\001\001\000\004\066\162\001\001" +
    "\000\002\001\001\000\006\046\054\051\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\043\035\066" +
    "\053\057\054\067\055\071\056\034\057\064\001\001\000" +
    "\002\001\001\000\012\031\043\044\143\056\034\057\142" +
    "\001\001\000\012\031\043\035\141\056\034\057\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\031\043\035\132\046\130\051\035\056\034\057" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\126\001\001\000\012\031\043\035\125\056\034\057\077" +
    "\001\001\000\004\106\076\001\001\000\012\031\043\035" +
    "\100\056\034\057\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\043\056\034\057\124\001\001\000" +
    "\010\031\043\056\034\057\123\001\001\000\010\031\043" +
    "\056\034\057\122\001\001\000\010\031\043\056\034\057" +
    "\121\001\001\000\010\031\043\056\034\057\120\001\001" +
    "\000\010\031\043\056\034\057\117\001\001\000\010\031" +
    "\043\056\034\057\116\001\001\000\010\031\043\056\034" +
    "\057\115\001\001\000\010\031\043\056\034\057\114\001" +
    "\001\000\010\031\043\056\034\057\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\043\035\127\056\034\057\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\043\056\034\057\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\043\056" +
    "\034\057\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\152\001\001\000\002\001\001\000\012\031" +
    "\043\044\153\056\034\057\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\043\035\066\053\157\054\067\056\034\057\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\163\005\006\006\010\007\027\010\024" +
    "\012\020\013\004\015\047\016\017\023\005\024\033\031" +
    "\043\046\037\047\011\050\021\051\035\056\034\057\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\043\035\166\056\034\057\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\174\004\016\005\006\006\010" +
    "\007\027\010\024\012\020\013\004\015\047\016\017\023" +
    "\005\024\033\031\043\046\037\047\011\050\021\051\035" +
    "\056\034\057\030\001\001\000\046\004\172\005\006\006" +
    "\010\007\027\010\024\012\020\013\004\015\047\016\017" +
    "\023\005\024\033\031\043\046\037\047\011\050\021\051" +
    "\035\056\034\057\030\001\001\000\002\001\001\000\012" +
    "\031\043\044\177\056\034\057\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\043" +
    "\035\203\056\034\057\077\001\001\000\002\001\001\000" +
    "\004\065\205\001\001\000\046\004\206\005\006\006\010" +
    "\007\027\010\024\012\020\013\004\015\047\016\017\023" +
    "\005\024\033\031\043\046\037\047\011\050\021\051\035" +
    "\056\034\057\030\001\001\000\002\001\001\000\004\060" +
    "\210\001\001\000\002\001\001\000\014\026\222\027\221" +
    "\030\220\046\223\051\035\001\001\000\016\031\043\035" +
    "\066\053\215\054\067\056\034\057\064\001\001\000\016" +
    "\031\043\035\066\053\214\054\067\056\034\057\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\230\001\001\000\002\001" +
    "\001\000\004\022\231\001\001\000\036\006\234\007\027" +
    "\010\024\012\020\013\004\015\047\016\017\031\043\046" +
    "\232\047\011\050\021\051\035\056\034\057\030\001\001" +
    "\000\002\001\001\000\016\031\043\035\066\053\235\054" +
    "\067\056\034\057\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\210\001\001\000\012\026\243" +
    "\030\220\046\223\051\035\001\001\000\002\001\001\000" +
    "\010\031\043\056\034\057\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\250\001\001\000\006\017" +
    "\251\021\253\001\001\000\006\020\263\021\264\001\001" +
    "\000\010\031\043\056\034\057\254\001\001\000\002\001" +
    "\001\000\004\101\255\001\001\000\002\001\001\000\046" +
    "\004\257\005\006\006\010\007\027\010\024\012\020\013" +
    "\004\015\047\016\017\023\005\024\033\031\043\046\037" +
    "\047\011\050\021\051\035\056\034\057\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\270\001\001" +
    "\000\046\004\271\005\006\006\010\007\027\010\024\012" +
    "\020\013\004\015\047\016\017\023\005\024\033\031\043" +
    "\046\037\047\011\050\021\051\035\056\034\057\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\031\043\056\034\057\311\001\001\000\010\031\043" +
    "\056\034\057\305\001\001\000\002\001\001\000\016\031" +
    "\043\035\066\053\303\054\067\056\034\057\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\043\056\034\057\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\043\035\314\056\034\057\077\001\001\000\002" +
    "\001\001\000\004\073\316\001\001\000\046\004\317\005" +
    "\006\006\010\007\027\010\024\012\020\013\004\015\047" +
    "\016\017\023\005\024\033\031\043\046\037\047\011\050" +
    "\021\051\035\056\034\057\030\001\001\000\004\074\320" +
    "\001\001\000\004\034\323\001\001\000\046\004\333\005" +
    "\006\006\010\007\027\010\024\012\020\013\004\015\047" +
    "\016\017\023\005\024\033\031\043\046\037\047\011\050" +
    "\021\051\035\056\034\057\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\043\035\325\056\034\057" +
    "\077\001\001\000\002\001\001\000\004\075\327\001\001" +
    "\000\046\004\330\005\006\006\010\007\027\010\024\012" +
    "\020\013\004\015\047\016\017\023\005\024\033\031\043" +
    "\046\037\047\011\050\021\051\035\056\034\057\030\001" +
    "\001\000\004\076\331\001\001\000\004\034\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\340\031\043\046\336\051\035\056\034\057\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\341\001\001\000\002\001\001\000\012\031\043\035\343" +
    "\056\034\057\077\001\001\000\004\070\344\001\001\000" +
    "\002\001\001\000\012\014\346\031\043\056\034\057\337" +
    "\001\001\000\004\071\347\001\001\000\002\001\001\000" +
    "\004\072\351\001\001\000\046\004\352\005\006\006\010" +
    "\007\027\010\024\012\020\013\004\015\047\016\017\023" +
    "\005\024\033\031\043\046\037\047\011\050\021\051\035" +
    "\056\034\057\030\001\001\000\002\001\001\000\004\103" +
    "\354\001\001\000\002\001\001\000\016\031\043\035\066" +
    "\053\356\054\067\056\034\057\064\001\001\000\002\001" +
    "\001\000\004\104\360\001\001\000\046\004\361\005\006" +
    "\006\010\007\027\010\024\012\020\013\004\015\047\016" +
    "\017\023\005\024\033\031\043\046\037\047\011\050\021" +
    "\051\035\056\034\057\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\365\001\001" +
    "\000\002\001\001\000\016\031\043\035\066\053\367\054" +
    "\067\056\034\057\064\001\001\000\002\001\001\000\004" +
    "\060\371\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                Symbol value = (Symbol)info;
                System.err.print(" (linea "+line+", colonna "+column+", símbolo " + sym.terminalNames[value.sym] + "): " + value.toString());
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public void checkVariable(Objeto obj) {
          if (obj == null)
              Objeto.errorYPara("[ERROR]\tLa variable no ha sido declarada", new Vector<>(List.of(obj)));

          if (!(obj instanceof Instancia))
              Objeto.errorYPara("[ERROR]\tLa variable no es una instancia", new Vector<>(List.of(obj)));
    }

    public void checkVariable(String id) {
        checkVariable(PLXC.tablaSimbolos.getObj(id));
    }

    public void checkType(Objeto obj, Tipo tipo) {
        if (!(obj instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(obj, tipo)));
        Instancia aux = (Instancia) obj;
        if (!aux.getTipoInstancia().isParseable(tipo) )// || aux.getTipoInstancia().getClass() != tipo.getClass()
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>(List.of(obj, tipo)));
    }

    public Instancia checkElem(Objeto valor) {
        if (!(valor instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede formar una coleccion de elementos sin instancias de un mismo tipo mismo tipo", new Vector<>(List.of(valor)));

       return (Instancia) valor;
    }

    private String end_and = "", end_or = "";
    private Stack<String> if_tags = new Stack<>();
    private Stack<SwichOperator> switch_operators = new Stack<>();
    private Stack<Funcion> Funciones = new Stack<>();
    private Objeto res_bool;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= lista_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= declr_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= impl_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // param ::= tipo ID 
            {
              Instancia RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idParamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idParamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idParam = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Crear una entrada para el diccionario que almacena los parámetros <Tipo, Instancia>
        Instancia res = null;

        if (tipo == TString.getInstance()) {
            res = new StringInstancia(idParam);
        } else if (tipo instanceof TArray) {
            //generar otro parámetro extra que añadirá el compilador, el tamaño del array
        }else {
            res = new Instancia(idParam, tipo, 0, true);
        }

        RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_param ::= param COMA list_param 
            {
              Set<Instancia> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instancia p = (Instancia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<Instancia> s = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            s.add(p);

            RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_param ::= param 
            {
              Set<Instancia> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instancia p = (Instancia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Set<Instancia> start = new HashSet();

            start.add(p);

            RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= list_param 
            {
              Set<Instancia> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Set<Instancia> l = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= 
            {
              Set<Instancia> RESULT =null;
		RESULT = new HashSet<>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declr_func ::= tipo ID AP params CP PYC 
            {
              Object RESULT =null;
		int tipoRetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tipoRetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipoRet = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Funcion f = new Funcion(id, tipoRet, params);

            f.setImplemented(false);

            PLXC.tablaSimbolos.putFunction(f);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_func",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                Procedure proced = null;

                if (!PLXC.tablaSimbolos.containsFunction(TVoid.getTVoid(), id)) {
                    proced = new Procedure(id, params);
                    PLXC.tablaSimbolos.putFunction(proced);
                } else {
                    proced = (Procedure) PLXC.tablaSimbolos.getFunction(TVoid.getTVoid(), id);
                }

                PLXC.out.println();
                PLXC.out.println("goto " + proced.getEndFuncition() + ";");
                PLXC.out.println(proced.getInicFuncition() + ":");
                proced.initCallParams(new ArrayList<>(params));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // impl_procedure ::= VOID ID AP params CP ALL NT$0 list_sent_simpl CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impl_procedure",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

            Funcion f = null;
            if (!PLXC.tablaSimbolos.containsFunction(tipo, id)) {
                f = new Funcion(id, tipo, params);
                PLXC.tablaSimbolos.putFunction(f);
            } else {
                f = PLXC.tablaSimbolos.getFunction(tipo, id);
            }

            PLXC.out.println();
            PLXC.out.println("goto " + f.getEndFuncition() + ";");
            PLXC.out.println(f.getInicFuncition() + ":");
            f.initCallParams(new ArrayList<>(params));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

            if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != tipo) {
                Objeto.errorYPara("[ERROR]\tLa expresin de retorno no casa con el tipo de la función", new Vector<>(List.of(expr, tipo)));
            }

            Funcion f = PLXC.tablaSimbolos.getFunction(tipo, id);
            f.retornaResultado((Instancia) expr);
            f.setImplemented(true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // impl_func ::= tipo ID AP params CP ALL NT$1 list_sent_simpl RETURN expr PYC NT$2 CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Set<Instancia> params = (Set<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impl_func",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_comp ::= ALL Init_Bloque lista_sent CLL 
            {
              Object RESULT =null;
		int bloquePrevioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloquePrevioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloquePrevio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  PLXC.tablaSimbolos.delBlock();
                  TablaSimbolos.bloqueActual = bloquePrevio;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent_simpl ::= valor PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sent_simpl ::= declr PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent_simpl ::= declr_conj PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sent_simpl ::= PRINT AP expr CP PYC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if (valor != null) RESULT = valor.metodos("PRINT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent_simpl ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent_simpl ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent_simpl ::= sent_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent_simpl ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent_simpl ::= sent_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent_simpl ::= sent_foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_sent_simpl ::= list_sent_simpl sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_sent_simpl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Object RESULT =null;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println(whileTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + whileTag + ";");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent_while ::= WHILE NT$3 AP cond CP NT$4 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    PLXC.out.println("goto " + whileTag + ";");
                       PLXC.out.println("end_" + whileTag + " :");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Object RESULT =null;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println("DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent_do_while ::= DO NT$5 sent WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        PLXC.out.println("if (" + c.getNombre() + " == 1) goto DO_" + doTag + " ;");
                        PLXC.out.println("END_DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_expr ::= valor 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$6 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println(forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + forTag + ";");
                PLXC.out.println("goto body_" + forTag + ";");
                PLXC.out.println("act_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("goto " + forTag + ";");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                PLXC.out.println("body_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sent_for ::= FOR AP for_expr NT$6 PYC cond NT$7 PYC for_expr NT$8 CP NT$9 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                PLXC.out.println("goto act_" + forTag + ";");
                PLXC.out.println("end_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$10 ::= 
            {
              Object RESULT =null;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    this.if_tags.push(ifTag);
    PLXC.out.println("if (" + c.getNombre() + " == 0) goto else_" + ifTag + " ;");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

            PLXC.out.println("goto end_" + ifTag + " ;");
            PLXC.out.println("else_" + ifTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sent_if ::= IF AP cond CP NT$10 sent NT$11 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
            PLXC.out.println("end_" + ifTag + ":");
            this.if_tags.pop();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$12 ::= 
            {
              String RESULT =null;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    PLXC.out.println(" if (" + c.getNombre() + " == 0) goto else_" + elseIfTag + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$13 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                PLXC.out.println("goto end_" + this.if_tags.peek() + ";");
                PLXC.out.println("else_" + elseIfTag + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // else_if ::= ELSEIF AP cond CP NT$12 sent NT$13 else_if 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // else_if ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_if ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$14 ::= 
            {
              Object RESULT =null;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    // Checkear que la expresion es una instancia de tipo entero
                    if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));
                    SwichOperator swOper = new SwichOperator(switchTag, (Instancia) expr);
                    this.switch_operators.push(swOper);

                    PLXC.out.println(swOper.getEtiqSwitch() + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println(swOper.getEndSwitch() + ":");
                    this.switch_operators.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sent_switch ::= SWITCH AP valor CP ALL NT$14 list_case op_default NT$15 CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_case ::= list_case case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_case ::= case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$16 ::= 
            {
              Object RESULT =null;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                  // Checkear que el valor sea una instancia de tipo entero
                  if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));

                  SwichOperator swOper = this.switch_operators.peek();
                  // if (switchExpr != expr) goto end_caseEtq ;
                  PLXC.out.println(SwichOperator.genCase(caseEtq) + ":");
                  PLXC.out.println("if (" + swOper.getExpr().getNombre() + " != " + expr.getNombre() + ") goto " + SwichOperator.getEndCase(caseEtq) + ";");
                  swOper.addCase(caseEtq);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // case_oper ::= CASE valor NT$16 DP sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                    //Salto incondicional al final del switch
                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println("goto " + swOper.getEndSwitch() + ";");
                    // Etiqueta de fin del end_caseEtq
                    PLXC.out.println(SwichOperator.getEndCase(caseEtq)+ ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_oper",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$17 ::= 
            {
              Object RESULT =null;

            SwichOperator swOper = this.switch_operators.peek();
            PLXC.out.println("default_" + swOper.getEtiqSwitch() + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op_default ::= DEFAULT DP NT$17 sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$18 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                // Añadir la variable itradora a la tablade símbolos
                Instancia iter = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                PLXC.tablaSimbolos.putObj(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                // Checkear si la expresion es iterable
                if (!(expr instanceof Instancia) || !((Instancia)expr).getTipoInstancia().isIterable())
                    Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each no es iterable.", new Vector<>(List.of(expr)));

                if (expr instanceof SetInstance) {
                    SetInstance set = (SetInstance) expr;
                    Instancia iter = new Instancia(set.getTipoInstancia());

                    set.iterate(iter);
                } else {
                    // En caso de serlo, declarar la etiqueta del búcle y asignar valor a la variable iteradora
                    Instancia index = new Instancia("$_FOREACH_IDX_".concat(forTag), TInt.getTInt(), TablaSimbolos.bloqueActual, true);
                    PLXC.tablaSimbolos.putObj(index);
                    Instancia iter = (Instancia) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
                    Instancia colec = (Instancia) expr;

                    PLXC.out.println(index.getNombre() + " = 0;");
                    PLXC.out.println("foreach_" + forTag + ":");

                    if (colec instanceof StringInstancia) {
                        if (iter.getTipoInstancia() != TChar.getTChar())
                            Objeto.errorYPara("[ERROR]\tLa variable iteradora del búcle for each necesita ser de tipo char.", new Vector<>(List.of(iter)));

                        StringInstancia.iterate(index, (StringInstancia) colec, iter, "end_foreach_".concat(forTag));
                    } else if (colec.getTipoInstancia() == TString.getInstance()){
                        Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each necesita un StringInstance no una instancia de tipo String.", new Vector<>(List.of(expr)));
                    } else if (colec.getTipoInstancia() instanceof TArray) {
                        TArray.iterate(index, (TArray) colec.getTipoInstancia(), colec, iter, "end_foreach_".concat(forTag));
                    }


                    // Instanciar la variable índice con la que se hará en control y acceso a los elementos
                    // (Sentencia de control, la colección ha de contener el número de iteraciones)
                }

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sent_foreach ::= FOR AP tipo ID NT$18 DP expr CP NT$19 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                // Resetear el iterador
                Instancia idx = (Instancia) PLXC.tablaSimbolos.getObj("$_FOREACH_IDX_".concat(forTag), TablaSimbolos.bloqueActual);

                idx.metodos("INCREMENTA_1", new Vector<>());
                PLXC.out.println("goto foreach_" + forTag + ";");
                PLXC.out.println("end_foreach_" + forTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_foreach",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declr ::= tipo ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (inic != null) {
            Instancia newVar;

            if (tipo != TString.getInstance())
                 newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            else
                 newVar = new StringInstancia(id);

            PLXC.tablaSimbolos.putObj(newVar);
            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }

        RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declr ::= tipo ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        if (inic != null) {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }


        RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declr ::= declr COMA ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (inic != null) {
                                      Instancia newVar;

                                      if (tipo != TString.getInstance())
                                           newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      else
                                           newVar = new StringInstancia(id);

                                      PLXC.tablaSimbolos.putObj(newVar);
                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }

                                  RESULT = tipo;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declr ::= declr COMA ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                  if (inic != null) {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);

                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }


                                  RESULT = tipo;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inic ::= ASIGNA expr 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inic ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // set_value ::= ALL list_valor CLL 
            {
              List<Instancia> RESULT =null;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> inic = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inic;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // set_value ::= ALL CLL 
            {
              List<Instancia> RESULT =null;
		 RESULT = new ArrayList<Instancia>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // set_value ::= ID 
            {
              List<Instancia> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto expr = PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
            if (!(expr instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa expresion proporcionada como set value no es una instancia de SetInstace", new Vector<>(List.of(expr)));
            } else {
                SetInstance setValue = (SetInstance) expr;
                RESULT = setValue.getElems();
            }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declr_conj ::= SET tipo ID ASIGNA set_value 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instancia> inic = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Instancia newVariable = new SetInstance(id, tipo, inic, TablaSimbolos.bloqueActual, true);

        PLXC.tablaSimbolos.putObj(newVariable);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_conj",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declr_conj ::= SET tipo ID 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            SetInstance newVar = new SetInstance(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_conj",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list_id ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<String> start = new ArrayList<>();
            start.add(id);
            RESULT = start; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // list_id ::= list_id COMA ID 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  list.add(id); RESULT = list;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // list_valor ::= list_valor COMA valor 
            {
              List<Instancia> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);

            if (l.get(0).getTipoInstancia() != elem.getTipoInstancia())
                Objeto.errorYPara("[ERROR]\tEl elemento de la colección no es del mismo tipo que el resto", new Vector<>());

            l.add(elem);
            RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // list_valor ::= valor 
            {
              List<Instancia> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);
            List<Instancia> start = new ArrayList<>();

            start.add(elem);

            RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= valor 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr_array 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = expr;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= cond 
            {
              Objeto RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto cond = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = cond;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // func_id ::= ID 
            {
              Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Objeto aux = PLXC.tablaSimbolos.getObj(id, 0);
        Funcion f = null;
        if (!(aux instanceof Funcion)) {
            Objeto.errorYPara("[ERROR]\tLa funcion con id <" + "id" + "> no se encuentra ni declarada ni implementada", new Vector<>());
        } else {
            f = (Funcion) aux;

        }

        RESULT = f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= ID PUNTO LENGTH 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            checkVariable(id);
            Objeto a = PLXC.tablaSimbolos.getObj(id);

          if (!(a instanceof Instancia) && (((Instancia) a).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(a)));


          RESULT = a.metodos(TArray.ARRAY_METHODS.LENGTH.name(), new Vector<>());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor ::= func_id AP list_valor CP 
            {
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> params = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        f.callFunction(new ArrayList(params));

        RESULT = f.getReturnInstancia();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor ::= ID AC valor CC ASIGNA valor 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          // Checkear que el valor es una instancia y no es de tipo array
          checkVariable(id);
          // Checkear que le valor es del mismo que la variable
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable.getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("SET", new Vector<>(List.of(idx, valor)));
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor ::= ID ASIGNA expr 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                this.checkVariable(id); // Comprueba que la variable este declarada y que sea una instancia
                Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

                if (!(variable.getTipoInstancia() instanceof TArray)) {
                      this.checkType(valor, variable.getTipoInstancia()); // Comprueba que el tipo de la variable sea el mismo que el de la expresion o sean parseables entre sii
                }

                variable.metodos("ASIGNA", new Vector<>(List.of(valor)));

                RESULT = valor;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor ::= AP tipo CP valor 
            {
              Objeto RESULT =null;
		int tipoDstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipoDstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipoDst = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

      if (exp instanceof Instancia) {
          Instancia aux = ((Instancia)exp).getTipoInstancia().cast(tipoDst, (Instancia) exp);
          if (aux != null) {
              RESULT = aux;
          } else {
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>());
          }
      } else {
          Objeto.errorYPara("[ERROR]\tNo se puede hacer un casting si el valor a asignar no es una instancia", new Vector<>());
      }

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor ::= ID 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  checkVariable(id); RESULT = PLXC.tablaSimbolos.getObj(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor ::= ID AC valor CC 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          checkVariable(id);
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable instanceof Instancia) && (((Instancia) variable).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("GET", new Vector<>(List.of(idx)));

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor ::= ID UNION ID 
            {
              Objeto RESULT =null;
		int idAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idB = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            SetInstance a = null, b = null;
            Objeto aux = PLXC.tablaSimbolos.getObj(idA, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                a = (SetInstance) aux;
            }

            aux = PLXC.tablaSimbolos.getObj(idB, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                b = (SetInstance) aux;
            }

            RESULT = a.metodos(TSet.SET_METHODS.UNION.name(), new Vector<>(List.of(b)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= ID ADD valor 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto value = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       if (!(value instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se pueden añadir elementos a un conjunto si estos no son instancias", new Vector<>(List.of(value)));

       SetInstance set = (SetInstance) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
       Instancia elem = (Instancia) value;

       RESULT = set.metodos(TSet.SET_METHODS.ADD.name(), new Vector<>(List.of(elem)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= NUM_ENTERO 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TInt.getTInt(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= NUM_REAL 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TFloat.getTFloat(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= CARACTER 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(c.toString(), TChar.getTChar(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= CADENA 
            {
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          char[] chars = s.toCharArray();
          StringInstancia res = new StringInstancia(chars);

          res = TString.asignaConstante(res, chars);

          RESULT = res;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor ::= expr_arit 
            {
              Objeto RESULT =null;
		int expr_aritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_aritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr_arit = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr_arit;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_arit ::= AP valor CP 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = exp;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_arit ::= valor MAS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_arit ::= valor MENOS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_arit ::= valor POR valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_arit ::= valor DIV valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_arit ::= MENOS valor 
            {
              Objeto RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exp.metodos("UMENOS", new Vector());       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_array ::= ALL list_valor CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Instancia res = new Instancia(new TArray(l.get(0).getTipoInstancia(), String.valueOf(l.size())));
                for (int i = 0; i < l.size(); i++) {
                     PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i).getNombre() + ";");
                }

                RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_array",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cond ::= AP cond CP 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cond ::= NOT cond 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("NOT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$20 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_and = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 0) goto " + end_and + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cond ::= cond AND NT$20 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_and + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$21 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_or = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 1) goto " + end_or + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cond ::= cond OR NT$21 cond 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_or + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cond ::= cond IMPLICA cond 
            {
              Objeto RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto q = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		



              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cond ::= valor GT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cond ::= valor LT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cond ::= valor GE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cond ::= valor LE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cond ::= valor EQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("IGUAL", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // cond ::= valor NEQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("DISTINTO", new Vector(List.of(b)));       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cond ::= FALSE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("0", TBool.getTBool(), TablaSimbolos.bloqueActual, false);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cond ::= TRUE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("1", TBool.getTBool(), TablaSimbolos.bloqueActual, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipo ::= tipo_primit 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipo ::= tipo ALL array_length CLL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

        if (exp != null) {
            RESULT = new TArray(t, exp.getNombre());
        } else {
            RESULT = new TArray(t);
        }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipo ::= tipo ALL CLL ALL CLL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		

        TArray tfila = new TArray(t);
        TArray tmatriz = new TArray(tfila);

        RESULT = tmatriz;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipo ::= 
            {
              Tipo RESULT =null;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipo_primit ::= INT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tipo_primit ::= FLOAT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TFloat.getTFloat();        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo_primit ::= CHAR 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TChar.getTChar();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo_primit ::= STRING 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TString.getInstance();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo_primit ::= VOID 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TVoid.getTVoid();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tipo_primit ::= BOOL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TBool.getTBool();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // array_length ::= expr 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_length",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // array_length ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_length",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Init_Bloque ::= 
            {
              Integer RESULT =null;
		  RESULT = TablaSimbolos.newBloque();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Init_Bloque",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // and_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_end",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // or_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_end",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Get_BoolInstance ::= 
            {
              Objeto RESULT =null;
		 RESULT = new Instancia(TBool.getTBool());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Get_BoolInstance",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
