
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java.util.Set;
import java.util.HashSet;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\006\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\007\000\002\006\007\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\022\004\000\002\022\002\000" +
    "\002\061\002\000\002\062\002\000\002\010\011\000\002" +
    "\063\002\000\002\012\012\000\002\014\003\000\002\014" +
    "\002\000\002\064\002\000\002\065\002\000\002\066\002" +
    "\000\002\067\002\000\002\013\017\000\002\070\002\000" +
    "\002\071\002\000\002\007\012\000\002\072\002\000\002" +
    "\073\002\000\002\034\012\000\002\034\004\000\002\034" +
    "\002\000\002\074\002\000\002\075\002\000\002\016\014" +
    "\000\002\017\004\000\002\017\003\000\002\076\002\000" +
    "\002\021\011\000\002\077\002\000\002\020\010\000\002" +
    "\100\002\000\002\101\002\000\002\015\014\000\002\047" +
    "\005\000\002\047\010\000\002\047\006\000\002\047\011" +
    "\000\002\060\004\000\002\060\002\000\002\045\005\000" +
    "\002\045\004\000\002\045\003\000\002\050\007\000\002" +
    "\050\005\000\002\040\003\000\002\040\005\000\002\044" +
    "\005\000\002\044\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\057\005\000\002\057\006\000" +
    "\002\057\010\000\002\057\005\000\002\057\006\000\002" +
    "\057\003\000\002\057\006\000\002\057\005\000\002\057" +
    "\005\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\004\000\002\054\005\000\002\035" +
    "\005\000\002\035\004\000\002\102\002\000\002\035\006" +
    "\000\002\103\002\000\002\035\006\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\035\003\000\002\046\003\000\002\046\006" +
    "\000\002\046\007\000\002\046\002\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\055\003\000\002\055" +
    "\002\000\002\037\002\000\002\032\002\000\002\033\002" +
    "\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\054\004\046\006\051\016\054\017\013\020" +
    "\042\021\010\022\045\024\032\025\016\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\057\023\060\041\061" +
    "\014\062\053\063\052\070\033\001\002\000\004\002\351" +
    "\001\002\000\066\002\ufff0\004\ufff0\005\ufff0\006\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\036\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0\066\ufff0" +
    "\070\ufff0\072\ufff0\001\002\000\066\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\036\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb" +
    "\065\ufffb\066\ufffb\070\ufffb\072\ufffb\001\002\000\066\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\036\ufffd\057\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\065\ufffd\066\ufffd\070\ufffd\072\ufffd\001" +
    "\002\000\010\004\uff8f\007\uff8f\026\uff8f\001\002\000\066" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\036\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\065\ufffc\066\ufffc\070\ufffc\072\ufffc" +
    "\001\002\000\006\012\342\013\341\001\002\000\010\004" +
    "\uff91\007\uff91\026\uff91\001\002\000\004\006\314\001\002" +
    "\000\050\005\uffae\007\uffae\011\uffae\012\uffae\013\uffae\015" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\053" +
    "\uffae\001\002\000\010\004\uff8c\007\uff8c\026\uff8c\001\002" +
    "\000\060\002\uffff\004\uffff\005\uffff\006\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\024\uffff\025\uffff\026\uffff" +
    "\027\uffff\030\uffff\031\uffff\032\uffff\036\uffff\057\uffff\060" +
    "\uffff\061\uffff\062\uffff\063\uffff\070\uffff\001\002\000\066" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\036\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\065\uffef\066\uffef\070\uffef\072\uffef" +
    "\001\002\000\066\002\ufff1\004\ufff1\005\ufff1\006\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\036\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\065\ufff1\066\ufff1" +
    "\070\ufff1\072\ufff1\001\002\000\004\012\313\001\002\000" +
    "\004\006\272\001\002\000\062\005\uffb4\007\uffb4\010\257" +
    "\011\uffb4\012\uffb4\013\uffb4\014\255\015\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\052\261\053\uffb4\054" +
    "\260\055\256\001\002\000\066\002\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\036\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\065" +
    "\ufff2\066\ufff2\070\ufff2\072\ufff2\001\002\000\050\005\uffad" +
    "\007\uffad\011\uffad\012\uffad\013\uffad\015\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\053\uffad\001\002\000" +
    "\020\006\051\026\024\027\043\030\037\031\015\032\026" +
    "\036\027\001\002\000\066\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\036" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\065\ufff3" +
    "\066\ufff3\070\ufff3\072\ufff3\001\002\000\014\012\253\035" +
    "\105\036\077\037\102\040\107\001\002\000\010\004\uff8d" +
    "\007\uff8d\026\uff8d\001\002\000\004\006\223\001\002\000" +
    "\066\002\ufffa\004\ufffa\005\ufffa\006\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\036\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\065\ufffa\066\ufffa\070\ufffa\072" +
    "\ufffa\001\002\000\050\005\uffac\007\uffac\011\uffac\012\uffac" +
    "\013\uffac\015\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\053\uffac\001\002\000\010\004\uff95\007\uff95\026" +
    "\uff95\001\002\000\050\005\uffaf\007\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\015\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\053\uffaf\001\002\000\006\004\057\026\213\001" +
    "\002\000\004\006\uffeb\001\002\000\010\004\uff90\007\uff90" +
    "\026\uff90\001\002\000\050\005\uffb0\007\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\015\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\053\uffb0\001\002\000\004\006\202\001\002" +
    "\000\010\004\uff8e\007\uff8e\026\uff8e\001\002\000\054\004" +
    "\uff89\006\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\036\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89" +
    "\070\uff89\001\002\000\056\002\000\004\046\006\051\016" +
    "\054\017\013\020\042\021\010\022\045\024\032\025\016" +
    "\026\024\027\043\030\037\031\015\032\026\036\027\057" +
    "\023\060\041\061\014\062\053\063\052\070\033\001\002" +
    "\000\066\002\uffee\004\uffee\005\uffee\006\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\036\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\065\uffee\066\uffee\070\uffee" +
    "\072\uffee\001\002\000\040\004\uff92\006\051\007\uff92\017" +
    "\013\020\042\021\010\022\045\024\032\025\016\026\024" +
    "\027\043\030\037\031\015\032\026\036\027\001\002\000" +
    "\004\006\166\001\002\000\054\004\uffe8\006\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\036\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\070\uffe8\001\002\000" +
    "\022\004\uff92\017\013\020\042\021\010\022\045\024\032" +
    "\025\016\026\uff92\001\002\000\006\004\057\026\056\001" +
    "\002\000\006\012\uffc1\052\147\001\002\000\032\004\061" +
    "\005\063\006\066\026\024\027\043\030\037\031\015\032" +
    "\026\033\071\034\064\036\027\051\062\001\002\000\012" +
    "\005\uff8b\047\126\050\131\053\127\001\002\000\020\006" +
    "\051\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\001\002\000\030\004\061\006\066\026\024\027\043\030" +
    "\037\031\015\032\026\033\071\034\064\036\027\051\062" +
    "\001\002\000\004\004\137\001\002\000\050\005\uff96\007" +
    "\uff96\011\uff96\012\uff96\013\uff96\015\uff96\035\uff96\036\uff96" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\053\uff96\001\002\000\050" +
    "\005\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\035" +
    "\105\036\077\037\102\040\107\041\104\042\103\043\111" +
    "\044\110\045\106\046\101\047\uffbc\050\uffbc\053\uffbc\001" +
    "\002\000\046\004\061\006\066\007\uff92\017\013\020\042" +
    "\021\010\022\045\024\032\025\016\026\024\027\043\030" +
    "\037\031\015\032\026\033\071\034\064\036\027\051\062" +
    "\001\002\000\050\005\uffba\007\uffba\011\uffba\012\uffba\013" +
    "\uffba\015\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\053\uffba\001\002\000\050\005\uffbb\007\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\015\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\053\uffbb\001\002\000\050\005\uff97\007" +
    "\uff97\011\uff97\012\uff97\013\uff97\015\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\053\uff97\001\002\000\004" +
    "\005\073\001\002\000\010\004\uff94\007\uff94\026\uff94\001" +
    "\002\000\012\007\130\047\126\050\131\053\127\001\002" +
    "\000\006\004\057\007\124\001\002\000\036\007\100\035" +
    "\105\036\077\037\102\040\107\041\104\042\103\043\111" +
    "\044\110\045\106\046\101\047\uffbc\050\uffbc\053\uffbc\001" +
    "\002\000\020\006\051\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\001\002\000\050\005\uffab\007\uffab\011" +
    "\uffab\012\uffab\013\uffab\015\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046" +
    "\uffab\047\uffab\050\uffab\053\uffab\001\002\000\020\006\051" +
    "\026\024\027\043\030\037\031\015\032\026\036\027\001" +
    "\002\000\020\006\051\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\001\002\000\020\006\051\026\024\027" +
    "\043\030\037\031\015\032\026\036\027\001\002\000\020" +
    "\006\051\026\024\027\043\030\037\031\015\032\026\036" +
    "\027\001\002\000\020\006\051\026\024\027\043\030\037" +
    "\031\015\032\026\036\027\001\002\000\020\006\051\026" +
    "\024\027\043\030\037\031\015\032\026\036\027\001\002" +
    "\000\020\006\051\026\024\027\043\030\037\031\015\032" +
    "\026\036\027\001\002\000\020\006\051\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\001\002\000\020\006" +
    "\051\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\001\002\000\050\005\uff9c\007\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\015\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\053\uff9c\001\002\000\050\005\uff9d\007\uff9d\011\uff9d" +
    "\012\uff9d\013\uff9d\015\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\053\uff9d\001\002\000\050\005\uffa7\007" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\053\uffa7\001\002\000\050" +
    "\005\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\053\uff9a\001" +
    "\002\000\050\005\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\015\uffaa\035\uffaa\036\uffaa\037\102\040\107\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\053\uffaa\001\002\000\050\005\uff99\007\uff99\011\uff99\012" +
    "\uff99\013\uff99\015\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\050\uff99\053\uff99\001\002\000\050\005\uff98\007\uff98" +
    "\011\uff98\012\uff98\013\uff98\015\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\046\uff98\047\uff98\050\uff98\053\uff98\001\002\000\050\005" +
    "\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\053\uffa8\001\002" +
    "\000\050\005\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\015" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\053" +
    "\uff9b\001\002\000\050\005\uffa9\007\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\015\uffa9\035\uffa9\036\uffa9\037\102\040\107\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\053\uffa9\001\002\000\020\006\051\026\024\027" +
    "\043\030\037\031\015\032\026\036\027\001\002\000\050" +
    "\005\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\053\uffb5\001" +
    "\002\000\030\004\uffa2\006\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2\051\uffa2\001" +
    "\002\000\030\004\061\006\066\026\024\027\043\030\037" +
    "\031\015\032\026\033\071\034\064\036\027\051\062\001" +
    "\002\000\050\005\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\015\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\053\uffa4\001\002\000\030\004\uffa0\006\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0" +
    "\051\uffa0\001\002\000\030\004\061\006\066\026\024\027" +
    "\043\030\037\031\015\032\026\033\071\034\064\036\027" +
    "\051\062\001\002\000\050\005\uff9f\007\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\015\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\126\050\uff9f\053\127\001\002\000\050\005\uff9e\007\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\015\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\053\uff9e\001\002\000\030\004" +
    "\061\006\066\026\024\027\043\030\037\031\015\032\026" +
    "\033\071\034\064\036\027\051\062\001\002\000\050\005" +
    "\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\053\127\001\002" +
    "\000\004\005\140\001\002\000\010\004\uff93\007\uff93\026" +
    "\uff93\001\002\000\050\005\uffa3\007\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\015\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\053\127\001\002\000\020\005\uffbd\007\uffbd\013" +
    "\uffbd\035\105\036\077\037\102\040\107\001\002\000\006" +
    "\005\145\013\144\001\002\000\020\006\051\026\024\027" +
    "\043\030\037\031\015\032\026\036\027\001\002\000\050" +
    "\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\053\uffa5\001" +
    "\002\000\020\005\uffbe\007\uffbe\013\uffbe\035\105\036\077" +
    "\037\102\040\107\001\002\000\006\004\151\026\150\001" +
    "\002\000\004\012\uffc3\001\002\000\022\005\154\006\051" +
    "\026\024\027\043\030\037\031\015\032\026\036\027\001" +
    "\002\000\004\012\uffc2\001\002\000\006\005\155\013\144" +
    "\001\002\000\004\012\uffc4\001\002\000\004\012\uffc5\001" +
    "\002\000\054\004\046\006\051\016\054\017\013\020\042" +
    "\021\010\022\045\024\032\025\016\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\057\023\060\041\061\014" +
    "\062\053\063\052\070\033\001\002\000\004\060\160\001" +
    "\002\000\004\006\161\001\002\000\030\004\061\006\066" +
    "\026\024\027\043\030\037\031\015\032\026\033\071\034" +
    "\064\036\027\051\062\001\002\000\012\007\164\047\uffba" +
    "\050\uffba\053\uffba\001\002\000\010\047\126\050\131\053" +
    "\127\001\002\000\004\012\165\001\002\000\066\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\036\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\065\uffe7\066\uffe7\070\uffe7\072\uffe7\001\002" +
    "\000\030\004\061\006\066\026\024\027\043\030\037\031" +
    "\015\032\026\033\071\034\064\036\027\051\062\001\002" +
    "\000\036\007\173\035\105\036\077\037\102\040\107\041" +
    "\104\042\103\043\111\044\110\045\106\046\101\047\uffbc" +
    "\050\uffbc\053\uffbc\001\002\000\012\007\171\047\uffba\050" +
    "\uffba\053\uffba\001\002\000\004\012\172\001\002\000\066" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\036\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\063\ufff4\065\ufff4\066\ufff4\070\ufff4\072\ufff4" +
    "\001\002\000\004\012\174\001\002\000\066\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\036\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\065\ufff5\066\ufff5\070\ufff5\072\ufff5\001\002\000" +
    "\014\007\100\035\105\036\077\037\102\040\107\001\002" +
    "\000\060\002\ufffe\004\ufffe\005\ufffe\006\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\032\ufffe\036\ufffe\057\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\070\ufffe\001\002\000\054" +
    "\004\046\006\051\016\054\017\013\020\042\021\010\022" +
    "\045\024\032\025\016\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\057\023\060\041\061\014\062\053\063" +
    "\052\070\033\001\002\000\056\004\046\005\201\006\051" +
    "\016\054\017\013\020\042\021\010\022\045\024\032\025" +
    "\016\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\057\023\060\041\061\014\062\053\063\052\070\033\001" +
    "\002\000\066\002\ufff9\004\ufff9\005\ufff9\006\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\036\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\066\ufff9\070" +
    "\ufff9\072\ufff9\001\002\000\020\006\051\026\024\027\043" +
    "\030\037\031\015\032\026\036\027\001\002\000\006\007" +
    "\204\013\144\001\002\000\050\005\uffb8\007\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\015\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\053\uffb8\001\002\000\004\006\206\001" +
    "\002\000\030\004\061\006\066\026\024\027\043\030\037" +
    "\031\015\032\026\033\071\034\064\036\027\051\062\001" +
    "\002\000\012\007\210\047\uffba\050\uffba\053\uffba\001\002" +
    "\000\054\004\uffea\006\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\036\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\063\uffea\070\uffea\001\002\000\054\004\046\006\051" +
    "\016\054\017\013\020\042\021\010\022\045\024\032\025" +
    "\016\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\057\023\060\041\061\014\062\053\063\052\070\033\001" +
    "\002\000\066\002\uffe9\004\uffe9\005\uffe9\006\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\036\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\063\uffe9\065\uffe9\066\uffe9\070" +
    "\uffe9\072\uffe9\001\002\000\012\010\215\012\uffc6\013\uffc6" +
    "\052\216\001\002\000\006\012\uffcb\013\uffcb\001\002\000" +
    "\030\004\061\006\066\026\024\027\043\030\037\031\015" +
    "\032\026\033\071\034\064\036\027\051\062\001\002\000" +
    "\030\004\061\006\066\026\024\027\043\030\037\031\015" +
    "\032\026\033\071\034\064\036\027\051\062\001\002\000" +
    "\014\012\uffc7\013\uffc7\047\126\050\131\053\127\001\002" +
    "\000\012\011\221\047\126\050\131\053\127\001\002\000" +
    "\010\012\uffc6\013\uffc6\052\216\001\002\000\006\012\uffca" +
    "\013\uffca\001\002\000\020\006\051\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\001\002\000\014\007\225" +
    "\035\105\036\077\037\102\040\107\001\002\000\004\004" +
    "\226\001\002\000\004\067\uffd7\001\002\000\004\067\231" +
    "\001\002\000\006\067\231\071\241\001\002\000\020\006" +
    "\051\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\001\002\000\006\067\uffd3\071\uffd3\001\002\000\014\015" +
    "\uffd2\035\105\036\077\037\102\040\107\001\002\000\004" +
    "\015\235\001\002\000\054\004\046\006\051\016\054\017" +
    "\013\020\042\021\010\022\045\024\032\025\016\026\024" +
    "\027\043\030\037\031\015\032\026\036\027\057\023\060" +
    "\041\061\014\062\053\063\052\070\033\001\002\000\004" +
    "\072\237\001\002\000\004\012\240\001\002\000\006\067" +
    "\uffd1\071\uffd1\001\002\000\004\015\246\001\002\000\004" +
    "\005\uffd6\001\002\000\006\067\uffd4\071\uffd4\001\002\000" +
    "\004\005\245\001\002\000\066\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\036\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\065" +
    "\uffd5\066\uffd5\070\uffd5\072\uffd5\001\002\000\054\004\uffd0" +
    "\006\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\036\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\070" +
    "\uffd0\001\002\000\054\004\046\006\051\016\054\017\013" +
    "\020\042\021\010\022\045\024\032\025\016\026\024\027" +
    "\043\030\037\031\015\032\026\036\027\057\023\060\041" +
    "\061\014\062\053\063\052\070\033\001\002\000\004\072" +
    "\251\001\002\000\004\012\252\001\002\000\004\005\uffcf" +
    "\001\002\000\066\002\ufff8\004\ufff8\005\ufff8\006\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\036\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\065\ufff8\066\ufff8" +
    "\070\ufff8\072\ufff8\001\002\000\050\005\uffa6\007\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\015\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\053\uffa6\001\002\000\004\064\271" +
    "\001\002\000\020\006\051\026\024\027\043\030\037\031" +
    "\015\032\026\036\027\001\002\000\020\006\051\026\024" +
    "\027\043\030\037\031\015\032\026\036\027\001\002\000" +
    "\004\026\263\001\002\000\030\004\061\006\066\026\024" +
    "\027\043\030\037\031\015\032\026\033\071\034\064\036" +
    "\027\051\062\001\002\000\050\005\uffb6\007\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\015\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\126\050\131\053\127\001\002\000\050\005\uffb2\007" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\053\uffb2\001\002\000\014" +
    "\011\265\035\105\036\077\037\102\040\107\001\002\000" +
    "\052\005\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\052\266" +
    "\053\uffb3\001\002\000\020\006\051\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\001\002\000\050\005\uffb7" +
    "\007\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\035\105\036" +
    "\077\037\102\040\107\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\053\uffb7\001\002\000" +
    "\050\005\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1" +
    "\035\105\036\077\037\102\040\107\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\053\uffb1" +
    "\001\002\000\050\005\uffb9\007\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\053\uffb9\001\002\000\030\004\061\006\066\026\024" +
    "\027\043\030\037\031\015\032\026\033\071\034\064\036" +
    "\027\051\062\001\002\000\012\007\274\047\126\050\131" +
    "\053\127\001\002\000\054\004\uffdf\006\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\036\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\070\uffdf\001\002\000\054" +
    "\004\046\006\051\016\054\017\013\020\042\021\010\022" +
    "\045\024\032\025\016\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\057\023\060\041\061\014\062\053\063" +
    "\052\070\033\001\002\000\066\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\036\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\065" +
    "\uffde\066\uffde\070\uffde\072\uffde\001\002\000\066\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\036\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\065\301\066\300\070\uffd8\072\uffd8\001\002" +
    "\000\004\006\304\001\002\000\054\004\046\006\051\016" +
    "\054\017\013\020\042\021\010\022\045\024\032\025\016" +
    "\026\024\027\043\030\037\031\015\032\026\036\027\057" +
    "\023\060\041\061\014\062\053\063\052\070\033\001\002" +
    "\000\066\002\uffdd\004\uffdd\005\uffdd\006\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\036\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\065\uffdd\066\uffdd\070\uffdd" +
    "\072\uffdd\001\002\000\066\002\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\036" +
    "\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\065\uffd9" +
    "\066\uffd9\070\uffd9\072\uffd9\001\002\000\030\004\061\006" +
    "\066\026\024\027\043\030\037\031\015\032\026\033\071" +
    "\034\064\036\027\051\062\001\002\000\012\007\306\047" +
    "\126\050\131\053\127\001\002\000\054\004\uffdc\006\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\036\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\070\uffdc\001" +
    "\002\000\054\004\046\006\051\016\054\017\013\020\042" +
    "\021\010\022\045\024\032\025\016\026\024\027\043\030" +
    "\037\031\015\032\026\036\027\057\023\060\041\061\014" +
    "\062\053\063\052\070\033\001\002\000\066\002\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\036\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\065\uffdb\066\uffdb\070\uffdb\072\uffdb\001\002\000" +
    "\066\002\uffd8\004\uffd8\005\uffd8\006\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\036\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\065\301\066\300\070\uffd8\072" +
    "\uffd8\001\002\000\066\002\uffda\004\uffda\005\uffda\006\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\036\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\065\uffda\066" +
    "\uffda\070\uffda\072\uffda\001\002\000\066\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\036\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\065\ufff6\066\ufff6\070\ufff6\072\ufff6\001\002\000\040" +
    "\004\uff92\006\051\012\uffe5\017\013\020\042\021\010\022" +
    "\045\024\032\025\016\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\001\002\000\006\004\057\026\332\001" +
    "\002\000\016\007\uffe6\012\uffe6\035\105\036\077\037\102" +
    "\040\107\001\002\000\004\012\uffe4\001\002\000\004\012" +
    "\321\001\002\000\030\004\061\006\066\026\024\027\043" +
    "\030\037\031\015\032\026\033\071\034\064\036\027\051" +
    "\062\001\002\000\012\012\uffe3\047\126\050\131\053\127" +
    "\001\002\000\004\012\324\001\002\000\022\006\051\007" +
    "\uffe5\026\024\027\043\030\037\031\015\032\026\036\027" +
    "\001\002\000\004\007\uffe2\001\002\000\004\007\327\001" +
    "\002\000\054\004\uffe1\006\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\036\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\070\uffe1\001\002\000\054\004\046\006" +
    "\051\016\054\017\013\020\042\021\010\022\045\024\032" +
    "\025\016\026\024\027\043\030\037\031\015\032\026\036" +
    "\027\057\023\060\041\061\014\062\053\063\052\070\033" +
    "\001\002\000\066\002\uffe0\004\uffe0\005\uffe0\006\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\036\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\065\uffe0\066\uffe0" +
    "\070\uffe0\072\uffe0\001\002\000\004\015\uffce\001\002\000" +
    "\004\015\334\001\002\000\030\004\061\006\066\026\024" +
    "\027\043\030\037\031\015\032\026\033\071\034\064\036" +
    "\027\051\062\001\002\000\012\007\336\047\126\050\131" +
    "\053\127\001\002\000\054\004\uffcd\006\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\036\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\063\uffcd\070\uffcd\001\002\000\054" +
    "\004\046\006\051\016\054\017\013\020\042\021\010\022" +
    "\045\024\032\025\016\026\024\027\043\030\037\031\015" +
    "\032\026\036\027\057\023\060\041\061\014\062\053\063" +
    "\052\070\033\001\002\000\066\002\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\036\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\065" +
    "\uffcc\066\uffcc\070\uffcc\072\uffcc\001\002\000\004\026\343" +
    "\001\002\000\066\002\ufff7\004\ufff7\005\ufff7\006\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\036\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\065\ufff7\066\ufff7" +
    "\070\ufff7\072\ufff7\001\002\000\012\010\345\012\uffc6\013" +
    "\uffc6\052\216\001\002\000\006\012\uffc9\013\uffc9\001\002" +
    "\000\030\004\061\006\066\026\024\027\043\030\037\031" +
    "\015\032\026\033\071\034\064\036\027\051\062\001\002" +
    "\000\012\011\347\047\126\050\131\053\127\001\002\000" +
    "\010\012\uffc6\013\uffc6\052\216\001\002\000\006\012\uffc8" +
    "\013\uffc8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\052\002\003\003\046\004\016\005\006\006" +
    "\010\007\027\010\024\012\020\013\004\015\047\016\017" +
    "\023\005\024\033\031\043\046\037\047\011\050\021\051" +
    "\035\056\034\057\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\043\056\034\057\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\176\001" +
    "\001\000\046\004\175\005\006\006\010\007\027\010\024" +
    "\012\020\013\004\015\047\016\017\023\005\024\033\031" +
    "\043\046\037\047\011\050\021\051\035\056\034\057\030" +
    "\001\001\000\002\001\001\000\014\031\043\046\074\051" +
    "\035\056\034\057\174\001\001\000\002\001\001\000\004" +
    "\063\155\001\001\000\006\046\054\051\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\043\035\066" +
    "\053\057\054\067\055\071\056\034\057\064\001\001\000" +
    "\002\001\001\000\012\031\043\044\142\056\034\057\141" +
    "\001\001\000\016\031\043\035\066\053\140\054\067\056" +
    "\034\057\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\031\043\035\066\046\074\051" +
    "\035\053\073\054\067\056\034\057\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\043\056\034\057\122\001" +
    "\001\000\002\001\001\000\010\031\043\056\034\057\121" +
    "\001\001\000\010\031\043\056\034\057\120\001\001\000" +
    "\010\031\043\056\034\057\117\001\001\000\010\031\043" +
    "\056\034\057\116\001\001\000\010\031\043\056\034\057" +
    "\115\001\001\000\010\031\043\056\034\057\114\001\001" +
    "\000\010\031\043\056\034\057\113\001\001\000\010\031" +
    "\043\056\034\057\112\001\001\000\010\031\043\056\034" +
    "\057\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\043\056\034\057\124" +
    "\001\001\000\002\001\001\000\004\102\134\001\001\000" +
    "\016\031\043\035\066\053\133\054\067\056\034\057\064" +
    "\001\001\000\002\001\001\000\004\103\131\001\001\000" +
    "\016\031\043\035\066\053\132\054\067\056\034\057\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\043\035\066\053\135\054\067\056\034\057\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\043\056\034\057\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\151\001\001\000\002\001\001" +
    "\000\012\031\043\044\152\056\034\057\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\156\005\006\006\010\007\027\010" +
    "\024\012\020\013\004\015\047\016\017\023\005\024\033" +
    "\031\043\046\037\047\011\050\021\051\035\056\034\057" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\031\043\035\161\053\162\054\067\056\034\057\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\031\043\035\167\053\162\054" +
    "\067\056\034\057\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\177\004\016\005\006\006\010\007\027\010" +
    "\024\012\020\013\004\015\047\016\017\023\005\024\033" +
    "\031\043\046\037\047\011\050\021\051\035\056\034\057" +
    "\030\001\001\000\046\004\175\005\006\006\010\007\027" +
    "\010\024\012\020\013\004\015\047\016\017\023\005\024" +
    "\033\031\043\046\037\047\011\050\021\051\035\056\034" +
    "\057\030\001\001\000\002\001\001\000\012\031\043\044" +
    "\202\056\034\057\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\031\043\035\206\053" +
    "\162\054\067\056\034\057\064\001\001\000\002\001\001" +
    "\000\004\062\210\001\001\000\046\004\211\005\006\006" +
    "\010\007\027\010\024\012\020\013\004\015\047\016\017" +
    "\023\005\024\033\031\043\046\037\047\011\050\021\051" +
    "\035\056\034\057\030\001\001\000\002\001\001\000\004" +
    "\060\213\001\001\000\002\001\001\000\016\031\043\035" +
    "\066\053\217\054\067\056\034\057\064\001\001\000\016" +
    "\031\043\035\066\053\216\054\067\056\034\057\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\221" +
    "\001\001\000\002\001\001\000\010\031\043\056\034\057" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\226\001\001\000\006\017\227\021\231\001\001\000" +
    "\006\020\241\021\242\001\001\000\010\031\043\056\034" +
    "\057\232\001\001\000\002\001\001\000\004\076\233\001" +
    "\001\000\002\001\001\000\046\004\235\005\006\006\010" +
    "\007\027\010\024\012\020\013\004\015\047\016\017\023" +
    "\005\024\033\031\043\046\037\047\011\050\021\051\035" +
    "\056\034\057\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\246\001\001\000\046\004\247\005\006" +
    "\006\010\007\027\010\024\012\020\013\004\015\047\016" +
    "\017\023\005\024\033\031\043\046\037\047\011\050\021" +
    "\051\035\056\034\057\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\043\056\034\057" +
    "\267\001\001\000\010\031\043\056\034\057\263\001\001" +
    "\000\002\001\001\000\016\031\043\035\066\053\261\054" +
    "\067\056\034\057\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\043\056\034\057\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\031\043\035\066\053" +
    "\272\054\067\056\034\057\064\001\001\000\002\001\001" +
    "\000\004\070\274\001\001\000\046\004\275\005\006\006" +
    "\010\007\027\010\024\012\020\013\004\015\047\016\017" +
    "\023\005\024\033\031\043\046\037\047\011\050\021\051" +
    "\035\056\034\057\030\001\001\000\004\071\276\001\001" +
    "\000\004\034\301\001\001\000\002\001\001\000\046\004" +
    "\302\005\006\006\010\007\027\010\024\012\020\013\004" +
    "\015\047\016\017\023\005\024\033\031\043\046\037\047" +
    "\011\050\021\051\035\056\034\057\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\031\043\035\066\053" +
    "\304\054\067\056\034\057\064\001\001\000\002\001\001" +
    "\000\004\072\306\001\001\000\046\004\307\005\006\006" +
    "\010\007\027\010\024\012\020\013\004\015\047\016\017" +
    "\023\005\024\033\031\043\046\037\047\011\050\021\051" +
    "\035\056\034\057\030\001\001\000\004\073\310\001\001" +
    "\000\004\034\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\316\031\043\046\314\051\035\056\034" +
    "\057\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\317\001\001\000\002\001\001\000\016\031\043" +
    "\035\066\053\321\054\067\056\034\057\064\001\001\000" +
    "\004\065\322\001\001\000\002\001\001\000\012\014\324" +
    "\031\043\056\034\057\315\001\001\000\004\066\325\001" +
    "\001\000\002\001\001\000\004\067\327\001\001\000\046" +
    "\004\330\005\006\006\010\007\027\010\024\012\020\013" +
    "\004\015\047\016\017\023\005\024\033\031\043\046\037" +
    "\047\011\050\021\051\035\056\034\057\030\001\001\000" +
    "\002\001\001\000\004\100\332\001\001\000\002\001\001" +
    "\000\016\031\043\035\066\053\334\054\067\056\034\057" +
    "\064\001\001\000\002\001\001\000\004\101\336\001\001" +
    "\000\046\004\337\005\006\006\010\007\027\010\024\012" +
    "\020\013\004\015\047\016\017\023\005\024\033\031\043" +
    "\046\037\047\011\050\021\051\035\056\034\057\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\343\001\001\000\002\001\001\000\016\031" +
    "\043\035\066\053\345\054\067\056\034\057\064\001\001" +
    "\000\002\001\001\000\004\060\347\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                Symbol value = (Symbol)info;
                System.err.print(" (linea "+line+", colonna "+column+", símbolo " + sym.terminalNames[value.sym] + "): " + value.toString());
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    public void checkVariable(Objeto obj) {
          if (obj == null)
              Objeto.errorYPara("[ERROR]\tLa variable no ha sido declarada", new Vector<>(List.of(obj)));

          if (!(obj instanceof Instancia))
              Objeto.errorYPara("[ERROR]\tLa variable no es una instancia", new Vector<>(List.of(obj)));
    }

    public void checkVariable(String id) {
        checkVariable(PLXC.tablaSimbolos.getObj(id));
    }

    public void checkType(Objeto obj, Tipo tipo) {
        if (!(obj instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(obj, tipo)));
        Instancia aux = (Instancia) obj;
        if (!aux.getTipoInstancia().isParseable(tipo) )// || aux.getTipoInstancia().getClass() != tipo.getClass()
            Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>(List.of(obj, tipo)));
    }

    public Instancia checkElem(Objeto valor) {
        if (!(valor instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se puede formar una coleccion de elementos sin instancias de un mismo tipo mismo tipo", new Vector<>(List.of(valor)));

       return (Instancia) valor;
    }

    private String end_and = "", end_or = "";
    private Stack<String> if_tags = new Stack<>();
    private Stack<SwichOperator> switch_operators = new Stack<>();
    private Stack<Funcion> Funciones = new Stack<>();
    private Objeto res_bool;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= lista_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sent ::= lista_sent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= sent_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= declr_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= impl_func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent_comp ::= ALL Init_Bloque lista_sent CLL 
            {
              Object RESULT =null;
		int bloquePrevioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloquePrevioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloquePrevio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  PLXC.tablaSimbolos.delBlock();
                  TablaSimbolos.bloqueActual = bloquePrevio;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent_simpl ::= valor PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent_simpl ::= declr PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_simpl ::= declr_conj PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_simpl ::= PRINT AP valor CP PYC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if (valor != null) RESULT = valor.metodos("PRINT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent_simpl ::= PRINT AP cond CP PYC 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  if (valor != null) RESULT = valor.metodos("PRINT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent_simpl ::= sent_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sent_simpl ::= sent_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent_simpl ::= sent_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sent_simpl ::= sent_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent_simpl ::= sent_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sent_simpl ::= sent_foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_simpl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_sent_simpl ::= list_sent_simpl sent_simpl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_sent_simpl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_sent_simpl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println(whileTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                    PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + whileTag + ";");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent_while ::= WHILE NT$0 AP cond CP NT$1 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    PLXC.out.println("goto " + whileTag + ";");
                       PLXC.out.println("end_" + whileTag + " :");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    PLXC.out.println("DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent_do_while ::= DO NT$2 sent WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int doTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int doTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String doTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int whileTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int whileTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String whileTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        PLXC.out.println("if (" + c.getNombre() + " == 1) goto DO_" + doTag + " ;");
                        PLXC.out.println("END_DO_" + doTag + ":");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_do_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_expr ::= valor 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println(forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("if (" + c.getNombre() + " == 0) goto end_" + forTag + ";");
                PLXC.out.println("goto body_" + forTag + ";");
                PLXC.out.println("act_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                PLXC.out.println("goto " + forTag + ";");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                PLXC.out.println("body_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sent_for ::= FOR AP for_expr NT$3 PYC expr NT$4 PYC for_expr NT$5 CP NT$6 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                PLXC.out.println("goto act_" + forTag + ";");
                PLXC.out.println("end_" + forTag + ":");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              Object RESULT =null;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    this.if_tags.push(ifTag);
    PLXC.out.println("if (" + c.getNombre() + " == 0) goto else_" + ifTag + " ;");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

            PLXC.out.println("goto end_" + ifTag + " ;");
            PLXC.out.println("else_" + ifTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent_if ::= IF AP expr CP NT$7 sent NT$8 else_if 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ifTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ifTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
            PLXC.out.println("end_" + ifTag + ":");
            this.if_tags.pop();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              String RESULT =null;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    PLXC.out.println(" if (" + c.getNombre() + " == 0) goto else_" + elseIfTag + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                PLXC.out.println("goto end_" + this.if_tags.peek() + ";");
                PLXC.out.println("else_" + elseIfTag + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_if ::= ELSEIF AP expr CP NT$9 sent NT$10 else_if 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseIfTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int elseIfTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String elseIfTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto c = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // else_if ::= ELSE sent 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // else_if ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$11 ::= 
            {
              Object RESULT =null;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    // Checkear que la expresion es una instancia de tipo entero
                    if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));
                    SwichOperator swOper = new SwichOperator(switchTag, (Instancia) expr);
                    this.switch_operators.push(swOper);

                    PLXC.out.println(swOper.getEtiqSwitch() + ":");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println(swOper.getEndSwitch() + ":");
                    this.switch_operators.pop();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sent_switch ::= SWITCH AP valor CP ALL NT$11 list_case op_default NT$12 CLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int switchTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int switchTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String switchTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_switch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list_case ::= list_case case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_case ::= case_oper 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_case",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$13 ::= 
            {
              Object RESULT =null;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                  // Checkear que el valor sea una instancia de tipo entero
                  if (!(expr instanceof Instancia) && ((Instancia) expr).getTipoInstancia() != TInt.getTInt())
                        Objeto.errorYPara("[ERROR]\tLa expresion del switch no es una instancia de tipo entero", new Vector<>(List.of(expr)));

                  SwichOperator swOper = this.switch_operators.peek();
                  // if (switchExpr != expr) goto end_caseEtq ;
                  PLXC.out.println(SwichOperator.genCase(caseEtq) + ":");
                  PLXC.out.println("if (" + swOper.getExpr().getNombre() + " != " + expr.getNombre() + ") goto " + SwichOperator.getEndCase(caseEtq) + ";");
                  swOper.addCase(caseEtq);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // case_oper ::= CASE valor NT$13 DP sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caseEtqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int caseEtqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String caseEtq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                    //Salto incondicional al final del switch
                    SwichOperator swOper = this.switch_operators.peek();
                    PLXC.out.println("goto " + swOper.getEndSwitch() + ";");
                    // Etiqueta de fin del end_caseEtq
                    PLXC.out.println(SwichOperator.getEndCase(caseEtq)+ ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_oper",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$14 ::= 
            {
              Object RESULT =null;

            SwichOperator swOper = this.switch_operators.peek();
            PLXC.out.println("default_" + swOper.getEtiqSwitch() + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_default ::= DEFAULT DP NT$14 sent BREAK PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_default",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$15 ::= 
            {
              Object RESULT =null;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                // Añadir la variable itradora a la tablade símbolos
                Instancia iter = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                PLXC.tablaSimbolos.putObj(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                // Checkear si la expresion es iterable
                if (!(expr instanceof Instancia) || !((Instancia)expr).getTipoInstancia().isIterable())
                    Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each no es iterable.", new Vector<>(List.of(expr)));

                if (expr instanceof SetInstance) {
                    SetInstance set = (SetInstance) expr;
                    Instancia iter = new Instancia(set.getTipoInstancia());

                    set.iterate(iter);
                } else {
                    // En caso de serlo, declarar la etiqueta del búcle y asignar valor a la variable iteradora
                    Instancia index = new Instancia("$_FOREACH_IDX_".concat(forTag), TInt.getTInt(), TablaSimbolos.bloqueActual, true);
                    PLXC.tablaSimbolos.putObj(index);
                    Instancia iter = (Instancia) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
                    Instancia colec = (Instancia) expr;

                    PLXC.out.println(index.getNombre() + " = 0;");
                    PLXC.out.println("foreach_" + forTag + ":");

                    if (colec instanceof StringInstancia) {
                        if (iter.getTipoInstancia() != TChar.getTChar())
                            Objeto.errorYPara("[ERROR]\tLa variable iteradora del búcle for each necesita ser de tipo char.", new Vector<>(List.of(iter)));

                        StringInstancia.iterate(index, (StringInstancia) colec, iter, "end_foreach_".concat(forTag));
                    } else if (colec.getTipoInstancia() == TString.getInstance()){
                        Objeto.errorYPara("[ERROR]\tLa expresion del búcle for each necesita un StringInstance no una instancia de tipo String.", new Vector<>(List.of(expr)));
                    } else if (colec.getTipoInstancia() instanceof TArray) {
                        TArray.iterate(index, (TArray) colec.getTipoInstancia(), colec, iter, "end_foreach_".concat(forTag));
                    }


                    // Instanciar la variable índice con la que se hará en control y acceso a los elementos
                    // (Sentencia de control, la colección ha de contener el número de iteraciones)
                }

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sent_foreach ::= FOR AP tipo ID NT$15 DP expr CP NT$16 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int forTagleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int forTagright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String forTag = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                // Resetear el iterador
                Instancia idx = (Instancia) PLXC.tablaSimbolos.getObj("$_FOREACH_IDX_".concat(forTag), TablaSimbolos.bloqueActual);

                idx.metodos("INCREMENTA_1", new Vector<>());
                PLXC.out.println("goto foreach_" + forTag + ";");
                PLXC.out.println("end_foreach_" + forTag + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_foreach",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declr ::= tipo ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (inic != null) {
            Instancia newVar;

            if (tipo != TString.getInstance())
                 newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            else
                 newVar = new StringInstancia(id);

            PLXC.tablaSimbolos.putObj(newVar);
            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }

        RESULT = tipo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declr ::= tipo ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        if (inic != null) {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

            newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
        } else {
            Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);
        }


        RESULT = tipo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declr ::= declr COMA ID inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  if (inic != null) {
                                      Instancia newVar;

                                      if (tipo != TString.getInstance())
                                           newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      else
                                           newVar = new StringInstancia(id);

                                      PLXC.tablaSimbolos.putObj(newVar);
                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, tipo, TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }

                                  RESULT = tipo;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declr ::= declr COMA ID AC expr CC inic 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto tam = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto inic = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                                  if (inic != null) {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);

                                      newVar.metodos("ASIGNA",new Vector<>(List.of(inic)));
                                  } else {
                                      Instancia newVar = new Instancia(id, new TArray(tipo, tam), TablaSimbolos.bloqueActual, true);
                                      PLXC.tablaSimbolos.putObj(newVar);
                                  }


                                  RESULT = tipo;
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inic ::= ASIGNA expr 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inic ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inic",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // set_value ::= ALL list_valor CLL 
            {
              List<Instancia> RESULT =null;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> inic = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = inic;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // set_value ::= ALL CLL 
            {
              List<Instancia> RESULT =null;
		 RESULT = new ArrayList<Instancia>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // set_value ::= ID 
            {
              List<Instancia> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto expr = PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
            if (!(expr instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa expresion proporcionada como set value no es una instancia de SetInstace", new Vector<>(List.of(expr)));
            } else {
                SetInstance setValue = (SetInstance) expr;
                RESULT = setValue.getElems();
            }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_value",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declr_conj ::= SET tipo ID ASIGNA set_value 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Instancia> inic = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Instancia newVariable = new SetInstance(id, tipo, inic, TablaSimbolos.bloqueActual, true);

        PLXC.tablaSimbolos.putObj(newVariable);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_conj",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declr_conj ::= SET tipo ID 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            SetInstance newVar = new SetInstance(id, tipo, TablaSimbolos.bloqueActual, true);
            PLXC.tablaSimbolos.putObj(newVar);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr_conj",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_id ::= ID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            List<String> start = new ArrayList<>();
            start.add(id);
            RESULT = start; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list_id ::= list_id COMA ID 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  list.add(id); RESULT = list;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_id",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list_valor ::= list_valor COMA valor 
            {
              List<Instancia> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);

            if (l.get(0).getTipoInstancia() != elem.getTipoInstancia())
                Objeto.errorYPara("[ERROR]\tEl elemento de la colección no es del mismo tipo que el resto", new Vector<>());

            l.add(elem);
            RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // list_valor ::= valor 
            {
              List<Instancia> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto val = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Instancia elem = checkElem(val);
            List<Instancia> start = new ArrayList<>();

            start.add(elem);

            RESULT = start;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_valor",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= valor 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr_array 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = expr;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= cond 
            {
              Objeto RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto cond = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = cond;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= ID PUNTO LENGTH 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            checkVariable(id);
            Objeto a = PLXC.tablaSimbolos.getObj(id);

          if (!(a instanceof Instancia) && (((Instancia) a).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es una instancia", new Vector<>(List.of(a)));


          RESULT = a.metodos(TArray.ARRAY_METHODS.LENGTH.name(), new Vector<>());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor ::= func_id AP list_valor CP 
            {
              Objeto RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Funcion f = (Funcion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> params = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        f.callFunction(new ArrayList(params));

        RESULT = f.getReturnInstancia();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor ::= ID AC valor CC ASIGNA valor 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          // Checkear que el valor es una instancia y no es de tipo array
          checkVariable(id);
          // Checkear que le valor es del mismo que la variable
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable.getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("SET", new Vector<>(List.of(idx, valor)));
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor ::= ID ASIGNA expr 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto valor = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                this.checkVariable(id); // Comprueba que la variable este declarada y que sea una instancia
                Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

                if (!(variable.getTipoInstancia() instanceof TArray)) {
                      this.checkType(valor, variable.getTipoInstancia()); // Comprueba que el tipo de la variable sea el mismo que el de la expresion o sean parseables entre sii
                }

                variable.metodos("ASIGNA", new Vector<>(List.of(valor)));

                RESULT = valor;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= AP tipo CP valor 
            {
              Objeto RESULT =null;
		int tipoDstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipoDstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo tipoDst = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

      if (exp instanceof Instancia) {
          Instancia aux = ((Instancia)exp).getTipoInstancia().cast(tipoDst, (Instancia) exp);
          if (aux != null) {
              RESULT = aux;
          } else {
              Objeto.errorYPara("[ERROR]\tNo se puede hacer una asignación si el valor a asignar no es del mismo tipo o no son parseables entre sii", new Vector<>());
          }
      } else {
          Objeto.errorYPara("[ERROR]\tNo se puede hacer un casting si el valor a asignar no es una instancia", new Vector<>());
      }

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= ID 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  checkVariable(id); RESULT = PLXC.tablaSimbolos.getObj(id);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor ::= ID AC valor CC 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto idx = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          checkVariable(id);
          Instancia variable = (Instancia) PLXC.tablaSimbolos.getObj(id);

          if (!(variable instanceof Instancia) && (((Instancia) variable).getTipoInstancia() instanceof TArray))
              Objeto.errorYPara("[ERROR]\tLa variable no es un array", new Vector<>(List.of(variable)));

          RESULT = variable.metodos("GET", new Vector<>(List.of(idx)));

      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= ID UNION ID 
            {
              Objeto RESULT =null;
		int idAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idA = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idB = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            SetInstance a = null, b = null;
            Objeto aux = PLXC.tablaSimbolos.getObj(idA, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                a = (SetInstance) aux;
            }

            aux = PLXC.tablaSimbolos.getObj(idB, TablaSimbolos.bloqueActual);
            if (! (aux instanceof SetInstance)) {
                Objeto.errorYPara("[ERROR]\tLa unión de conjuntos necesita des objeto de tipo SetInstance", new Vector<>());
            } else {
                b = (SetInstance) aux;
            }

            RESULT = a.metodos(TSet.SET_METHODS.UNION.name(), new Vector<>(List.of(b)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= ID ADD valor 
            {
              Objeto RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto value = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       if (!(value instanceof Instancia))
            Objeto.errorYPara("[ERROR]\tNo se pueden añadir elementos a un conjunto si estos no son instancias", new Vector<>(List.of(value)));

       SetInstance set = (SetInstance) PLXC.tablaSimbolos.getObj(id, TablaSimbolos.bloqueActual);
       Instancia elem = (Instancia) value;

       RESULT = set.metodos(TSet.SET_METHODS.ADD.name(), new Vector<>(List.of(elem)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor ::= NUM_ENTERO 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TInt.getTInt(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor ::= NUM_REAL 
            {
              Objeto RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float num = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(num.toString(), TFloat.getTFloat(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= CARACTER 
            {
              Objeto RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Instancia(c.toString(), TChar.getTChar(), TablaSimbolos.bloqueActual, false);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor ::= CADENA 
            {
              Objeto RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          char[] chars = s.toCharArray();
          StringInstancia res = new StringInstancia(chars);

          res = TString.asignaConstante(res, chars);

          RESULT = res;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor ::= expr_arit 
            {
              Objeto RESULT =null;
		int expr_aritleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr_aritright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr_arit = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = expr_arit;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr_arit ::= AP valor CP 
            {
              Objeto RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = exp;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr_arit ::= valor MAS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr_arit ::= valor MENOS valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr_arit ::= valor POR valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr_arit ::= valor DIV valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos(op, new Vector(List.of(b)));     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_arit ::= MENOS valor 
            {
              Objeto RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exp.metodos("UMENOS", new Vector());       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_arit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_array ::= ALL list_valor CLL 
            {
              Objeto RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Instancia> l = (List<Instancia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Instancia res = new Instancia(new TArray(l.get(0).getTipoInstancia(), String.valueOf(l.size())));
                for (int i = 0; i < l.size(); i++) {
                     PLXC.out.println(res.getNombre() + "[" + i + "] = " + l.get(i).getNombre() + ";");
                }

                RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_array",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cond ::= AP expr CP 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cond ::= NOT expr 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("NOT", new Vector());   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$17 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_and = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 0) goto " + end_and + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cond ::= expr AND NT$17 expr 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_and + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$18 ::= 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        this.end_or = PLXC.tablaSimbolos.getNewEtiq();
        this.res_bool = new Instancia(TBool.getTBool());
        PLXC.out.println(res_bool.getNombre() + " = " + a.getNombre() + ";");
        PLXC.out.println("if (" + a.getNombre() + " == 1) goto " + end_or + ";");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cond ::= expr OR NT$18 expr 
            {
              Objeto RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Objeto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            PLXC.out.println(res_bool.getNombre() + " = " + b.getNombre() + ";");
            PLXC.out.println(this.end_or + ":");
            RESULT = res_bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cond ::= expr IMPLICA expr 
            {
              Objeto RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto p = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto q = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        if (!(p instanceof Instancia) && !(q instanceof Instancia)) {
            Objeto.errorYPara("[ERROR]\tLa operación implica necesita de instancias", new Vector<>(List.of(p, q)));
        }

        if (((Instancia) p).getTipoInstancia() != TBool.getTBool() || ((Instancia) q).getTipoInstancia() != TBool.getTBool()) {
            Objeto.errorYPara("[ERROR]\tLa operación implica necesita de instancias de tipo booleano", new Vector<>(List.of(p, q)));
        }

        RESULT = p.metodos(TBool.BOOL_METHODS.IMPLICA.name(), new Vector<>(List.of(q)));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cond ::= valor GT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cond ::= valor LT valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond ::= valor GE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MAYOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond ::= valor LE valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("MENOR_IGUAL", new Vector(List.of(b)));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cond ::= valor EQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("IGUAL", new Vector(List.of(b)));          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cond ::= valor NEQ valor 
            {
              Objeto RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto b = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a.metodos("DISTINTO", new Vector(List.of(b)));       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cond ::= FALSE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("0", TBool.getTBool(), TablaSimbolos.bloqueActual, false);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cond ::= TRUE 
            {
              Objeto RESULT =null;
		  RESULT = new Instancia("1", TBool.getTBool(), TablaSimbolos.bloqueActual, false);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipo ::= tipo_primit 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipo ::= tipo ALL array_length CLL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Objeto exp = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

        if (exp != null) {
            RESULT = new TArray(t, exp.getNombre());
        } else {
            RESULT = new TArray(t);
        }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipo ::= tipo ALL CLL ALL CLL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		

        TArray tfila = new TArray(t);
        TArray tmatriz = new TArray(tfila);

        RESULT = tmatriz;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipo ::= 
            {
              Tipo RESULT =null;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipo_primit ::= INT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TInt.getTInt();            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipo_primit ::= FLOAT 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TFloat.getTFloat();        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipo_primit ::= CHAR 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TChar.getTChar();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipo_primit ::= STRING 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TString.getInstance();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipo_primit ::= VOID 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TVoid.getTVoid();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipo_primit ::= BOOL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = TBool.getTBool();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_primit",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // array_length ::= expr 
            {
              Objeto RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Objeto expr = (Objeto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_length",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // array_length ::= 
            {
              Objeto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_length",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Init_Bloque ::= 
            {
              Integer RESULT =null;
		  RESULT = TablaSimbolos.newBloque();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Init_Bloque",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // and_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_end",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // or_end ::= 
            {
              String RESULT =null;
		  RESULT = PLXC.tablaSimbolos.getNewEtiq();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("or_end",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Get_BoolInstance ::= 
            {
              Objeto RESULT =null;
		 RESULT = new Instancia(TBool.getTBool());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Get_BoolInstance",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
